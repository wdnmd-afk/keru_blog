{
  "preCommitHook": {
    "title": "pre-commit Hook",
    "language": "bash",
    "code": "#!/bin/sh\n# .git/hooks/pre-commit\n# 提交前代码质量检查\n\necho \"🔍 执行pre-commit检查...\"\n\n# 检查代码格式\nnpm run lint\nif [ $? -ne 0 ]; then\n    echo \"❌ 代码格式检查失败\"\n    exit 1\nfi\n\n# 运行测试\nnpm run test\nif [ $? -ne 0 ]; then\n    echo \"❌ 测试失败\"\n    exit 1\nfi\n\n# 检查提交文件大小\nfor file in $(git diff --cached --name-only); do\n    if [ -f \"$file\" ]; then\n        size=$(wc -c < \"$file\")\n        if [ $size -gt 1048576 ]; then  # 1MB\n            echo \"❌ 文件 $file 过大 (${size} bytes)\"\n            exit 1\n        fi\n    fi\ndone\n\n# 检查敏感信息\nif git diff --cached | grep -E \"(password|secret|key|token)\" > /dev/null; then\n    echo \"❌ 检测到可能的敏感信息\"\n    exit 1\nfi\n\necho \"✅ pre-commit检查通过\"\nexit 0"
  },
  "commitMsgHook": {
    "title": "commit-msg Hook",
    "language": "bash",
    "code": "#!/bin/sh\n# .git/hooks/commit-msg\n# 验证提交信息格式\n\ncommit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\\(.+\\))?: .{1,50}'\n\ncommit_msg=$(cat $1)\n\nif ! echo \"$commit_msg\" | grep -qE \"$commit_regex\"; then\n    echo \"❌ 提交信息格式不正确\"\n    echo \"正确格式: <type>(<scope>): <description>\"\n    echo \"类型: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert\"\n    echo \"示例: feat(auth): 添加用户登录功能\"\n    echo \"当前提交信息: $commit_msg\"\n    exit 1\nfi\n\n# 检查提交信息长度\nif [ ${#commit_msg} -gt 72 ]; then\n    echo \"❌ 提交信息过长 (${#commit_msg} 字符，建议不超过72字符)\"\n    exit 1\nfi\n\n# 检查是否包含中文\nif echo \"$commit_msg\" | grep -qP '[\\x{4e00}-\\x{9fff}]'; then\n    echo \"✅ 包含中文描述\"\nfi\n\necho \"✅ 提交信息格式正确\"\nexit 0"
  },
  "prePushHook": {
    "title": "pre-push Hook",
    "language": "bash",
    "code": "#!/bin/sh\n# .git/hooks/pre-push\n# 推送前检查\n\nremote=\"$1\"\nurl=\"$2\"\n\necho \"🚀 执行pre-push检查...\"\necho \"推送到: $remote ($url)\"\n\n# 检查当前分支\ncurrent_branch=$(git rev-parse --abbrev-ref HEAD)\necho \"当前分支: $current_branch\"\n\n# 禁止直接推送到main/master分支\nif [ \"$current_branch\" = \"main\" ] || [ \"$current_branch\" = \"master\" ]; then\n    echo \"❌ 禁止直接推送到 $current_branch 分支\"\n    echo \"请使用Pull Request流程\"\n    exit 1\nfi\n\n# 检查是否有未提交的更改\nif ! git diff-index --quiet HEAD --; then\n    echo \"❌ 存在未提交的更改\"\n    exit 1\nfi\n\n# 运行完整测试套件\necho \"🧪 运行测试套件...\"\nnpm run test:full\nif [ $? -ne 0 ]; then\n    echo \"❌ 测试失败，推送被阻止\"\n    exit 1\nfi\n\n# 检查代码覆盖率\necho \"📊 检查代码覆盖率...\"\nnpm run test:coverage\nif [ $? -ne 0 ]; then\n    echo \"⚠️ 代码覆盖率检查失败\"\n    # 可以选择是否阻止推送\n    # exit 1\nfi\n\necho \"✅ pre-push检查通过\"\nexit 0"
  },
  "preReceiveHook": {
    "title": "pre-receive Hook",
    "language": "bash",
    "code": "#!/bin/sh\n# hooks/pre-receive\n# 服务端接收前检查\n\necho \"🔍 服务端pre-receive检查...\"\n\nwhile read oldrev newrev refname; do\n    # 获取分支名\n    branch=$(echo $refname | sed 's/refs\\/heads\\///')\n    echo \"检查分支: $branch\"\n    \n    # 保护主分支\n    if [ \"$branch\" = \"main\" ] || [ \"$branch\" = \"master\" ]; then\n        # 检查推送者权限\n        if [ \"$USER\" != \"admin\" ]; then\n            echo \"❌ 只有管理员可以推送到 $branch 分支\"\n            exit 1\n        fi\n    fi\n    \n    # 检查提交信息格式\n    for commit in $(git rev-list $oldrev..$newrev); do\n        msg=$(git log --format=%s -n 1 $commit)\n        if ! echo \"$msg\" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)'; then\n            echo \"❌ 提交 $commit 信息格式不正确: $msg\"\n            exit 1\n        fi\n    done\n    \n    # 检查文件大小\n    for commit in $(git rev-list $oldrev..$newrev); do\n        for file in $(git diff-tree --no-commit-id --name-only -r $commit); do\n            size=$(git cat-file -s $commit:$file 2>/dev/null || echo 0)\n            if [ $size -gt 10485760 ]; then  # 10MB\n                echo \"❌ 文件 $file 过大 (${size} bytes)\"\n                exit 1\n            fi\n        done\n    done\ndone\n\necho \"✅ 服务端检查通过\"\nexit 0"
  },
  "postReceiveHook": {
    "title": "post-receive Hook",
    "language": "bash",
    "code": "#!/bin/sh\n# hooks/post-receive\n# 服务端接收后操作\n\necho \"📨 执行post-receive操作...\"\n\nwhile read oldrev newrev refname; do\n    branch=$(echo $refname | sed 's/refs\\/heads\\///')\n    \n    echo \"处理分支: $branch\"\n    echo \"从 $oldrev 到 $newrev\"\n    \n    # 主分支自动部署\n    if [ \"$branch\" = \"main\" ]; then\n        echo \"🚀 触发生产环境部署...\"\n        \n        # 发送部署通知\n        curl -X POST \"$SLACK_WEBHOOK\" \\\n            -H 'Content-type: application/json' \\\n            --data '{\n                \"text\": \"🚀 生产环境部署开始\",\n                \"attachments\": [{\n                    \"color\": \"good\",\n                    \"fields\": [{\n                        \"title\": \"分支\",\n                        \"value\": \"'$branch'\",\n                        \"short\": true\n                    }, {\n                        \"title\": \"提交\",\n                        \"value\": \"'$newrev'\",\n                        \"short\": true\n                    }]\n                }]\n            }'\n        \n        # 执行部署脚本\n        /opt/deploy/production-deploy.sh $newrev\n        \n    elif [ \"$branch\" = \"develop\" ]; then\n        echo \"🧪 触发测试环境部署...\"\n        /opt/deploy/staging-deploy.sh $newrev\n    fi\n    \n    # 更新项目统计\n    echo \"📊 更新项目统计...\"\n    /opt/scripts/update-stats.sh $branch $newrev\n    \n    # 发送邮件通知\n    echo \"📧 发送通知邮件...\"\n    git log --pretty=format:\"%h %s (%an)\" $oldrev..$newrev | \\\n        mail -s \"[$branch] 新提交推送\" team@company.com\n        \ndone\n\necho \"✅ post-receive操作完成\"\nexit 0"
  },
  "huskySetup": {
    "title": "Husky安装与配置",
    "language": "bash",
    "code": "# 安装Husky\nnpm install --save-dev husky\n\n# 初始化Husky\nnpx husky install\n\n# 添加到package.json\nnpm pkg set scripts.prepare=\"husky install\"\n\n# 创建pre-commit hook\nnpx husky add .husky/pre-commit \"npm run lint && npm run test\"\n\n# 创建commit-msg hook\nnpx husky add .husky/commit-msg 'npx --no -- commitlint --edit \"$1\"'\n\n# package.json配置\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\",\n    \"lint\": \"eslint src --ext .js,.jsx,.ts,.tsx\",\n    \"lint:fix\": \"eslint src --ext .js,.jsx,.ts,.tsx --fix\",\n    \"format\": \"prettier --write src/**/*.{js,jsx,ts,tsx,json,css,md}\",\n    \"format:check\": \"prettier --check src/**/*.{js,jsx,ts,tsx,json,css,md}\",\n    \"test\": \"jest\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"devDependencies\": {\n    \"husky\": \"^8.0.0\",\n    \"@commitlint/cli\": \"^17.0.0\",\n    \"@commitlint/config-conventional\": \"^17.0.0\",\n    \"lint-staged\": \"^13.0.0\"\n  }\n}"
  },
  "lintStagedIntegration": {
    "title": "lint-staged集成",
    "language": "bash",
    "code": "# 安装lint-staged\nnpm install --save-dev lint-staged\n\n# .husky/pre-commit\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx lint-staged\n\n# package.json配置\n{\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n      \"eslint --fix\",\n      \"prettier --write\",\n      \"git add\"\n    ],\n    \"*.{json,css,md}\": [\n      \"prettier --write\",\n      \"git add\"\n    ],\n    \"*.{js,jsx,ts,tsx}\": [\n      \"npm run test -- --findRelatedTests --passWithNoTests\"\n    ]\n  }\n}\n\n# commitlint配置\n# commitlint.config.js\nmodule.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat',\n        'fix',\n        'docs',\n        'style',\n        'refactor',\n        'test',\n        'chore',\n        'perf',\n        'ci',\n        'build',\n        'revert'\n      ]\n    ],\n    'subject-max-length': [2, 'always', 50],\n    'body-max-line-length': [2, 'always', 72]\n  }\n}\n\n# 高级配置示例\n# .husky/pre-commit\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\necho \"🔍 运行pre-commit检查...\"\n\n# 检查分支名称\nbranch=$(git rev-parse --abbrev-ref HEAD)\nvalid_pattern=\"^(feature|bugfix|hotfix|release)\\/[a-z0-9-]+$\"\n\nif [[ \"$branch\" != \"main\" && \"$branch\" != \"develop\" && ! \"$branch\" =~ $valid_pattern ]]; then\n    echo \"❌ 分支名称不符合规范: $branch\"\n    echo \"正确格式: feature/xxx, bugfix/xxx, hotfix/xxx, release/xxx\"\n    exit 1\nfi\n\n# 运行lint-staged\nnpx lint-staged\n\necho \"✅ pre-commit检查完成\""
  }
}
