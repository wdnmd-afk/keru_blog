{
  "basicUsage": {
    "title": "useContext 基本用法",
    "language": "javascript",
    "code": "import React, { createContext, useContext, useState } from 'react';\n\n// 1. 创建 Context\nconst ThemeContext = createContext();\n\n// 2. 创建 Provider 组件\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  const [fontSize, setFontSize] = useState(16);\n  \n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  \n  const increaseFontSize = () => {\n    setFontSize(prevSize => Math.min(prevSize + 2, 24));\n  };\n  \n  const decreaseFontSize = () => {\n    setFontSize(prevSize => Math.max(prevSize - 2, 12));\n  };\n  \n  const value = {\n    theme,\n    fontSize,\n    toggleTheme,\n    increaseFontSize,\n    decreaseFontSize\n  };\n  \n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 3. 创建自定义 Hook\nconst useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// 4. 使用 Context 的组件\nconst Header = () => {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <header style={{\n      padding: '16px',\n      backgroundColor: theme === 'light' ? '#f5f5f5' : '#333',\n      color: theme === 'light' ? '#333' : '#f5f5f5',\n      borderBottom: `1px solid ${theme === 'light' ? '#ddd' : '#555'}`\n    }}>\n      <h2>我的应用</h2>\n      <button \n        onClick={toggleTheme}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: theme === 'light' ? '#2196F3' : '#ff9800',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        }}\n      >\n        切换到 {theme === 'light' ? '深色' : '浅色'} 主题\n      </button>\n    </header>\n  );\n};\n\nconst Content = () => {\n  const { theme, fontSize } = useTheme();\n  \n  return (\n    <main style={{\n      padding: '24px',\n      backgroundColor: theme === 'light' ? 'white' : '#222',\n      color: theme === 'light' ? '#333' : '#f5f5f5',\n      fontSize: `${fontSize}px`,\n      minHeight: '300px'\n    }}>\n      <h3>主要内容</h3>\n      <p>这是一个使用 useContext 的示例应用。</p>\n      <p>当前主题: <strong>{theme === 'light' ? '浅色' : '深色'}</strong></p>\n      <p>当前字体大小: <strong>{fontSize}px</strong></p>\n      \n      <NestedComponent />\n    </main>\n  );\n};\n\nconst NestedComponent = () => {\n  const { theme } = useTheme();\n  \n  return (\n    <div style={{\n      padding: '16px',\n      margin: '16px 0',\n      border: `2px solid ${theme === 'light' ? '#ddd' : '#555'}`,\n      borderRadius: '8px'\n    }}>\n      <h4>嵌套组件</h4>\n      <p>这个组件也可以直接访问 Context，无需通过 props 传递。</p>\n      <DeeplyNestedComponent />\n    </div>\n  );\n};\n\nconst DeeplyNestedComponent = () => {\n  const { fontSize, increaseFontSize, decreaseFontSize } = useTheme();\n  \n  return (\n    <div style={{\n      padding: '12px',\n      backgroundColor: 'rgba(0, 123, 255, 0.1)',\n      borderRadius: '4px'\n    }}>\n      <h5>深度嵌套组件</h5>\n      <p>即使在深度嵌套的组件中，也能轻松访问 Context。</p>\n      \n      <div style={{ marginTop: '12px' }}>\n        <button \n          onClick={decreaseFontSize}\n          disabled={fontSize <= 12}\n          style={{\n            padding: '6px 12px',\n            marginRight: '8px',\n            backgroundColor: fontSize <= 12 ? '#ccc' : '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: fontSize <= 12 ? 'not-allowed' : 'pointer'\n          }}\n        >\n          字体 -\n        </button>\n        \n        <button \n          onClick={increaseFontSize}\n          disabled={fontSize >= 24}\n          style={{\n            padding: '6px 12px',\n            backgroundColor: fontSize >= 24 ? '#ccc' : '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: fontSize >= 24 ? 'not-allowed' : 'pointer'\n          }}\n        >\n          字体 +\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// 5. 主应用组件\nconst BasicContextApp = () => {\n  return (\n    <ThemeProvider>\n      <div>\n        <h3>useContext 基本用法示例</h3>\n        <Header />\n        <Content />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default BasicContextApp;"
  },
  "multipleContexts": {
    "title": "多个 Context 的使用",
    "language": "javascript",
    "code": "import React, { createContext, useContext, useState, useReducer } from 'react';\n\n// 用户 Context\nconst UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const login = async (username, password) => {\n    setIsLoading(true);\n    // 模拟 API 调用\n    setTimeout(() => {\n      setUser({\n        id: 1,\n        username,\n        email: `${username}@example.com`,\n        avatar: '👤',\n        role: 'user'\n      });\n      setIsLoading(false);\n    }, 1000);\n  };\n  \n  const logout = () => {\n    setUser(null);\n  };\n  \n  return (\n    <UserContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nconst useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within UserProvider');\n  }\n  return context;\n};\n\n// 购物车 Context\nconst CartContext = createContext();\n\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (existingItem) {\n        return {\n          ...state,\n          items: state.items.map(item =>\n            item.id === action.payload.id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          )\n        };\n      }\n      return {\n        ...state,\n        items: [...state.items, { ...action.payload, quantity: 1 }]\n      };\n      \n    case 'REMOVE_ITEM':\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload.id)\n      };\n      \n    case 'UPDATE_QUANTITY':\n      return {\n        ...state,\n        items: state.items.map(item =>\n          item.id === action.payload.id\n            ? { ...item, quantity: Math.max(0, action.payload.quantity) }\n            : item\n        ).filter(item => item.quantity > 0)\n      };\n      \n    case 'CLEAR_CART':\n      return { ...state, items: [] };\n      \n    default:\n      return state;\n  }\n};\n\nconst CartProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(cartReducer, { items: [] });\n  \n  const addItem = (item) => {\n    dispatch({ type: 'ADD_ITEM', payload: item });\n  };\n  \n  const removeItem = (id) => {\n    dispatch({ type: 'REMOVE_ITEM', payload: { id } });\n  };\n  \n  const updateQuantity = (id, quantity) => {\n    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });\n  };\n  \n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' });\n  };\n  \n  const totalItems = state.items.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  \n  return (\n    <CartContext.Provider value={{\n      items: state.items,\n      totalItems,\n      totalPrice,\n      addItem,\n      removeItem,\n      updateQuantity,\n      clearCart\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nconst useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within CartProvider');\n  }\n  return context;\n};\n\n// 通知 Context\nconst NotificationContext = createContext();\n\nconst NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  \n  const addNotification = (message, type = 'info', duration = 3000) => {\n    const id = Date.now();\n    const notification = { id, message, type };\n    \n    setNotifications(prev => [...prev, notification]);\n    \n    if (duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, duration);\n    }\n  };\n  \n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  \n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nconst useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within NotificationProvider');\n  }\n  return context;\n};\n\n// 组合所有 Provider\nconst AppProviders = ({ children }) => {\n  return (\n    <UserProvider>\n      <CartProvider>\n        <NotificationProvider>\n          {children}\n        </NotificationProvider>\n      </CartProvider>\n    </UserProvider>\n  );\n};\n\n// 使用多个 Context 的组件\nconst UserInfo = () => {\n  const { user, isLoading, login, logout } = useUser();\n  const { addNotification } = useNotification();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  \n  const handleLogin = async (e) => {\n    e.preventDefault();\n    if (username && password) {\n      await login(username, password);\n      addNotification('登录成功！', 'success');\n    } else {\n      addNotification('请输入用户名和密码', 'error');\n    }\n  };\n  \n  const handleLogout = () => {\n    logout();\n    addNotification('已退出登录', 'info');\n  };\n  \n  if (isLoading) {\n    return <div style={{ padding: '16px' }}>登录中...</div>;\n  }\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>用户信息</h4>\n      {user ? (\n        <div>\n          <p>{user.avatar} {user.username}</p>\n          <p>📧 {user.email}</p>\n          <p>🏷️ {user.role}</p>\n          <button \n            onClick={handleLogout}\n            style={{ padding: '8px 16px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}\n          >\n            退出登录\n          </button>\n        </div>\n      ) : (\n        <form onSubmit={handleLogin}>\n          <div style={{ marginBottom: '8px' }}>\n            <input\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"用户名\"\n              style={{ padding: '8px', marginRight: '8px', border: '1px solid #ccc', borderRadius: '4px' }}\n            />\n          </div>\n          <div style={{ marginBottom: '8px' }}>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"密码\"\n              style={{ padding: '8px', marginRight: '8px', border: '1px solid #ccc', borderRadius: '4px' }}\n            />\n          </div>\n          <button \n            type=\"submit\"\n            style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}\n          >\n            登录\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nconst ProductList = () => {\n  const { addItem } = useCart();\n  const { addNotification } = useNotification();\n  \n  const products = [\n    { id: 1, name: 'iPhone 14', price: 5999, emoji: '📱' },\n    { id: 2, name: 'MacBook Pro', price: 12999, emoji: '💻' },\n    { id: 3, name: 'AirPods', price: 1299, emoji: '🎧' },\n    { id: 4, name: 'iPad', price: 3999, emoji: '📱' }\n  ];\n  \n  const handleAddToCart = (product) => {\n    addItem(product);\n    addNotification(`${product.name} 已添加到购物车`, 'success');\n  };\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>商品列表</h4>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px' }}>\n        {products.map(product => (\n          <div key={product.id} style={{ padding: '16px', border: '1px solid #eee', borderRadius: '8px', textAlign: 'center' }}>\n            <div style={{ fontSize: '48px', marginBottom: '8px' }}>{product.emoji}</div>\n            <h5>{product.name}</h5>\n            <p style={{ color: '#f44336', fontWeight: 'bold' }}>¥{product.price}</p>\n            <button\n              onClick={() => handleAddToCart(product)}\n              style={{\n                padding: '8px 16px',\n                backgroundColor: '#2196F3',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              加入购物车\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst ShoppingCart = () => {\n  const { items, totalItems, totalPrice, updateQuantity, removeItem, clearCart } = useCart();\n  const { addNotification } = useNotification();\n  \n  const handleClearCart = () => {\n    clearCart();\n    addNotification('购物车已清空', 'info');\n  };\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>购物车 ({totalItems} 件商品)</h4>\n      \n      {items.length === 0 ? (\n        <p>购物车为空</p>\n      ) : (\n        <>\n          <div style={{ marginBottom: '16px' }}>\n            {items.map(item => (\n              <div key={item.id} style={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                padding: '8px',\n                border: '1px solid #eee',\n                borderRadius: '4px',\n                marginBottom: '8px'\n              }}>\n                <div>\n                  <span>{item.emoji} {item.name}</span>\n                  <span style={{ color: '#666', marginLeft: '8px' }}>¥{item.price}</span>\n                </div>\n                \n                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                  <button\n                    onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                    style={{ padding: '4px 8px', border: '1px solid #ccc', borderRadius: '4px' }}\n                  >\n                    -\n                  </button>\n                  <span>{item.quantity}</span>\n                  <button\n                    onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                    style={{ padding: '4px 8px', border: '1px solid #ccc', borderRadius: '4px' }}\n                  >\n                    +\n                  </button>\n                  <button\n                    onClick={() => removeItem(item.id)}\n                    style={{ padding: '4px 8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}\n                  >\n                    删除\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div style={{ borderTop: '1px solid #eee', paddingTop: '16px' }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <strong>总计: ¥{totalPrice.toFixed(2)}</strong>\n              <div>\n                <button\n                  onClick={handleClearCart}\n                  style={{ padding: '8px 16px', backgroundColor: '#ff9800', color: 'white', border: 'none', borderRadius: '4px', marginRight: '8px' }}\n                >\n                  清空购物车\n                </button>\n                <button\n                  style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                  结算\n                </button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst NotificationList = () => {\n  const { notifications, removeNotification } = useNotification();\n  \n  if (notifications.length === 0) return null;\n  \n  return (\n    <div style={{ position: 'fixed', top: '16px', right: '16px', zIndex: 1000 }}>\n      {notifications.map(notification => (\n        <div\n          key={notification.id}\n          style={{\n            padding: '12px 16px',\n            marginBottom: '8px',\n            borderRadius: '4px',\n            backgroundColor: \n              notification.type === 'success' ? '#4CAF50' :\n              notification.type === 'error' ? '#f44336' :\n              notification.type === 'warning' ? '#ff9800' : '#2196F3',\n            color: 'white',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            minWidth: '300px',\n            boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\n          }}\n        >\n          <span>{notification.message}</span>\n          <button\n            onClick={() => removeNotification(notification.id)}\n            style={{\n              background: 'none',\n              border: 'none',\n              color: 'white',\n              cursor: 'pointer',\n              fontSize: '16px',\n              padding: '0 4px'\n            }}\n          >\n            ×\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// 主应用组件\nconst MultipleContextsApp = () => {\n  return (\n    <AppProviders>\n      <div>\n        <h3>多个 Context 使用示例</h3>\n        <UserInfo />\n        <ProductList />\n        <ShoppingCart />\n        <NotificationList />\n      </div>\n    </AppProviders>\n  );\n};\n\nexport default MultipleContextsApp;"
  },
  "performanceOptimization": {
    "title": "性能优化技巧",
    "language": "javascript",
    "code": "import React, { createContext, useContext, useState, useMemo, useCallback, memo } from 'react';\n\n// 1. 分离不同更新频率的 Context\n\n// 用户信息 Context (更新频率低)\nconst UserContext = createContext();\n\n// UI 状态 Context (更新频率高)\nconst UIContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState({\n    id: 1,\n    name: '张三',\n    email: 'zhangsan@example.com'\n  });\n  \n  // 使用 useMemo 缓存 context value\n  const value = useMemo(() => ({\n    user,\n    setUser\n  }), [user]);\n  \n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nconst UIProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [notifications, setNotifications] = useState([]);\n  \n  // 使用 useCallback 缓存函数\n  const toggleTheme = useCallback(() => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  }, []);\n  \n  const toggleSidebar = useCallback(() => {\n    setSidebarOpen(prev => !prev);\n  }, []);\n  \n  const addNotification = useCallback((message) => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, message }]);\n    \n    // 3秒后自动移除\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== id));\n    }, 3000);\n  }, []);\n  \n  // 分别缓存不同的 value 对象\n  const themeValue = useMemo(() => ({\n    theme,\n    toggleTheme\n  }), [theme, toggleTheme]);\n  \n  const sidebarValue = useMemo(() => ({\n    sidebarOpen,\n    toggleSidebar\n  }), [sidebarOpen, toggleSidebar]);\n  \n  const notificationValue = useMemo(() => ({\n    notifications,\n    addNotification\n  }), [notifications, addNotification]);\n  \n  const value = useMemo(() => ({\n    ...themeValue,\n    ...sidebarValue,\n    ...notificationValue\n  }), [themeValue, sidebarValue, notificationValue]);\n  \n  return (\n    <UIContext.Provider value={value}>\n      {children}\n    </UIContext.Provider>\n  );\n};\n\n// 2. 创建选择性订阅的 Hook\nconst useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within UserProvider');\n  }\n  return context;\n};\n\nconst useUI = () => {\n  const context = useContext(UIContext);\n  if (!context) {\n    throw new Error('useUI must be used within UIProvider');\n  }\n  return context;\n};\n\n// 只订阅主题的 Hook\nconst useTheme = () => {\n  const { theme, toggleTheme } = useUI();\n  return { theme, toggleTheme };\n};\n\n// 只订阅侧边栏的 Hook\nconst useSidebar = () => {\n  const { sidebarOpen, toggleSidebar } = useUI();\n  return { sidebarOpen, toggleSidebar };\n};\n\n// 只订阅通知的 Hook\nconst useNotifications = () => {\n  const { notifications, addNotification } = useUI();\n  return { notifications, addNotification };\n};\n\n// 3. 使用 memo 优化组件\nconst UserProfile = memo(() => {\n  const { user, setUser } = useUser();\n  console.log('UserProfile 渲染');\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>用户资料</h4>\n      <p>姓名: {user.name}</p>\n      <p>邮箱: {user.email}</p>\n      <button\n        onClick={() => setUser(prev => ({ ...prev, name: prev.name + '!' }))}\n        style={{ padding: '8px 16px', backgroundColor: '#2196F3', color: 'white', border: 'none', borderRadius: '4px' }}\n      >\n        修改姓名\n      </button>\n    </div>\n  );\n});\n\nconst ThemeToggle = memo(() => {\n  const { theme, toggleTheme } = useTheme();\n  console.log('ThemeToggle 渲染');\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>主题切换</h4>\n      <p>当前主题: {theme}</p>\n      <button\n        onClick={toggleTheme}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: theme === 'light' ? '#333' : '#fff',\n          color: theme === 'light' ? '#fff' : '#333',\n          border: 'none',\n          borderRadius: '4px'\n        }}\n      >\n        切换主题\n      </button>\n    </div>\n  );\n});\n\nconst SidebarToggle = memo(() => {\n  const { sidebarOpen, toggleSidebar } = useSidebar();\n  console.log('SidebarToggle 渲染');\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>侧边栏控制</h4>\n      <p>侧边栏状态: {sidebarOpen ? '打开' : '关闭'}</p>\n      <button\n        onClick={toggleSidebar}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px'\n        }}\n      >\n        {sidebarOpen ? '关闭' : '打开'} 侧边栏\n      </button>\n    </div>\n  );\n});\n\nconst NotificationPanel = memo(() => {\n  const { notifications, addNotification } = useNotifications();\n  console.log('NotificationPanel 渲染');\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>通知面板</h4>\n      <p>通知数量: {notifications.length}</p>\n      <button\n        onClick={() => addNotification(`通知 ${Date.now()}`)}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: '#ff9800',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px'\n        }}\n      >\n        添加通知\n      </button>\n      \n      <div style={{ marginTop: '12px' }}>\n        {notifications.map(notification => (\n          <div\n            key={notification.id}\n            style={{\n              padding: '8px',\n              margin: '4px 0',\n              backgroundColor: '#e3f2fd',\n              borderRadius: '4px'\n            }}\n          >\n            {notification.message}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\n// 4. 性能监控组件\nconst PerformanceMonitor = memo(() => {\n  const [renderCount, setRenderCount] = useState(0);\n  \n  React.useEffect(() => {\n    setRenderCount(prev => prev + 1);\n  });\n  \n  return (\n    <div style={{\n      position: 'fixed',\n      top: '16px',\n      right: '16px',\n      padding: '8px 12px',\n      backgroundColor: '#333',\n      color: 'white',\n      borderRadius: '4px',\n      fontSize: '12px',\n      zIndex: 1000\n    }}>\n      渲染次数: {renderCount}\n    </div>\n  );\n});\n\n// 5. 主应用组件\nconst PerformanceOptimizedApp = () => {\n  return (\n    <UserProvider>\n      <UIProvider>\n        <div>\n          <h3>Context 性能优化示例</h3>\n          <p>打开控制台查看组件渲染日志，注意各组件的渲染频率。</p>\n          \n          <UserProfile />\n          <ThemeToggle />\n          <SidebarToggle />\n          <NotificationPanel />\n          \n          <PerformanceMonitor />\n          \n          <div style={{\n            marginTop: '24px',\n            padding: '16px',\n            backgroundColor: '#f9f9f9',\n            borderRadius: '8px'\n          }}>\n            <h4>性能优化要点:</h4>\n            <ul>\n              <li>✅ 分离不同更新频率的 Context</li>\n              <li>✅ 使用 useMemo 缓存 Context value</li>\n              <li>✅ 使用 useCallback 缓存函数</li>\n              <li>✅ 使用 memo 包装组件</li>\n              <li>✅ 创建选择性订阅的 Hook</li>\n            </ul>\n          </div>\n        </div>\n      </UIProvider>\n    </UserProvider>\n  );\n};\n\nexport default PerformanceOptimizedApp;"
  },
  "commonMistakes": {
    "title": "常见错误和最佳实践",
    "language": "javascript",
    "code": "import React, { createContext, useContext, useState, useMemo } from 'react';\n\n// ❌ 错误1: 没有提供默认值\nconst BadContext1 = createContext(); // 没有默认值\n\n// ✅ 正确1: 提供有意义的默认值\nconst GoodContext1 = createContext({\n  user: null,\n  setUser: () => {},\n  isLoading: false\n});\n\n// ❌ 错误2: 在 Provider 外使用 Context\nconst BadComponent1 = () => {\n  // 这会导致错误，因为没有 Provider\n  const context = useContext(BadContext1);\n  return <div>{context?.user?.name}</div>;\n};\n\n// ✅ 正确2: 创建安全的 Hook\nconst useGoodContext1 = () => {\n  const context = useContext(GoodContext1);\n  if (context === undefined) {\n    throw new Error('useGoodContext1 must be used within GoodContext1Provider');\n  }\n  return context;\n};\n\n// ❌ 错误3: 每次渲染都创建新的 value 对象\nconst BadProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [theme, setTheme] = useState('light');\n  \n  // ❌ 每次渲染都会创建新对象，导致所有消费者重新渲染\n  return (\n    <BadContext1.Provider value={{ user, setUser, theme, setTheme }}>\n      {children}\n    </BadContext1.Provider>\n  );\n};\n\n// ✅ 正确3: 使用 useMemo 缓存 value\nconst GoodProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [theme, setTheme] = useState('light');\n  \n  // ✅ 缓存 value 对象\n  const value = useMemo(() => ({\n    user,\n    setUser,\n    theme,\n    setTheme\n  }), [user, theme]);\n  \n  return (\n    <GoodContext1.Provider value={value}>\n      {children}\n    </GoodContext1.Provider>\n  );\n};\n\n// ❌ 错误4: 将所有状态放在一个 Context 中\nconst BadGlobalContext = createContext();\n\nconst BadGlobalProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [theme, setTheme] = useState('light');\n  const [cart, setCart] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n  \n  // ❌ 任何一个状态改变都会导致所有消费者重新渲染\n  const value = useMemo(() => ({\n    user, setUser,\n    theme, setTheme,\n    cart, setCart,\n    notifications, setNotifications,\n    sidebarOpen, setSidebarOpen,\n    modalOpen, setModalOpen\n  }), [user, theme, cart, notifications, sidebarOpen, modalOpen]);\n  \n  return (\n    <BadGlobalContext.Provider value={value}>\n      {children}\n    </BadGlobalContext.Provider>\n  );\n};\n\n// ✅ 正确4: 按功能分离 Context\nconst UserContext = createContext();\nconst UIContext = createContext();\nconst CartContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  \n  const value = useMemo(() => ({\n    user,\n    setUser\n  }), [user]);\n  \n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nconst UIProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  \n  const value = useMemo(() => ({\n    theme,\n    setTheme,\n    sidebarOpen,\n    setSidebarOpen\n  }), [theme, sidebarOpen]);\n  \n  return (\n    <UIContext.Provider value={value}>\n      {children}\n    </UIContext.Provider>\n  );\n};\n\n// ❌ 错误5: 过度使用 Context\nconst OverusedContext = createContext();\n\nconst OverusedProvider = ({ children }) => {\n  const [simpleCounter, setSimpleCounter] = useState(0);\n  \n  // ❌ 对于简单的本地状态，不需要使用 Context\n  const value = useMemo(() => ({\n    simpleCounter,\n    setSimpleCounter\n  }), [simpleCounter]);\n  \n  return (\n    <OverusedContext.Provider value={value}>\n      {children}\n    </OverusedContext.Provider>\n  );\n};\n\n// ✅ 正确5: 只在需要跨多层组件共享状态时使用 Context\nconst SimpleCounterComponent = () => {\n  // ✅ 简单的本地状态直接使用 useState\n  const [counter, setCounter] = useState(0);\n  \n  return (\n    <div>\n      <p>计数: {counter}</p>\n      <button onClick={() => setCounter(c => c + 1)}>增加</button>\n    </div>\n  );\n};\n\n// ❌ 错误6: 在 Context 中存储函数而不缓存\nconst BadFunctionContext = createContext();\n\nconst BadFunctionProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  \n  // ❌ 每次渲染都创建新函数\n  const value = {\n    data,\n    addItem: (item) => setData(prev => [...prev, item]),\n    removeItem: (id) => setData(prev => prev.filter(item => item.id !== id))\n  };\n  \n  return (\n    <BadFunctionContext.Provider value={value}>\n      {children}\n    </BadFunctionContext.Provider>\n  );\n};\n\n// ✅ 正确6: 使用 useCallback 缓存函数\nconst GoodFunctionContext = createContext();\n\nconst GoodFunctionProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  \n  // ✅ 缓存函数\n  const addItem = React.useCallback((item) => {\n    setData(prev => [...prev, item]);\n  }, []);\n  \n  const removeItem = React.useCallback((id) => {\n    setData(prev => prev.filter(item => item.id !== id));\n  }, []);\n  \n  const value = useMemo(() => ({\n    data,\n    addItem,\n    removeItem\n  }), [data, addItem, removeItem]);\n  \n  return (\n    <GoodFunctionContext.Provider value={value}>\n      {children}\n    </GoodFunctionContext.Provider>\n  );\n};\n\n// 示例组件展示最佳实践\nconst BestPracticesDemo = () => {\n  return (\n    <div>\n      <h3>Context 最佳实践示例</h3>\n      \n      <div style={{ marginBottom: '24px' }}>\n        <h4>✅ 正确的做法:</h4>\n        <ul>\n          <li>为 Context 提供默认值</li>\n          <li>创建自定义 Hook 并进行错误检查</li>\n          <li>使用 useMemo 缓存 Context value</li>\n          <li>使用 useCallback 缓存函数</li>\n          <li>按功能分离不同的 Context</li>\n          <li>只在需要跨组件共享状态时使用 Context</li>\n        </ul>\n      </div>\n      \n      <div style={{ marginBottom: '24px' }}>\n        <h4>❌ 常见错误:</h4>\n        <ul>\n          <li>不提供 Context 默认值</li>\n          <li>在 Provider 外使用 Context</li>\n          <li>每次渲染创建新的 value 对象</li>\n          <li>将所有状态放在一个 Context 中</li>\n          <li>过度使用 Context</li>\n          <li>不缓存 Context 中的函数</li>\n        </ul>\n      </div>\n      \n      <div style={{\n        padding: '16px',\n        backgroundColor: '#e8f5e8',\n        borderRadius: '8px',\n        border: '1px solid #4CAF50'\n      }}>\n        <h4>💡 性能优化提示:</h4>\n        <p>1. 将频繁更新的状态和不常更新的状态分离到不同的 Context</p>\n        <p>2. 使用 React.memo 包装消费 Context 的组件</p>\n        <p>3. 考虑使用状态管理库（如 Redux、Zustand）处理复杂的全局状态</p>\n        <p>4. 避免在 Context 中存储大量数据</p>\n      </div>\n      \n      <SimpleCounterComponent />\n    </div>\n  );\n};\n\nexport default BestPracticesDemo;"
  }
}
