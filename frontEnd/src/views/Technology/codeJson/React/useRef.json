{
  "basicUsage": {
    "title": "useRef 基本用法",
    "language": "javascript",
    "code": "import React, { useRef, useState, useEffect } from 'react';\n\nconst BasicRefExample = () => {\n  const inputRef = useRef(null);\n  const countRef = useRef(0);\n  const [renderCount, setRenderCount] = useState(0);\n\n  // 聚焦输入框\n  const focusInput = () => {\n    inputRef.current?.focus();\n  };\n\n  // 清空输入框\n  const clearInput = () => {\n    if (inputRef.current) {\n      inputRef.current.value = '';\n      inputRef.current.focus();\n    }\n  };\n\n  // 获取输入框的值\n  const getInputValue = () => {\n    if (inputRef.current) {\n      alert(`输入框的值: ${inputRef.current.value}`);\n    }\n  };\n\n  // 增加计数（不会触发重新渲染）\n  const incrementCount = () => {\n    countRef.current += 1;\n    console.log('countRef.current:', countRef.current);\n  };\n\n  // 强制重新渲染来查看 countRef 的值\n  const forceRender = () => {\n    setRenderCount(prev => prev + 1);\n  };\n\n  useEffect(() => {\n    // 组件挂载时自动聚焦\n    inputRef.current?.focus();\n  }, []);\n\n  return (\n    <div>\n      <h3>useRef 基本用法</h3>\n      \n      <div style={{ marginBottom: '16px' }}>\n        <input \n          ref={inputRef}\n          type=\"text\" \n          placeholder=\"输入一些文字...\"\n          style={{ marginRight: '8px', padding: '4px' }}\n        />\n        <button onClick={focusInput}>聚焦</button>\n        <button onClick={clearInput}>清空</button>\n        <button onClick={getInputValue}>获取值</button>\n      </div>\n      \n      <div>\n        <p>countRef 当前值: {countRef.current}</p>\n        <p>组件渲染次数: {renderCount}</p>\n        <button onClick={incrementCount}>增加 countRef (不重新渲染)</button>\n        <button onClick={forceRender}>强制重新渲染</button>\n      </div>\n      \n      <div style={{ marginTop: '16px', padding: '8px', background: '#f0f0f0' }}>\n        <small>\n          注意: countRef.current 的改变不会触发组件重新渲染，\n          但值会在重新渲染时保持不变。\n        </small>\n      </div>\n    </div>\n  );\n};"
  },
  "domManipulation": {
    "title": "DOM 操作和测量",
    "language": "javascript",
    "code": "import React, { useRef, useState, useLayoutEffect } from 'react';\n\nconst DOMManipulationExample = () => {\n  const boxRef = useRef(null);\n  const scrollContainerRef = useRef(null);\n  const [boxInfo, setBoxInfo] = useState({});\n  const [scrollInfo, setScrollInfo] = useState({ top: 0, left: 0 });\n\n  // 测量元素尺寸和位置\n  const measureBox = () => {\n    if (boxRef.current) {\n      const rect = boxRef.current.getBoundingClientRect();\n      const computedStyle = window.getComputedStyle(boxRef.current);\n      \n      setBoxInfo({\n        width: rect.width,\n        height: rect.height,\n        top: rect.top,\n        left: rect.left,\n        backgroundColor: computedStyle.backgroundColor,\n        padding: computedStyle.padding\n      });\n    }\n  };\n\n  // 滚动到指定位置\n  const scrollToPosition = (top, left) => {\n    if (scrollContainerRef.current) {\n      scrollContainerRef.current.scrollTo({\n        top,\n        left,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // 滚动到顶部\n  const scrollToTop = () => scrollToPosition(0, 0);\n  \n  // 滚动到底部\n  const scrollToBottom = () => {\n    if (scrollContainerRef.current) {\n      const { scrollHeight } = scrollContainerRef.current;\n      scrollToPosition(scrollHeight, 0);\n    }\n  };\n\n  // 监听滚动事件\n  const handleScroll = () => {\n    if (scrollContainerRef.current) {\n      const { scrollTop, scrollLeft } = scrollContainerRef.current;\n      setScrollInfo({ top: scrollTop, left: scrollLeft });\n    }\n  };\n\n  // 改变盒子样式\n  const changeBoxStyle = () => {\n    if (boxRef.current) {\n      const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      boxRef.current.style.backgroundColor = randomColor;\n      boxRef.current.style.transform = `rotate(${Math.random() * 360}deg)`;\n      boxRef.current.style.transition = 'all 0.3s ease';\n    }\n  };\n\n  // 重置盒子样式\n  const resetBoxStyle = () => {\n    if (boxRef.current) {\n      boxRef.current.style.backgroundColor = '#ddd';\n      boxRef.current.style.transform = 'rotate(0deg)';\n    }\n  };\n\n  // 使用 useLayoutEffect 在 DOM 更新后同步测量\n  useLayoutEffect(() => {\n    measureBox();\n  });\n\n  return (\n    <div>\n      <h3>DOM 操作和测量</h3>\n      \n      {/* 控制按钮 */}\n      <div style={{ marginBottom: '16px' }}>\n        <button onClick={measureBox}>测量盒子</button>\n        <button onClick={changeBoxStyle}>改变样式</button>\n        <button onClick={resetBoxStyle}>重置样式</button>\n      </div>\n      \n      {/* 盒子信息 */}\n      <div style={{ marginBottom: '16px', padding: '8px', background: '#f9f9f9' }}>\n        <h4>盒子信息:</h4>\n        <p>宽度: {boxInfo.width?.toFixed(2)}px</p>\n        <p>高度: {boxInfo.height?.toFixed(2)}px</p>\n        <p>位置: ({boxInfo.left?.toFixed(2)}, {boxInfo.top?.toFixed(2)})</p>\n        <p>背景色: {boxInfo.backgroundColor}</p>\n      </div>\n      \n      {/* 可测量的盒子 */}\n      <div \n        ref={boxRef}\n        style={{\n          width: '200px',\n          height: '100px',\n          backgroundColor: '#ddd',\n          border: '2px solid #333',\n          padding: '16px',\n          margin: '16px 0',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer'\n        }}\n        onClick={changeBoxStyle}\n      >\n        点击我改变样式\n      </div>\n      \n      {/* 滚动容器 */}\n      <div>\n        <h4>滚动控制:</h4>\n        <div style={{ marginBottom: '8px' }}>\n          <button onClick={scrollToTop}>滚动到顶部</button>\n          <button onClick={scrollToBottom}>滚动到底部</button>\n          <span style={{ marginLeft: '16px' }}>\n            滚动位置: ({scrollInfo.left}, {scrollInfo.top})\n          </span>\n        </div>\n        \n        <div \n          ref={scrollContainerRef}\n          onScroll={handleScroll}\n          style={{\n            width: '100%',\n            height: '200px',\n            border: '1px solid #ccc',\n            overflow: 'auto',\n            padding: '16px'\n          }}\n        >\n          <div style={{ height: '800px', background: 'linear-gradient(to bottom, #ff6b6b, #4ecdc4)' }}>\n            <p>这是一个可滚动的容器</p>\n            <p>内容高度: 800px</p>\n            <p>容器高度: 200px</p>\n            <p>滚动查看更多内容...</p>\n            \n            {Array.from({ length: 20 }, (_, i) => (\n              <p key={i}>第 {i + 1} 行内容</p>\n            ))}\n            \n            <p style={{ marginTop: '100px' }}>底部内容</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};"
  },
  "previousValue": {
    "title": "保存前一个值",
    "language": "javascript",
    "code": "import React, { useState, useRef, useEffect } from 'react';\n\n// 自定义Hook：保存前一个值\nconst usePrevious = (value) => {\n  const ref = useRef();\n  \n  useEffect(() => {\n    ref.current = value;\n  });\n  \n  return ref.current;\n};\n\n// 自定义Hook：比较前后值的变化\nconst useValueChange = (value) => {\n  const previousValue = usePrevious(value);\n  const [changes, setChanges] = useState([]);\n  \n  useEffect(() => {\n    if (previousValue !== undefined && previousValue !== value) {\n      const change = {\n        from: previousValue,\n        to: value,\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setChanges(prev => [change, ...prev.slice(0, 9)]); // 保留最近10次变化\n    }\n  }, [value, previousValue]);\n  \n  return { previousValue, changes };\n};\n\nconst PreviousValueExample = () => {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('');\n  const [color, setColor] = useState('#ff6b6b');\n  \n  // 使用自定义Hook跟踪值的变化\n  const countChange = useValueChange(count);\n  const nameChange = useValueChange(name);\n  const colorChange = useValueChange(color);\n  \n  // 手动使用 useRef 跟踪渲染次数\n  const renderCount = useRef(0);\n  renderCount.current += 1;\n  \n  // 跟踪组件挂载时间\n  const mountTime = useRef(Date.now());\n  const [currentTime, setCurrentTime] = useState(Date.now());\n  \n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(Date.now());\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, []);\n  \n  const uptime = Math.floor((currentTime - mountTime.current) / 1000);\n  \n  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#fd79a8'];\n  \n  return (\n    <div>\n      <h3>保存前一个值</h3>\n      \n      {/* 组件统计信息 */}\n      <div style={{ \n        padding: '16px', \n        background: '#f0f0f0', \n        marginBottom: '16px',\n        borderRadius: '8px'\n      }}>\n        <h4>组件统计</h4>\n        <p>渲染次数: {renderCount.current}</p>\n        <p>运行时间: {uptime} 秒</p>\n      </div>\n      \n      {/* 计数器 */}\n      <div style={{ marginBottom: '24px' }}>\n        <h4>计数器</h4>\n        <p>当前值: {count}</p>\n        <p>前一个值: {countChange.previousValue ?? '无'}</p>\n        <div>\n          <button onClick={() => setCount(count + 1)}>+1</button>\n          <button onClick={() => setCount(count - 1)}>-1</button>\n          <button onClick={() => setCount(count * 2)}>×2</button>\n          <button onClick={() => setCount(0)}>重置</button>\n        </div>\n        \n        {countChange.changes.length > 0 && (\n          <div style={{ marginTop: '8px' }}>\n            <h5>变化历史:</h5>\n            <ul style={{ maxHeight: '100px', overflow: 'auto' }}>\n              {countChange.changes.map((change, index) => (\n                <li key={index}>\n                  {change.timestamp}: {change.from} → {change.to}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      \n      {/* 姓名输入 */}\n      <div style={{ marginBottom: '24px' }}>\n        <h4>姓名</h4>\n        <input \n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"输入姓名...\"\n          style={{ padding: '4px', marginRight: '8px' }}\n        />\n        <p>当前值: \"{name}\"</p>\n        <p>前一个值: \"{nameChange.previousValue ?? ''}\"</p>\n        \n        {nameChange.changes.length > 0 && (\n          <div style={{ marginTop: '8px' }}>\n            <h5>变化历史:</h5>\n            <ul style={{ maxHeight: '100px', overflow: 'auto' }}>\n              {nameChange.changes.map((change, index) => (\n                <li key={index}>\n                  {change.timestamp}: \"{change.from}\" → \"{change.to}\"\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n      \n      {/* 颜色选择 */}\n      <div style={{ marginBottom: '24px' }}>\n        <h4>颜色选择</h4>\n        <div style={{ marginBottom: '8px' }}>\n          {colors.map(c => (\n            <button\n              key={c}\n              onClick={() => setColor(c)}\n              style={{\n                backgroundColor: c,\n                width: '30px',\n                height: '30px',\n                border: color === c ? '3px solid #333' : '1px solid #ccc',\n                margin: '2px',\n                cursor: 'pointer'\n              }}\n            />\n          ))}\n        </div>\n        \n        <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>\n          <div>\n            <p>当前颜色:</p>\n            <div style={{\n              width: '50px',\n              height: '50px',\n              backgroundColor: color,\n              border: '1px solid #ccc'\n            }} />\n            <p>{color}</p>\n          </div>\n          \n          {colorChange.previousValue && (\n            <div>\n              <p>前一个颜色:</p>\n              <div style={{\n                width: '50px',\n                height: '50px',\n                backgroundColor: colorChange.previousValue,\n                border: '1px solid #ccc'\n              }} />\n              <p>{colorChange.previousValue}</p>\n            </div>\n          )}\n        </div>\n        \n        {colorChange.changes.length > 0 && (\n          <div style={{ marginTop: '8px' }}>\n            <h5>颜色变化历史:</h5>\n            <div style={{ maxHeight: '100px', overflow: 'auto' }}>\n              {colorChange.changes.map((change, index) => (\n                <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>\n                  <span>{change.timestamp}:</span>\n                  <div style={{\n                    width: '20px',\n                    height: '20px',\n                    backgroundColor: change.from,\n                    border: '1px solid #ccc'\n                  }} />\n                  <span>→</span>\n                  <div style={{\n                    width: '20px',\n                    height: '20px',\n                    backgroundColor: change.to,\n                    border: '1px solid #ccc'\n                  }} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};"
  },
  "timerAndInterval": {
    "title": "定时器和间隔器",
    "language": "javascript",
    "code": "import React, { useState, useRef, useEffect, useCallback } from 'react';\n\nconst TimerExample = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [laps, setLaps] = useState([]);\n  \n  // 使用 useRef 存储定时器 ID\n  const intervalRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const pausedTimeRef = useRef(0);\n  \n  // 启动定时器\n  const startTimer = useCallback(() => {\n    if (!isRunning) {\n      startTimeRef.current = Date.now() - pausedTimeRef.current;\n      \n      intervalRef.current = setInterval(() => {\n        const elapsed = Date.now() - startTimeRef.current;\n        setSeconds(Math.floor(elapsed / 1000));\n      }, 100); // 更高精度的更新\n      \n      setIsRunning(true);\n    }\n  }, [isRunning]);\n  \n  // 暂停定时器\n  const pauseTimer = useCallback(() => {\n    if (isRunning && intervalRef.current) {\n      clearInterval(intervalRef.current);\n      pausedTimeRef.current = Date.now() - startTimeRef.current;\n      setIsRunning(false);\n    }\n  }, [isRunning]);\n  \n  // 重置定时器\n  const resetTimer = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    setSeconds(0);\n    setIsRunning(false);\n    setLaps([]);\n    pausedTimeRef.current = 0;\n  }, []);\n  \n  // 记录圈数\n  const recordLap = useCallback(() => {\n    if (isRunning) {\n      const lapTime = seconds;\n      const lapNumber = laps.length + 1;\n      setLaps(prev => [...prev, { number: lapNumber, time: lapTime }]);\n    }\n  }, [isRunning, seconds, laps.length]);\n  \n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  \n  // 格式化时间显示\n  const formatTime = (totalSeconds) => {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const secs = totalSeconds % 60;\n    \n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  return (\n    <div>\n      <h3>秒表应用</h3>\n      \n      {/* 时间显示 */}\n      <div style={{\n        fontSize: '48px',\n        fontFamily: 'monospace',\n        textAlign: 'center',\n        padding: '32px',\n        background: '#f0f0f0',\n        borderRadius: '8px',\n        marginBottom: '16px'\n      }}>\n        {formatTime(seconds)}\n      </div>\n      \n      {/* 控制按钮 */}\n      <div style={{ textAlign: 'center', marginBottom: '24px' }}>\n        {!isRunning ? (\n          <button \n            onClick={startTimer}\n            style={{\n              padding: '12px 24px',\n              fontSize: '16px',\n              backgroundColor: '#4CAF50',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              marginRight: '8px',\n              cursor: 'pointer'\n            }}\n          >\n            {seconds === 0 ? '开始' : '继续'}\n          </button>\n        ) : (\n          <button \n            onClick={pauseTimer}\n            style={{\n              padding: '12px 24px',\n              fontSize: '16px',\n              backgroundColor: '#ff9800',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              marginRight: '8px',\n              cursor: 'pointer'\n            }}\n          >\n            暂停\n          </button>\n        )}\n        \n        <button \n          onClick={resetTimer}\n          style={{\n            padding: '12px 24px',\n            fontSize: '16px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            marginRight: '8px',\n            cursor: 'pointer'\n          }}\n        >\n          重置\n        </button>\n        \n        <button \n          onClick={recordLap}\n          disabled={!isRunning}\n          style={{\n            padding: '12px 24px',\n            fontSize: '16px',\n            backgroundColor: isRunning ? '#2196F3' : '#ccc',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isRunning ? 'pointer' : 'not-allowed'\n          }}\n        >\n          记录圈数\n        </button>\n      </div>\n      \n      {/* 圈数记录 */}\n      {laps.length > 0 && (\n        <div>\n          <h4>圈数记录</h4>\n          <div style={{\n            maxHeight: '200px',\n            overflow: 'auto',\n            border: '1px solid #ccc',\n            borderRadius: '4px'\n          }}>\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr style={{ backgroundColor: '#f5f5f5' }}>\n                  <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>圈数</th>\n                  <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>时间</th>\n                  <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>间隔</th>\n                </tr>\n              </thead>\n              <tbody>\n                {laps.map((lap, index) => {\n                  const intervalTime = index === 0 ? lap.time : lap.time - laps[index - 1].time;\n                  return (\n                    <tr key={lap.number}>\n                      <td style={{ padding: '8px', borderBottom: '1px solid #eee' }}>第 {lap.number} 圈</td>\n                      <td style={{ padding: '8px', borderBottom: '1px solid #eee', fontFamily: 'monospace' }}>\n                        {formatTime(lap.time)}\n                      </td>\n                      <td style={{ padding: '8px', borderBottom: '1px solid #eee', fontFamily: 'monospace' }}>\n                        {formatTime(intervalTime)}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 倒计时组件\nconst CountdownTimer = () => {\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [inputMinutes, setInputMinutes] = useState(5);\n  const [isActive, setIsActive] = useState(false);\n  const intervalRef = useRef(null);\n  \n  const startCountdown = () => {\n    const totalSeconds = inputMinutes * 60;\n    setTimeLeft(totalSeconds);\n    setIsActive(true);\n    \n    intervalRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          setIsActive(false);\n          alert('时间到！');\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  \n  const stopCountdown = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    setIsActive(false);\n  };\n  \n  const resetCountdown = () => {\n    stopCountdown();\n    setTimeLeft(0);\n  };\n  \n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  \n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  const progress = inputMinutes > 0 ? ((inputMinutes * 60 - timeLeft) / (inputMinutes * 60)) * 100 : 0;\n  \n  return (\n    <div style={{ marginTop: '32px' }}>\n      <h3>倒计时器</h3>\n      \n      <div style={{ marginBottom: '16px' }}>\n        <label>\n          设置时间 (分钟): \n          <input \n            type=\"number\"\n            value={inputMinutes}\n            onChange={(e) => setInputMinutes(Math.max(1, parseInt(e.target.value) || 1))}\n            disabled={isActive}\n            style={{ marginLeft: '8px', padding: '4px', width: '60px' }}\n          />\n        </label>\n      </div>\n      \n      <div style={{\n        fontSize: '36px',\n        fontFamily: 'monospace',\n        textAlign: 'center',\n        padding: '24px',\n        background: timeLeft <= 10 && timeLeft > 0 ? '#ffebee' : '#f0f0f0',\n        borderRadius: '8px',\n        marginBottom: '16px',\n        color: timeLeft <= 10 && timeLeft > 0 ? '#d32f2f' : 'inherit'\n      }}>\n        {formatTime(timeLeft)}\n      </div>\n      \n      {/* 进度条 */}\n      <div style={{\n        width: '100%',\n        height: '8px',\n        backgroundColor: '#e0e0e0',\n        borderRadius: '4px',\n        marginBottom: '16px',\n        overflow: 'hidden'\n      }}>\n        <div style={{\n          width: `${progress}%`,\n          height: '100%',\n          backgroundColor: timeLeft <= 10 && timeLeft > 0 ? '#f44336' : '#4CAF50',\n          transition: 'width 1s linear'\n        }} />\n      </div>\n      \n      <div style={{ textAlign: 'center' }}>\n        {!isActive ? (\n          <button onClick={startCountdown} disabled={timeLeft > 0}>\n            开始倒计时\n          </button>\n        ) : (\n          <button onClick={stopCountdown}>\n            停止\n          </button>\n        )}\n        <button onClick={resetCountdown} style={{ marginLeft: '8px' }}>\n          重置\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// 组合组件\nconst TimerAndIntervalExample = () => {\n  return (\n    <div>\n      <TimerExample />\n      <CountdownTimer />\n    </div>\n  );\n};\n\nexport default TimerAndIntervalExample;"
  }
}
