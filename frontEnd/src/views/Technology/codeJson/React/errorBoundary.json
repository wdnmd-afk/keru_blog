{
  "basicUsage": {
    "title": "ErrorBoundary 基本用法",
    "language": "javascript",
    "code": "import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染能够显示降级后的 UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // 你同样可以将错误日志上报给服务器\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n    \n    // 可以将错误上报到错误监控服务\n    // logErrorToService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以自定义降级后的 UI 并渲染\n      return (\n        <div style={{ padding: '20px', border: '1px solid #ff6b6b', borderRadius: '8px', backgroundColor: '#ffe0e0' }}>\n          <h2>😵 出错了!</h2>\n          <p>很抱歉，应用遇到了一个错误。</p>\n          <details style={{ whiteSpace: 'pre-wrap', marginTop: '10px' }}>\n            <summary>错误详情 (点击查看)</summary>\n            <p><strong>错误:</strong> {this.state.error && this.state.error.toString()}</p>\n            <p><strong>错误堆栈:</strong></p>\n            <pre>{this.state.errorInfo.componentStack}</pre>\n          </details>\n          <button \n            onClick={() => window.location.reload()}\n            style={{ marginTop: '10px', padding: '8px 16px', backgroundColor: '#ff6b6b', color: 'white', border: 'none', borderRadius: '4px' }}\n          >\n            刷新页面\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// 使用示例\nconst App = () => {\n  return (\n    <ErrorBoundary>\n      <Header />\n      <MainContent />\n      <Footer />\n    </ErrorBoundary>\n  );\n};\n\n// 可能出错的组件\nconst ProblematicComponent = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('这是一个测试错误!');\n  }\n  \n  return <div>一切正常!</div>;\n};\n\nexport default ErrorBoundary;"
  },
  "hookVersion": {
    "title": "使用Hook实现ErrorBoundary",
    "language": "javascript",
    "code": "import React, { useState, useEffect } from 'react';\n\n// 自定义Hook用于错误处理\nconst useErrorHandler = () => {\n  const [error, setError] = useState(null);\n  \n  const resetError = () => setError(null);\n  \n  const captureError = (error, errorInfo) => {\n    setError({ error, errorInfo });\n    console.error('Error captured:', error, errorInfo);\n  };\n  \n  return { error, resetError, captureError };\n};\n\n// 函数式ErrorBoundary组件\nconst FunctionalErrorBoundary = ({ children, fallback }) => {\n  const { error, resetError, captureError } = useErrorHandler();\n  \n  useEffect(() => {\n    const handleError = (event) => {\n      captureError(event.error, { componentStack: event.error.stack });\n    };\n    \n    const handleUnhandledRejection = (event) => {\n      captureError(event.reason, { componentStack: 'Promise rejection' });\n    };\n    \n    window.addEventListener('error', handleError);\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n    \n    return () => {\n      window.removeEventListener('error', handleError);\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n    };\n  }, [captureError]);\n  \n  if (error) {\n    return fallback ? fallback(error, resetError) : (\n      <div style={{ padding: '20px', border: '1px solid #ff6b6b', borderRadius: '8px', backgroundColor: '#ffe0e0' }}>\n        <h2>🚨 应用出错了</h2>\n        <p>错误信息: {error.error?.message}</p>\n        <button \n          onClick={resetError}\n          style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          重试\n        </button>\n      </div>\n    );\n  }\n  \n  return children;\n};\n\n// 使用示例\nconst AppWithHookErrorBoundary = () => {\n  return (\n    <FunctionalErrorBoundary\n      fallback={(error, resetError) => (\n        <div style={{ textAlign: 'center', padding: '40px' }}>\n          <h1>😵 哎呀，出错了!</h1>\n          <p>错误: {error.error?.message}</p>\n          <button onClick={resetError}>重新尝试</button>\n        </div>\n      )}\n    >\n      <MyApp />\n    </FunctionalErrorBoundary>\n  );\n};\n\n// 错误边界Hook\nconst useErrorBoundary = () => {\n  const [error, setError] = useState(null);\n  \n  const captureError = useCallback((error) => {\n    setError(error);\n  }, []);\n  \n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n  \n  useEffect(() => {\n    if (error) {\n      throw error;\n    }\n  }, [error]);\n  \n  return { captureError, resetError };\n};\n\n// 在组件中使用\nconst MyComponent = () => {\n  const { captureError } = useErrorBoundary();\n  \n  const handleAsyncError = async () => {\n    try {\n      await someAsyncOperation();\n    } catch (error) {\n      captureError(error);\n    }\n  };\n  \n  return (\n    <button onClick={handleAsyncError}>\n      执行可能出错的操作\n    </button>\n  );\n};\n\nconst someAsyncOperation = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('异步操作失败'));\n    }, 1000);\n  });\n};\n\nconst MyApp = () => {\n  return (\n    <div>\n      <h1>我的应用</h1>\n      <MyComponent />\n    </div>\n  );\n};\n\nexport { FunctionalErrorBoundary, useErrorBoundary };"
  },
  "advancedFeatures": {
    "title": "高级特性和最佳实践",
    "language": "javascript",
    "code": "import React, { Component } from 'react';\n\n// 高级ErrorBoundary with 错误上报\nclass AdvancedErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      eventId: null\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // 错误上报到监控服务\n    const eventId = this.logErrorToService(error, errorInfo);\n    \n    this.setState({\n      error,\n      errorInfo,\n      eventId\n    });\n  }\n\n  logErrorToService = (error, errorInfo) => {\n    // 模拟错误上报服务\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: this.props.userId || 'anonymous'\n    };\n    \n    console.log('上报错误到服务:', errorData);\n    \n    // 实际项目中可能是这样:\n    // return Sentry.captureException(error, { contexts: { react: errorInfo } });\n    // 或者:\n    // return fetch('/api/errors', {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(errorData)\n    // });\n    \n    return `error-${Date.now()}`;\n  };\n\n  handleRetry = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      eventId: null\n    });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const { fallback: Fallback } = this.props;\n      \n      if (Fallback) {\n        return (\n          <Fallback \n            error={this.state.error}\n            errorInfo={this.state.errorInfo}\n            eventId={this.state.eventId}\n            onRetry={this.handleRetry}\n          />\n        );\n      }\n      \n      return (\n        <div className=\"error-boundary\">\n          <div className=\"error-content\">\n            <h1>🚨 应用遇到错误</h1>\n            <p>很抱歉，应用遇到了一个意外错误。</p>\n            \n            {this.state.eventId && (\n              <p>错误ID: <code>{this.state.eventId}</code></p>\n            )}\n            \n            <div className=\"error-actions\">\n              <button onClick={this.handleRetry} className=\"retry-btn\">\n                重试\n              </button>\n              <button \n                onClick={() => window.location.reload()} \n                className=\"reload-btn\"\n              >\n                刷新页面\n              </button>\n            </div>\n            \n            {process.env.NODE_ENV === 'development' && (\n              <details className=\"error-details\">\n                <summary>开发者信息</summary>\n                <pre>{this.state.error?.stack}</pre>\n                <pre>{this.state.errorInfo?.componentStack}</pre>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// 自定义错误页面组件\nconst CustomErrorFallback = ({ error, errorInfo, eventId, onRetry }) => {\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '400px',\n      padding: '20px',\n      textAlign: 'center'\n    }}>\n      <div style={{ fontSize: '64px', marginBottom: '20px' }}>😵</div>\n      <h1>出了点问题</h1>\n      <p>我们已经记录了这个错误，正在努力修复。</p>\n      \n      {eventId && (\n        <p style={{ color: '#666', fontSize: '14px' }}>\n          错误追踪ID: {eventId}\n        </p>\n      )}\n      \n      <div style={{ marginTop: '20px' }}>\n        <button \n          onClick={onRetry}\n          style={{\n            padding: '10px 20px',\n            marginRight: '10px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          重试\n        </button>\n        <button \n          onClick={() => window.location.href = '/'}\n          style={{\n            padding: '10px 20px',\n            backgroundColor: '#2196F3',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          返回首页\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// 多层错误边界\nconst AppWithMultipleErrorBoundaries = () => {\n  return (\n    <AdvancedErrorBoundary fallback={CustomErrorFallback}>\n      <Header />\n      \n      <AdvancedErrorBoundary fallback={({ error, onRetry }) => (\n        <div style={{ padding: '20px', backgroundColor: '#fff3cd', border: '1px solid #ffeaa7' }}>\n          <p>侧边栏加载失败: {error.message}</p>\n          <button onClick={onRetry}>重新加载侧边栏</button>\n        </div>\n      )}>\n        <Sidebar />\n      </AdvancedErrorBoundary>\n      \n      <AdvancedErrorBoundary fallback={({ error, onRetry }) => (\n        <div style={{ padding: '20px', backgroundColor: '#f8d7da', border: '1px solid #f5c6cb' }}>\n          <p>主要内容加载失败: {error.message}</p>\n          <button onClick={onRetry}>重新加载内容</button>\n        </div>\n      )}>\n        <MainContent />\n      </AdvancedErrorBoundary>\n      \n      <Footer />\n    </AdvancedErrorBoundary>\n  );\n};\n\n// 错误边界HOC\nconst withErrorBoundary = (Component, fallback) => {\n  return function WrappedComponent(props) {\n    return (\n      <AdvancedErrorBoundary fallback={fallback}>\n        <Component {...props} />\n      </AdvancedErrorBoundary>\n    );\n  };\n};\n\n// 使用HOC\nconst SafeComponent = withErrorBoundary(MyComponent, ({ error, onRetry }) => (\n  <div>\n    <p>组件加载失败: {error.message}</p>\n    <button onClick={onRetry}>重试</button>\n  </div>\n));\n\n// 模拟组件\nconst Header = () => <header>Header</header>;\nconst Sidebar = () => <aside>Sidebar</aside>;\nconst MainContent = () => <main>Main Content</main>;\nconst Footer = () => <footer>Footer</footer>;\nconst MyComponent = () => <div>My Component</div>;\n\nexport { AdvancedErrorBoundary, CustomErrorFallback, withErrorBoundary };"
  }
}
