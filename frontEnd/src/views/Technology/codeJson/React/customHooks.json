{
  "basicRules": {
    "title": "自定义Hook基本规则",
    "language": "javascript",
    "code": "// 1. 函数名必须以\"use\"开头\n// 2. 可以调用其他Hook\n// 3. 遵循Hook的使用规则\n\nconst useCustomHook = (initialValue) => {\n  const [state, setState] = useState(initialValue);\n  \n  const updateState = useCallback((newValue) => {\n    setState(newValue);\n  }, []);\n  \n  return { state, updateState };\n};\n\n// 使用自定义Hook\nconst MyComponent = () => {\n  const { state, updateState } = useCustomHook('初始值');\n  \n  return (\n    <div>\n      <p>当前值: {state}</p>\n      <button onClick={() => updateState('新值')}>\n        更新\n      </button>\n    </div>\n  );\n};"
  },
  "useLocalStorage": {
    "title": "useLocalStorage - 本地存储Hook",
    "language": "javascript",
    "code": "import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // 获取初始值\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error('Error reading localStorage:', error);\n      return initialValue;\n    }\n  });\n\n  // 设置值的函数\n  const setValue = useCallback((value) => {\n    try {\n      // 允许传入函数来更新状态\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error('Error setting localStorage:', error);\n    }\n  }, [key, storedValue]);\n\n  return [storedValue, setValue];\n};\n\n// 使用示例\nconst UserProfile = () => {\n  const [user, setUser] = useLocalStorage('user', { name: '', email: '' });\n  \n  return (\n    <div>\n      <input \n        value={user.name}\n        onChange={(e) => setUser({...user, name: e.target.value})}\n        placeholder=\"姓名\"\n      />\n      <input \n        value={user.email}\n        onChange={(e) => setUser({...user, email: e.target.value})}\n        placeholder=\"邮箱\"\n      />\n    </div>\n  );\n};"
  },
  "useFetch": {
    "title": "useFetch - 数据获取Hook",
    "language": "javascript", 
    "code": "import { useState, useEffect, useCallback } from 'react';\n\nconst useFetch = (url, options = {}) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [url, JSON.stringify(options)]);\n  \n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  \n  const refetch = useCallback(() => {\n    fetchData();\n  }, [fetchData]);\n  \n  return { data, loading, error, refetch };\n};\n\n// 使用示例\nconst UserList = () => {\n  const { data: users, loading, error, refetch } = useFetch('/api/users');\n  \n  if (loading) return <div>加载中...</div>;\n  if (error) return <div>错误: {error}</div>;\n  \n  return (\n    <div>\n      <button onClick={refetch}>刷新</button>\n      <ul>\n        {users?.map(user => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};"
  },
  "useDebounce": {
    "title": "useDebounce - 防抖Hook",
    "language": "javascript",
    "code": "import { useState, useEffect } from 'react';\n\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  \n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n};\n\n// 使用示例\nconst SearchComponent = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  const [results, setResults] = useState([]);\n  \n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      // 执行搜索\n      searchAPI(debouncedSearchTerm).then(setResults);\n    } else {\n      setResults([]);\n    }\n  }, [debouncedSearchTerm]);\n  \n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"搜索...\"\n      />\n      <ul>\n        {results.map(result => (\n          <li key={result.id}>{result.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst searchAPI = async (term) => {\n  const response = await fetch(`/api/search?q=${term}`);\n  return response.json();\n};"
  },
  "useToggle": {
    "title": "useToggle - 切换状态Hook",
    "language": "javascript",
    "code": "import { useState, useCallback } from 'react';\n\nconst useToggle = (initialValue = false) => {\n  const [value, setValue] = useState(initialValue);\n  \n  const toggle = useCallback(() => {\n    setValue(prev => !prev);\n  }, []);\n  \n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n  \n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n  \n  return [value, { toggle, setTrue, setFalse }];\n};\n\n// 使用示例\nconst ModalExample = () => {\n  const [isOpen, { toggle, setTrue: open, setFalse: close }] = useToggle();\n  const [isLoading, { toggle: toggleLoading }] = useToggle();\n  \n  return (\n    <div>\n      <button onClick={open}>打开模态框</button>\n      <button onClick={toggleLoading}>切换加载状态</button>\n      \n      {isOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h3>模态框内容</h3>\n            <p>加载状态: {isLoading ? '加载中...' : '已完成'}</p>\n            <button onClick={close}>关闭</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};"
  },
  "useCounter": {
    "title": "useCounter - 计数器Hook",
    "language": "javascript",
    "code": "import { useState, useCallback } from 'react';\n\nconst useCounter = (initialValue = 0, step = 1) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = useCallback(() => {\n    setCount(prev => prev + step);\n  }, [step]);\n  \n  const decrement = useCallback(() => {\n    setCount(prev => prev - step);\n  }, [step]);\n  \n  const reset = useCallback(() => {\n    setCount(initialValue);\n  }, [initialValue]);\n  \n  const set = useCallback((value) => {\n    setCount(value);\n  }, []);\n  \n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n    set\n  };\n};\n\n// 使用示例\nconst CounterApp = () => {\n  const { count, increment, decrement, reset, set } = useCounter(0, 2);\n  const timer = useCounter(60, -1); // 倒计时\n  \n  useEffect(() => {\n    if (timer.count > 0) {\n      const interval = setInterval(timer.decrement, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [timer.count, timer.decrement]);\n  \n  return (\n    <div>\n      <div>\n        <h3>计数器: {count}</h3>\n        <button onClick={increment}>+2</button>\n        <button onClick={decrement}>-2</button>\n        <button onClick={reset}>重置</button>\n        <button onClick={() => set(100)}>设为100</button>\n      </div>\n      \n      <div>\n        <h3>倒计时: {timer.count}秒</h3>\n        <button onClick={() => timer.set(60)}>重新开始</button>\n      </div>\n    </div>\n  );\n};"
  },
  "useArray": {
    "title": "useArray - 数组操作Hook",
    "language": "javascript",
    "code": "import { useState, useCallback } from 'react';\n\nconst useArray = (initialArray = []) => {\n  const [array, setArray] = useState(initialArray);\n  \n  const push = useCallback((element) => {\n    setArray(prev => [...prev, element]);\n  }, []);\n  \n  const filter = useCallback((callback) => {\n    setArray(prev => prev.filter(callback));\n  }, []);\n  \n  const update = useCallback((index, newElement) => {\n    setArray(prev => prev.map((item, i) => i === index ? newElement : item));\n  }, []);\n  \n  const remove = useCallback((index) => {\n    setArray(prev => prev.filter((_, i) => i !== index));\n  }, []);\n  \n  const clear = useCallback(() => {\n    setArray([]);\n  }, []);\n  \n  const set = useCallback((newArray) => {\n    setArray(newArray);\n  }, []);\n  \n  return {\n    array,\n    set,\n    push,\n    filter,\n    update,\n    remove,\n    clear\n  };\n};\n\n// 使用示例\nconst TodoList = () => {\n  const { array: todos, push, filter, update, remove, clear } = useArray([]);\n  const [inputValue, setInputValue] = useState('');\n  \n  const addTodo = () => {\n    if (inputValue.trim()) {\n      push({\n        id: Date.now(),\n        text: inputValue,\n        completed: false\n      });\n      setInputValue('');\n    }\n  };\n  \n  const toggleTodo = (index) => {\n    const todo = todos[index];\n    update(index, { ...todo, completed: !todo.completed });\n  };\n  \n  const removeCompleted = () => {\n    filter(todo => !todo.completed);\n  };\n  \n  return (\n    <div>\n      <div>\n        <input\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n          placeholder=\"添加待办事项\"\n        />\n        <button onClick={addTodo}>添加</button>\n      </div>\n      \n      <div>\n        <button onClick={removeCompleted}>删除已完成</button>\n        <button onClick={clear}>清空全部</button>\n      </div>\n      \n      <ul>\n        {todos.map((todo, index) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => toggleTodo(index)}\n            />\n            <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n              {todo.text}\n            </span>\n            <button onClick={() => remove(index)}>删除</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"
  }
}
