{
  "basicTesting": {
    "title": "React 基础测试",
    "language": "javascript",
    "code": "import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Button from './Button';\n\n// 简单的Button组件\nconst Button = ({ onClick, children, disabled = false }) => {\n  return (\n    <button onClick={onClick} disabled={disabled}>\n      {children}\n    </button>\n  );\n};\n\n// 基础测试示例\ndescribe('Button组件', () => {\n  test('应该渲染按钮文本', () => {\n    render(<Button>点击我</Button>);\n    \n    // 查找按钮元素\n    const button = screen.getByRole('button', { name: '点击我' });\n    expect(button).toBeInTheDocument();\n  });\n  \n  test('应该响应点击事件', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>点击我</Button>);\n    \n    const button = screen.getByRole('button');\n    fireEvent.click(button);\n    \n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n  \n  test('禁用状态下不应该响应点击', () => {\n    const handleClick = jest.fn();\n    render(\n      <Button onClick={handleClick} disabled>\n        禁用按钮\n      </Button>\n    );\n    \n    const button = screen.getByRole('button');\n    expect(button).toBeDisabled();\n    \n    fireEvent.click(button);\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n  \n  test('应该有正确的可访问性属性', () => {\n    render(<Button>可访问按钮</Button>);\n    \n    const button = screen.getByRole('button');\n    expect(button).toHaveAttribute('type', 'button');\n  });\n});\n\n// 快照测试\ntest('Button组件快照测试', () => {\n  const { container } = render(<Button>快照测试</Button>);\n  expect(container.firstChild).toMatchSnapshot();\n});"
  },
  "hookTesting": {
    "title": "Hook 测试",
    "language": "javascript",
    "code": "import { renderHook, act } from '@testing-library/react';\nimport { useState, useEffect } from 'react';\n\n// 自定义Hook示例\nconst useCounter = (initialValue = 0) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => setCount(prev => prev + 1);\n  const decrement = () => setCount(prev => prev - 1);\n  const reset = () => setCount(initialValue);\n  \n  return { count, increment, decrement, reset };\n};\n\n// Hook测试\ndescribe('useCounter Hook', () => {\n  test('应该初始化为默认值', () => {\n    const { result } = renderHook(() => useCounter());\n    \n    expect(result.current.count).toBe(0);\n  });\n  \n  test('应该初始化为指定值', () => {\n    const { result } = renderHook(() => useCounter(10));\n    \n    expect(result.current.count).toBe(10);\n  });\n  \n  test('应该正确增加计数', () => {\n    const { result } = renderHook(() => useCounter());\n    \n    act(() => {\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(1);\n  });\n  \n  test('应该正确减少计数', () => {\n    const { result } = renderHook(() => useCounter(5));\n    \n    act(() => {\n      result.current.decrement();\n    });\n    \n    expect(result.current.count).toBe(4);\n  });\n  \n  test('应该重置到初始值', () => {\n    const { result } = renderHook(() => useCounter(10));\n    \n    act(() => {\n      result.current.increment();\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(12);\n    \n    act(() => {\n      result.current.reset();\n    });\n    \n    expect(result.current.count).toBe(10);\n  });\n});\n\n// 异步Hook测试\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(url);\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return { data, loading, error };\n};\n\n// 异步Hook测试\ndescribe('useFetch Hook', () => {\n  beforeEach(() => {\n    global.fetch = jest.fn();\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n  \n  test('应该处理成功的请求', async () => {\n    const mockData = { id: 1, name: 'Test' };\n    global.fetch.mockResolvedValueOnce({\n      json: async () => mockData\n    });\n    \n    const { result, waitForNextUpdate } = renderHook(() => \n      useFetch('/api/test')\n    );\n    \n    expect(result.current.loading).toBe(true);\n    expect(result.current.data).toBe(null);\n    \n    await waitForNextUpdate();\n    \n    expect(result.current.loading).toBe(false);\n    expect(result.current.data).toEqual(mockData);\n    expect(result.current.error).toBe(null);\n  });\n  \n  test('应该处理请求错误', async () => {\n    const errorMessage = 'Network error';\n    global.fetch.mockRejectedValueOnce(new Error(errorMessage));\n    \n    const { result, waitForNextUpdate } = renderHook(() => \n      useFetch('/api/test')\n    );\n    \n    await waitForNextUpdate();\n    \n    expect(result.current.loading).toBe(false);\n    expect(result.current.data).toBe(null);\n    expect(result.current.error).toBe(errorMessage);\n  });\n});"
  },
  "componentTesting": {
    "title": "组件集成测试",
    "language": "javascript",
    "code": "import React, { useState } from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\n// 待测试的组件\nconst TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  \n  const addTodo = () => {\n    if (inputValue.trim()) {\n      setTodos([...todos, {\n        id: Date.now(),\n        text: inputValue,\n        completed: false\n      }]);\n      setInputValue('');\n    }\n  };\n  \n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n  \n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n  \n  return (\n    <div>\n      <h1>Todo应用</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder=\"添加新任务\"\n          data-testid=\"todo-input\"\n        />\n        <button onClick={addTodo} data-testid=\"add-button\">\n          添加\n        </button>\n      </div>\n      \n      <ul data-testid=\"todo-list\">\n        {todos.map(todo => (\n          <li key={todo.id} data-testid={`todo-item-${todo.id}`}>\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => toggleTodo(todo.id)}\n              data-testid={`todo-checkbox-${todo.id}`}\n            />\n            <span \n              style={{ \n                textDecoration: todo.completed ? 'line-through' : 'none' \n              }}\n              data-testid={`todo-text-${todo.id}`}\n            >\n              {todo.text}\n            </span>\n            <button \n              onClick={() => deleteTodo(todo.id)}\n              data-testid={`delete-button-${todo.id}`}\n            >\n              删除\n            </button>\n          </li>\n        ))}\n      </ul>\n      \n      <div data-testid=\"todo-count\">\n        总计: {todos.length} | \n        已完成: {todos.filter(t => t.completed).length} | \n        未完成: {todos.filter(t => !t.completed).length}\n      </div>\n    </div>\n  );\n};\n\n// 集成测试\ndescribe('TodoApp 集成测试', () => {\n  test('应该渲染初始状态', () => {\n    render(<TodoApp />);\n    \n    expect(screen.getByText('Todo应用')).toBeInTheDocument();\n    expect(screen.getByTestId('todo-input')).toBeInTheDocument();\n    expect(screen.getByTestId('add-button')).toBeInTheDocument();\n    expect(screen.getByText('总计: 0')).toBeInTheDocument();\n  });\n  \n  test('应该能够添加新任务', async () => {\n    const user = userEvent.setup();\n    render(<TodoApp />);\n    \n    const input = screen.getByTestId('todo-input');\n    const addButton = screen.getByTestId('add-button');\n    \n    // 输入任务文本\n    await user.type(input, '学习React测试');\n    expect(input).toHaveValue('学习React测试');\n    \n    // 点击添加按钮\n    await user.click(addButton);\n    \n    // 验证任务已添加\n    expect(screen.getByText('学习React测试')).toBeInTheDocument();\n    expect(screen.getByText('总计: 1')).toBeInTheDocument();\n    expect(input).toHaveValue(''); // 输入框应该被清空\n  });\n  \n  test('应该能够切换任务完成状态', async () => {\n    const user = userEvent.setup();\n    render(<TodoApp />);\n    \n    // 先添加一个任务\n    const input = screen.getByTestId('todo-input');\n    const addButton = screen.getByTestId('add-button');\n    \n    await user.type(input, '测试任务');\n    await user.click(addButton);\n    \n    // 找到复选框并点击\n    const checkbox = screen.getByRole('checkbox');\n    await user.click(checkbox);\n    \n    // 验证任务状态已改变\n    expect(checkbox).toBeChecked();\n    expect(screen.getByText('已完成: 1')).toBeInTheDocument();\n    \n    // 再次点击取消完成\n    await user.click(checkbox);\n    expect(checkbox).not.toBeChecked();\n    expect(screen.getByText('已完成: 0')).toBeInTheDocument();\n  });\n  \n  test('应该能够删除任务', async () => {\n    const user = userEvent.setup();\n    render(<TodoApp />);\n    \n    // 添加任务\n    const input = screen.getByTestId('todo-input');\n    const addButton = screen.getByTestId('add-button');\n    \n    await user.type(input, '要删除的任务');\n    await user.click(addButton);\n    \n    expect(screen.getByText('要删除的任务')).toBeInTheDocument();\n    \n    // 删除任务\n    const deleteButton = screen.getByText('删除');\n    await user.click(deleteButton);\n    \n    // 验证任务已删除\n    expect(screen.queryByText('要删除的任务')).not.toBeInTheDocument();\n    expect(screen.getByText('总计: 0')).toBeInTheDocument();\n  });\n  \n  test('不应该添加空任务', async () => {\n    const user = userEvent.setup();\n    render(<TodoApp />);\n    \n    const addButton = screen.getByTestId('add-button');\n    \n    // 不输入任何内容直接点击添加\n    await user.click(addButton);\n    \n    expect(screen.getByText('总计: 0')).toBeInTheDocument();\n    \n    // 输入空格也不应该添加\n    const input = screen.getByTestId('todo-input');\n    await user.type(input, '   ');\n    await user.click(addButton);\n    \n    expect(screen.getByText('总计: 0')).toBeInTheDocument();\n  });\n  \n  test('应该正确计算任务统计', async () => {\n    const user = userEvent.setup();\n    render(<TodoApp />);\n    \n    const input = screen.getByTestId('todo-input');\n    const addButton = screen.getByTestId('add-button');\n    \n    // 添加多个任务\n    await user.type(input, '任务1');\n    await user.click(addButton);\n    \n    await user.type(input, '任务2');\n    await user.click(addButton);\n    \n    await user.type(input, '任务3');\n    await user.click(addButton);\n    \n    expect(screen.getByText('总计: 3')).toBeInTheDocument();\n    expect(screen.getByText('未完成: 3')).toBeInTheDocument();\n    \n    // 完成一个任务\n    const checkboxes = screen.getAllByRole('checkbox');\n    await user.click(checkboxes[0]);\n    \n    expect(screen.getByText('已完成: 1')).toBeInTheDocument();\n    expect(screen.getByText('未完成: 2')).toBeInTheDocument();\n  });\n});"
  },
  "mockingAndAsync": {
    "title": "模拟和异步测试",
    "language": "javascript",
    "code": "import React, { useState, useEffect } from 'react';\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\n\n// API服务模拟\nconst apiService = {\n  fetchUsers: async () => {\n    const response = await fetch('/api/users');\n    return response.json();\n  },\n  \n  createUser: async (userData) => {\n    const response = await fetch('/api/users', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData)\n    });\n    return response.json();\n  }\n};\n\n// 用户列表组件\nconst UserList = () => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [newUserName, setNewUserName] = useState('');\n  \n  useEffect(() => {\n    loadUsers();\n  }, []);\n  \n  const loadUsers = async () => {\n    try {\n      setLoading(true);\n      const userData = await apiService.fetchUsers();\n      setUsers(userData);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleAddUser = async (e) => {\n    e.preventDefault();\n    if (!newUserName.trim()) return;\n    \n    try {\n      const newUser = await apiService.createUser({ name: newUserName });\n      setUsers([...users, newUser]);\n      setNewUserName('');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  \n  if (loading) return <div data-testid=\"loading\">加载中...</div>;\n  if (error) return <div data-testid=\"error\">错误: {error}</div>;\n  \n  return (\n    <div>\n      <h1>用户列表</h1>\n      \n      <form onSubmit={handleAddUser} data-testid=\"add-user-form\">\n        <input\n          type=\"text\"\n          value={newUserName}\n          onChange={(e) => setNewUserName(e.target.value)}\n          placeholder=\"输入用户名\"\n          data-testid=\"user-name-input\"\n        />\n        <button type=\"submit\" data-testid=\"add-user-button\">\n          添加用户\n        </button>\n      </form>\n      \n      <ul data-testid=\"user-list\">\n        {users.map(user => (\n          <li key={user.id} data-testid={`user-${user.id}`}>\n            {user.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// 模拟API服务\njest.mock('./apiService', () => ({\n  fetchUsers: jest.fn(),\n  createUser: jest.fn()\n}));\n\ndescribe('UserList 异步测试', () => {\n  beforeEach(() => {\n    // 清除所有模拟函数的调用记录\n    jest.clearAllMocks();\n  });\n  \n  test('应该显示加载状态然后显示用户列表', async () => {\n    const mockUsers = [\n      { id: 1, name: '张三' },\n      { id: 2, name: '李四' }\n    ];\n    \n    // 模拟API调用\n    apiService.fetchUsers.mockResolvedValue(mockUsers);\n    \n    render(<UserList />);\n    \n    // 验证加载状态\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n    \n    // 等待加载完成\n    await waitFor(() => {\n      expect(screen.queryByTestId('loading')).not.toBeInTheDocument();\n    });\n    \n    // 验证用户列表\n    expect(screen.getByText('张三')).toBeInTheDocument();\n    expect(screen.getByText('李四')).toBeInTheDocument();\n    expect(apiService.fetchUsers).toHaveBeenCalledTimes(1);\n  });\n  \n  test('应该处理API错误', async () => {\n    const errorMessage = '网络错误';\n    apiService.fetchUsers.mockRejectedValue(new Error(errorMessage));\n    \n    render(<UserList />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('error')).toBeInTheDocument();\n    });\n    \n    expect(screen.getByText(`错误: ${errorMessage}`)).toBeInTheDocument();\n  });\n  \n  test('应该能够添加新用户', async () => {\n    const user = userEvent.setup();\n    const mockUsers = [{ id: 1, name: '张三' }];\n    const newUser = { id: 2, name: '王五' };\n    \n    apiService.fetchUsers.mockResolvedValue(mockUsers);\n    apiService.createUser.mockResolvedValue(newUser);\n    \n    render(<UserList />);\n    \n    // 等待初始加载完成\n    await waitFor(() => {\n      expect(screen.getByText('张三')).toBeInTheDocument();\n    });\n    \n    // 添加新用户\n    const input = screen.getByTestId('user-name-input');\n    const addButton = screen.getByTestId('add-user-button');\n    \n    await user.type(input, '王五');\n    await user.click(addButton);\n    \n    // 验证API调用\n    expect(apiService.createUser).toHaveBeenCalledWith({ name: '王五' });\n    \n    // 等待新用户出现在列表中\n    await waitFor(() => {\n      expect(screen.getByText('王五')).toBeInTheDocument();\n    });\n    \n    // 验证输入框被清空\n    expect(input).toHaveValue('');\n  });\n  \n  test('不应该添加空用户名', async () => {\n    const user = userEvent.setup();\n    const mockUsers = [];\n    \n    apiService.fetchUsers.mockResolvedValue(mockUsers);\n    \n    render(<UserList />);\n    \n    await waitFor(() => {\n      expect(screen.queryByTestId('loading')).not.toBeInTheDocument();\n    });\n    \n    const addButton = screen.getByTestId('add-user-button');\n    \n    // 尝试添加空用户名\n    await user.click(addButton);\n    \n    expect(apiService.createUser).not.toHaveBeenCalled();\n  });\n});\n\n// 使用MSW (Mock Service Worker) 进行更真实的API模拟\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\n// 设置模拟服务器\nconst server = setupServer(\n  rest.get('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { id: 1, name: '张三' },\n        { id: 2, name: '李四' }\n      ])\n    );\n  }),\n  \n  rest.post('/api/users', (req, res, ctx) => {\n    const { name } = req.body;\n    return res(\n      ctx.json({ id: Date.now(), name })\n    );\n  })\n);\n\n// 测试设置\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ndescribe('UserList with MSW', () => {\n  test('应该使用真实的HTTP请求', async () => {\n    render(<UserList />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('张三')).toBeInTheDocument();\n      expect(screen.getByText('李四')).toBeInTheDocument();\n    });\n  });\n  \n  test('应该处理服务器错误', async () => {\n    // 临时覆盖处理器以返回错误\n    server.use(\n      rest.get('/api/users', (req, res, ctx) => {\n        return res(ctx.status(500));\n      })\n    );\n    \n    render(<UserList />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('error')).toBeInTheDocument();\n    });\n  });\n});"
  }
}
