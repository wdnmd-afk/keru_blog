{
    "basicUsage": {
        "title": "useReducer 基本用法",
        "language": "javascript",
        "code": "import React, { useReducer } from 'react';\n\n// 定义初始状态\nconst initialState = {\n  count: 0,\n  step: 1\n};\n\n// 定义 reducer 函数\nconst counterReducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { ...state, count: state.count + state.step };\n    case 'decrement':\n      return { ...state, count: state.count - state.step };\n    case 'reset':\n      return { ...state, count: 0 };\n    case 'setStep':\n      return { ...state, step: action.payload };\n    case 'setCount':\n      return { ...state, count: action.payload };\n    default:\n      throw new Error(`未知的 action 类型: ${action.type}`);\n  }\n};\n\nconst BasicCounterExample = () => {\n  const [state, dispatch] = useReducer(counterReducer, initialState);\n\n  return (\n    <div>\n      <h3>基础计数器</h3>\n      \n      <div style={{ \n        fontSize: '24px', \n        textAlign: 'center', \n        padding: '16px',\n        background: '#f0f0f0',\n        borderRadius: '8px',\n        marginBottom: '16px'\n      }}>\n        计数: {state.count}\n      </div>\n      \n      <div style={{ marginBottom: '16px' }}>\n        <label>\n          步长: \n          <input \n            type=\"number\"\n            value={state.step}\n            onChange={(e) => dispatch({ \n              type: 'setStep', \n              payload: parseInt(e.target.value) || 1 \n            })}\n            style={{ marginLeft: '8px', padding: '4px', width: '60px' }}\n          />\n        </label>\n      </div>\n      \n      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n        <button \n          onClick={() => dispatch({ type: 'increment' })}\n          style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          +{state.step}\n        </button>\n        \n        <button \n          onClick={() => dispatch({ type: 'decrement' })}\n          style={{ padding: '8px 16px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          -{state.step}\n        </button>\n        \n        <button \n          onClick={() => dispatch({ type: 'reset' })}\n          style={{ padding: '8px 16px', backgroundColor: '#ff9800', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          重置\n        </button>\n        \n        <button \n          onClick={() => dispatch({ type: 'setCount', payload: 100 })}\n          style={{ padding: '8px 16px', backgroundColor: '#2196F3', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          设为100\n        </button>\n      </div>\n      \n      <div style={{ marginTop: '16px', padding: '8px', background: '#e3f2fd', borderRadius: '4px' }}>\n        <h4>当前状态:</h4>\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </div>\n    </div>\n  );\n};"
    },
    "complexState": {
        "title": "复杂状态管理",
        "language": "javascript",
        "code": "import React, { useReducer, useState } from 'react';\n\n// 复杂的初始状态\nconst initialTodoState = {\n  todos: [],\n  filter: 'all', // 'all', 'active', 'completed'\n  nextId: 1\n};\n\n// Todo reducer\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            id: state.nextId,\n            text: action.payload.text,\n            completed: false,\n            createdAt: new Date().toISOString()\n          }\n        ],\n        nextId: state.nextId + 1\n      };\n      \n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload.id\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      };\n      \n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload.id)\n      };\n      \n    case 'EDIT_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload.id\n            ? { ...todo, text: action.payload.text }\n            : todo\n        )\n      };\n      \n    case 'SET_FILTER':\n      return {\n        ...state,\n        filter: action.payload.filter\n      };\n      \n    case 'CLEAR_COMPLETED':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => !todo.completed)\n      };\n      \n    case 'TOGGLE_ALL':\n      const allCompleted = state.todos.every(todo => todo.completed);\n      return {\n        ...state,\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: !allCompleted\n        }))\n      };\n      \n    default:\n      throw new Error(`未知的 action 类型: ${action.type}`);\n  }\n};\n\nconst TodoApp = () => {\n  const [state, dispatch] = useReducer(todoReducer, initialTodoState);\n  const [inputText, setInputText] = useState('');\n  const [editingId, setEditingId] = useState(null);\n  const [editText, setEditText] = useState('');\n\n  // 过滤待办事项\n  const filteredTodos = state.todos.filter(todo => {\n    switch (state.filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  // 统计信息\n  const stats = {\n    total: state.todos.length,\n    active: state.todos.filter(todo => !todo.completed).length,\n    completed: state.todos.filter(todo => todo.completed).length\n  };\n\n  const handleAddTodo = (e) => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      dispatch({\n        type: 'ADD_TODO',\n        payload: { text: inputText.trim() }\n      });\n      setInputText('');\n    }\n  };\n\n  const handleEditStart = (todo) => {\n    setEditingId(todo.id);\n    setEditText(todo.text);\n  };\n\n  const handleEditSave = (id) => {\n    if (editText.trim()) {\n      dispatch({\n        type: 'EDIT_TODO',\n        payload: { id, text: editText.trim() }\n      });\n    }\n    setEditingId(null);\n    setEditText('');\n  };\n\n  const handleEditCancel = () => {\n    setEditingId(null);\n    setEditText('');\n  };\n\n  return (\n    <div style={{ maxWidth: '600px', margin: '0 auto' }}>\n      <h3>Todo 应用 (useReducer)</h3>\n      \n      {/* 添加新待办事项 */}\n      <form onSubmit={handleAddTodo} style={{ marginBottom: '16px' }}>\n        <div style={{ display: 'flex', gap: '8px' }}>\n          <input\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"添加新的待办事项...\"\n            style={{ flex: 1, padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}\n          />\n          <button \n            type=\"submit\"\n            style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}\n          >\n            添加\n          </button>\n        </div>\n      </form>\n      \n      {/* 统计信息 */}\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        padding: '16px',\n        background: '#f5f5f5',\n        borderRadius: '8px',\n        marginBottom: '16px'\n      }}>\n        <span>总计: {stats.total}</span>\n        <span>进行中: {stats.active}</span>\n        <span>已完成: {stats.completed}</span>\n      </div>\n      \n      {/* 过滤器 */}\n      <div style={{ marginBottom: '16px', display: 'flex', gap: '8px' }}>\n        {['all', 'active', 'completed'].map(filter => (\n          <button\n            key={filter}\n            onClick={() => dispatch({ type: 'SET_FILTER', payload: { filter } })}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              backgroundColor: state.filter === filter ? '#2196F3' : 'white',\n              color: state.filter === filter ? 'white' : 'black',\n              cursor: 'pointer'\n            }}\n          >\n            {filter === 'all' ? '全部' : filter === 'active' ? '进行中' : '已完成'}\n          </button>\n        ))}\n      </div>\n      \n      {/* 批量操作 */}\n      {state.todos.length > 0 && (\n        <div style={{ marginBottom: '16px', display: 'flex', gap: '8px' }}>\n          <button\n            onClick={() => dispatch({ type: 'TOGGLE_ALL' })}\n            style={{ padding: '6px 12px', border: '1px solid #ccc', borderRadius: '4px' }}\n          >\n            全选/取消全选\n          </button>\n          {stats.completed > 0 && (\n            <button\n              onClick={() => dispatch({ type: 'CLEAR_COMPLETED' })}\n              style={{ padding: '6px 12px', border: '1px solid #ccc', borderRadius: '4px', backgroundColor: '#f44336', color: 'white' }}\n            >\n              清除已完成\n            </button>\n          )}\n        </div>\n      )}\n      \n      {/* 待办事项列表 */}\n      <div>\n        {filteredTodos.length === 0 ? (\n          <p style={{ textAlign: 'center', color: '#666', padding: '32px' }}>\n            {state.filter === 'all' ? '暂无待办事项' : \n             state.filter === 'active' ? '没有进行中的事项' : '没有已完成的事项'}\n          </p>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0 }}>\n            {filteredTodos.map(todo => (\n              <li \n                key={todo.id}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '12px',\n                  border: '1px solid #eee',\n                  borderRadius: '4px',\n                  marginBottom: '8px',\n                  backgroundColor: todo.completed ? '#f9f9f9' : 'white'\n                }}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  onChange={() => dispatch({ type: 'TOGGLE_TODO', payload: { id: todo.id } })}\n                  style={{ marginRight: '12px' }}\n                />\n                \n                {editingId === todo.id ? (\n                  <div style={{ flex: 1, display: 'flex', gap: '8px' }}>\n                    <input\n                      type=\"text\"\n                      value={editText}\n                      onChange={(e) => setEditText(e.target.value)}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter') handleEditSave(todo.id);\n                        if (e.key === 'Escape') handleEditCancel();\n                      }}\n                      style={{ flex: 1, padding: '4px', border: '1px solid #ccc', borderRadius: '4px' }}\n                      autoFocus\n                    />\n                    <button onClick={() => handleEditSave(todo.id)} style={{ padding: '4px 8px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}>保存</button>\n                    <button onClick={handleEditCancel} style={{ padding: '4px 8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}>取消</button>\n                  </div>\n                ) : (\n                  <>\n                    <span \n                      style={{\n                        flex: 1,\n                        textDecoration: todo.completed ? 'line-through' : 'none',\n                        color: todo.completed ? '#666' : 'black',\n                        cursor: 'pointer'\n                      }}\n                      onDoubleClick={() => handleEditStart(todo)}\n                    >\n                      {todo.text}\n                    </span>\n                    \n                    <div style={{ display: 'flex', gap: '4px' }}>\n                      <button\n                        onClick={() => handleEditStart(todo)}\n                        style={{ padding: '4px 8px', backgroundColor: '#2196F3', color: 'white', border: 'none', borderRadius: '4px', fontSize: '12px' }}\n                      >\n                        编辑\n                      </button>\n                      <button\n                        onClick={() => dispatch({ type: 'DELETE_TODO', payload: { id: todo.id } })}\n                        style={{ padding: '4px 8px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px', fontSize: '12px' }}\n                      >\n                        删除\n                      </button>\n                    </div>\n                  </>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n      \n      {/* 状态调试 */}\n      <details style={{ marginTop: '24px' }}>\n        <summary style={{ cursor: 'pointer', padding: '8px', background: '#f0f0f0', borderRadius: '4px' }}>\n          查看状态 (调试)\n        </summary>\n        <pre style={{ background: '#f9f9f9', padding: '16px', borderRadius: '4px', overflow: 'auto' }}>\n          {JSON.stringify(state, null, 2)}\n        </pre>\n      </details>\n    </div>\n  );\n};"
    },
    "asyncActions": {
        "title": "异步操作处理",
        "language": "javascript",
        "code": "import React, { useReducer, useEffect } from 'react';\n\n// 异步状态管理的初始状态\nconst initialAsyncState = {\n  data: null,\n  loading: false,\n  error: null,\n  cache: new Map() // 简单的缓存机制\n};\n\n// 异步操作的 reducer\nconst asyncReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n      \n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        data: action.payload.data,\n        error: null,\n        cache: new Map(state.cache).set(action.payload.cacheKey, {\n          data: action.payload.data,\n          timestamp: Date.now()\n        })\n      };\n      \n    case 'FETCH_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        data: null\n      };\n      \n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n      \n    case 'CLEAR_DATA':\n      return {\n        ...state,\n        data: null\n      };\n      \n    case 'SET_CACHE':\n      return {\n        ...state,\n        cache: new Map(state.cache).set(action.payload.key, action.payload.value)\n      };\n      \n    case 'CLEAR_CACHE':\n      return {\n        ...state,\n        cache: new Map()\n      };\n      \n    default:\n      throw new Error(`未知的 action 类型: ${action.type}`);\n  }\n};\n\n// 模拟 API 调用\nconst mockApiCall = (endpoint, delay = 1000) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.8) {\n        reject(new Error(`API 调用失败: ${endpoint}`));\n      } else {\n        const mockData = {\n          '/api/users': [\n            { id: 1, name: '张三', email: 'zhangsan@example.com' },\n            { id: 2, name: '李四', email: 'lisi@example.com' },\n            { id: 3, name: '王五', email: 'wangwu@example.com' }\n          ],\n          '/api/posts': [\n            { id: 1, title: '第一篇文章', content: '这是第一篇文章的内容...' },\n            { id: 2, title: '第二篇文章', content: '这是第二篇文章的内容...' },\n            { id: 3, title: '第三篇文章', content: '这是第三篇文章的内容...' }\n          ],\n          '/api/comments': [\n            { id: 1, postId: 1, author: '评论者1', content: '很好的文章！' },\n            { id: 2, postId: 1, author: '评论者2', content: '我同意这个观点。' },\n            { id: 3, postId: 2, author: '评论者3', content: '有趣的内容。' }\n          ]\n        };\n        resolve(mockData[endpoint] || { message: '数据获取成功', timestamp: Date.now() });\n      }\n    }, delay);\n  });\n};\n\nconst AsyncDataFetcher = () => {\n  const [state, dispatch] = useReducer(asyncReducer, initialAsyncState);\n\n  // 获取数据的函数\n  const fetchData = async (endpoint) => {\n    const cacheKey = endpoint;\n    const cached = state.cache.get(cacheKey);\n    \n    // 检查缓存 (5分钟有效期)\n    if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: { data: cached.data, cacheKey }\n      });\n      return;\n    }\n\n    dispatch({ type: 'FETCH_START' });\n    \n    try {\n      const data = await mockApiCall(endpoint);\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: { data, cacheKey }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FETCH_ERROR',\n        payload: { error: error.message }\n      });\n    }\n  };\n\n  const endpoints = [\n    { path: '/api/users', label: '用户数据' },\n    { path: '/api/posts', label: '文章数据' },\n    { path: '/api/comments', label: '评论数据' }\n  ];\n\n  return (\n    <div>\n      <h3>异步数据获取 (useReducer)</h3>\n      \n      {/* 控制按钮 */}\n      <div style={{ marginBottom: '16px', display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n        {endpoints.map(endpoint => (\n          <button\n            key={endpoint.path}\n            onClick={() => fetchData(endpoint.path)}\n            disabled={state.loading}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: state.loading ? '#ccc' : '#2196F3',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: state.loading ? 'not-allowed' : 'pointer'\n            }}\n          >\n            获取{endpoint.label}\n          </button>\n        ))}\n        \n        <button\n          onClick={() => dispatch({ type: 'CLEAR_DATA' })}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#ff9800',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px'\n          }}\n        >\n          清除数据\n        </button>\n        \n        <button\n          onClick={() => dispatch({ type: 'CLEAR_CACHE' })}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px'\n          }}\n        >\n          清除缓存\n        </button>\n      </div>\n      \n      {/* 状态显示 */}\n      <div style={{ marginBottom: '16px' }}>\n        {state.loading && (\n          <div style={{ \n            padding: '16px', \n            background: '#e3f2fd', \n            borderRadius: '4px',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '8px'\n          }}>\n            <div style={{\n              width: '20px',\n              height: '20px',\n              border: '2px solid #2196F3',\n              borderTop: '2px solid transparent',\n              borderRadius: '50%',\n              animation: 'spin 1s linear infinite'\n            }} />\n            正在加载数据...\n          </div>\n        )}\n        \n        {state.error && (\n          <div style={{ \n            padding: '16px', \n            background: '#ffebee', \n            borderRadius: '4px',\n            color: '#d32f2f',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n            <span>❌ 错误: {state.error}</span>\n            <button\n              onClick={() => dispatch({ type: 'CLEAR_ERROR' })}\n              style={{\n                padding: '4px 8px',\n                backgroundColor: '#f44336',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                fontSize: '12px'\n              }}\n            >\n              清除错误\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {/* 数据显示 */}\n      {state.data && (\n        <div style={{ \n          padding: '16px', \n          background: '#e8f5e8', \n          borderRadius: '4px',\n          marginBottom: '16px'\n        }}>\n          <h4>获取的数据:</h4>\n          <pre style={{ \n            background: 'white', \n            padding: '12px', \n            borderRadius: '4px',\n            overflow: 'auto',\n            maxHeight: '300px'\n          }}>\n            {JSON.stringify(state.data, null, 2)}\n          </pre>\n        </div>\n      )}\n      \n      {/* 缓存信息 */}\n      {state.cache.size > 0 && (\n        <div style={{ \n          padding: '16px', \n          background: '#fff3e0', \n          borderRadius: '4px'\n        }}>\n          <h4>缓存信息 ({state.cache.size} 项):</h4>\n          <ul style={{ margin: 0, paddingLeft: '20px' }}>\n            {Array.from(state.cache.entries()).map(([key, value]) => (\n              <li key={key}>\n                <strong>{key}</strong> - 缓存时间: {new Date(value.timestamp).toLocaleTimeString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      \n      <style>{`\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\n// 带有重试机制的异步组件\nconst AsyncWithRetry = () => {\n  const [state, dispatch] = useReducer(asyncReducer, {\n    ...initialAsyncState,\n    retryCount: 0,\n    maxRetries: 3\n  });\n\n  const fetchWithRetry = async (endpoint, retryCount = 0) => {\n    dispatch({ type: 'FETCH_START' });\n    \n    try {\n      const data = await mockApiCall(endpoint, 2000); // 更长的延迟\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: { data, cacheKey: endpoint }\n      });\n    } catch (error) {\n      if (retryCount < 3) {\n        console.log(`重试第 ${retryCount + 1} 次...`);\n        setTimeout(() => {\n          fetchWithRetry(endpoint, retryCount + 1);\n        }, 1000 * (retryCount + 1)); // 递增延迟\n      } else {\n        dispatch({\n          type: 'FETCH_ERROR',\n          payload: { error: `${error.message} (重试 ${retryCount} 次后失败)` }\n        });\n      }\n    }\n  };\n\n  return (\n    <div style={{ marginTop: '32px' }}>\n      <h3>带重试机制的异步获取</h3>\n      \n      <button\n        onClick={() => fetchWithRetry('/api/users')}\n        disabled={state.loading}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: state.loading ? '#ccc' : '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: state.loading ? 'not-allowed' : 'pointer'\n        }}\n      >\n        {state.loading ? '获取中...' : '获取数据 (带重试)'}\n      </button>\n      \n      {state.loading && (\n        <div style={{ marginTop: '16px', color: '#666' }}>\n          正在获取数据，如果失败会自动重试最多3次...\n        </div>\n      )}\n      \n      {state.error && (\n        <div style={{ \n          marginTop: '16px',\n          padding: '16px', \n          background: '#ffebee', \n          borderRadius: '4px',\n          color: '#d32f2f'\n        }}>\n          {state.error}\n        </div>\n      )}\n      \n      {state.data && (\n        <div style={{ \n          marginTop: '16px',\n          padding: '16px', \n          background: '#e8f5e8', \n          borderRadius: '4px'\n        }}>\n          <h4>成功获取数据:</h4>\n          <pre style={{ background: 'white', padding: '12px', borderRadius: '4px' }}>\n            {JSON.stringify(state.data, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 组合组件\nconst AsyncActionsExample = () => {\n  return (\n    <div>\n      <AsyncDataFetcher />\n      <AsyncWithRetry />\n    </div>\n  );\n};\n\nexport default AsyncActionsExample;"
    },
    "bestPractices": {
        "title": "最佳实践和模式",
        "language": "javascript",
        "code": "import React, { useReducer, useContext, createContext } from 'react';\n\n// 1. 使用 TypeScript 类型定义 (JavaScript 中用注释说明)\n\n// Action 类型定义\nconst ActionTypes = {\n  SET_USER: 'SET_USER',\n  SET_THEME: 'SET_THEME',\n  SET_LANGUAGE: 'SET_LANGUAGE',\n  TOGGLE_SIDEBAR: 'TOGGLE_SIDEBAR',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION'\n};\n\n// 初始状态\nconst initialAppState = {\n  user: null,\n  theme: 'light',\n  language: 'zh-CN',\n  sidebarOpen: true,\n  notifications: []\n};\n\n// 2. 拆分 reducer 函数\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_USER:\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst uiReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_THEME:\n      return { ...state, theme: action.payload };\n    case ActionTypes.SET_LANGUAGE:\n      return { ...state, language: action.payload };\n    case ActionTypes.TOGGLE_SIDEBAR:\n      return { ...state, sidebarOpen: !state.sidebarOpen };\n    default:\n      return state;\n  }\n};\n\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [\n          ...state.notifications,\n          {\n            id: Date.now(),\n            ...action.payload,\n            timestamp: new Date().toISOString()\n          }\n        ]\n      };\n    case ActionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(\n          notification => notification.id !== action.payload.id\n        )\n      };\n    default:\n      return state;\n  }\n};\n\n// 3. 组合 reducer\nconst appReducer = (state, action) => {\n  // 先应用各个子 reducer\n  let newState = state;\n  newState = userReducer(newState, action);\n  newState = uiReducer(newState, action);\n  newState = notificationReducer(newState, action);\n  \n  return newState;\n};\n\n// 4. Action Creators (可选，但推荐)\nconst actionCreators = {\n  setUser: (user) => ({ type: ActionTypes.SET_USER, payload: user }),\n  setTheme: (theme) => ({ type: ActionTypes.SET_THEME, payload: theme }),\n  setLanguage: (language) => ({ type: ActionTypes.SET_LANGUAGE, payload: language }),\n  toggleSidebar: () => ({ type: ActionTypes.TOGGLE_SIDEBAR }),\n  addNotification: (notification) => ({ type: ActionTypes.ADD_NOTIFICATION, payload: notification }),\n  removeNotification: (id) => ({ type: ActionTypes.REMOVE_NOTIFICATION, payload: { id } })\n};\n\n// 5. Context 提供者\nconst AppStateContext = createContext();\nconst AppDispatchContext = createContext();\n\nconst AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialAppState);\n  \n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n};\n\n// 6. 自定义 Hooks\nconst useAppState = () => {\n  const context = useContext(AppStateContext);\n  if (!context) {\n    throw new Error('useAppState must be used within AppProvider');\n  }\n  return context;\n};\n\nconst useAppDispatch = () => {\n  const context = useContext(AppDispatchContext);\n  if (!context) {\n    throw new Error('useAppDispatch must be used within AppProvider');\n  }\n  return context;\n};\n\n// 7. 高级自定义 Hooks\nconst useActions = () => {\n  const dispatch = useAppDispatch();\n  \n  return {\n    setUser: (user) => dispatch(actionCreators.setUser(user)),\n    setTheme: (theme) => dispatch(actionCreators.setTheme(theme)),\n    setLanguage: (language) => dispatch(actionCreators.setLanguage(language)),\n    toggleSidebar: () => dispatch(actionCreators.toggleSidebar()),\n    addNotification: (notification) => dispatch(actionCreators.addNotification(notification)),\n    removeNotification: (id) => dispatch(actionCreators.removeNotification(id))\n  };\n};\n\n// 8. 组件示例\nconst UserProfile = () => {\n  const { user } = useAppState();\n  const { setUser, addNotification } = useActions();\n  \n  const handleLogin = () => {\n    const newUser = {\n      id: 1,\n      name: '张三',\n      email: 'zhangsan@example.com',\n      avatar: '👤'\n    };\n    setUser(newUser);\n    addNotification({\n      type: 'success',\n      message: '登录成功！',\n      duration: 3000\n    });\n  };\n  \n  const handleLogout = () => {\n    setUser(null);\n    addNotification({\n      type: 'info',\n      message: '已退出登录',\n      duration: 3000\n    });\n  };\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>用户信息</h4>\n      {user ? (\n        <div>\n          <p>{user.avatar} {user.name}</p>\n          <p>📧 {user.email}</p>\n          <button onClick={handleLogout} style={{ padding: '8px 16px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}>\n            退出登录\n          </button>\n        </div>\n      ) : (\n        <div>\n          <p>未登录</p>\n          <button onClick={handleLogin} style={{ padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px' }}>\n            登录\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ThemeSelector = () => {\n  const { theme } = useAppState();\n  const { setTheme, addNotification } = useActions();\n  \n  const themes = [\n    { value: 'light', label: '浅色主题', emoji: '☀️' },\n    { value: 'dark', label: '深色主题', emoji: '🌙' },\n    { value: 'auto', label: '自动', emoji: '🔄' }\n  ];\n  \n  const handleThemeChange = (newTheme) => {\n    setTheme(newTheme);\n    const themeLabel = themes.find(t => t.value === newTheme)?.label;\n    addNotification({\n      type: 'info',\n      message: `已切换到${themeLabel}`,\n      duration: 2000\n    });\n  };\n  \n  return (\n    <div style={{ padding: '16px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '16px' }}>\n      <h4>主题设置</h4>\n      <p>当前主题: {themes.find(t => t.value === theme)?.emoji} {themes.find(t => t.value === theme)?.label}</p>\n      <div style={{ display: 'flex', gap: '8px' }}>\n        {themes.map(themeOption => (\n          <button\n            key={themeOption.value}\n            onClick={() => handleThemeChange(themeOption.value)}\n            style={{\n              padding: '8px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              backgroundColor: theme === themeOption.value ? '#2196F3' : 'white',\n              color: theme === themeOption.value ? 'white' : 'black',\n              cursor: 'pointer'\n            }}\n          >\n            {themeOption.emoji} {themeOption.label}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst NotificationCenter = () => {\n  const { notifications } = useAppState();\n  const { removeNotification } = useActions();\n  \n  // 自动移除通知\n  React.useEffect(() => {\n    notifications.forEach(notification => {\n      if (notification.duration) {\n        setTimeout(() => {\n          removeNotification(notification.id);\n        }, notification.duration);\n      }\n    });\n  }, [notifications, removeNotification]);\n  \n  if (notifications.length === 0) return null;\n  \n  return (\n    <div style={{ position: 'fixed', top: '16px', right: '16px', zIndex: 1000 }}>\n      {notifications.map(notification => (\n        <div\n          key={notification.id}\n          style={{\n            padding: '12px 16px',\n            marginBottom: '8px',\n            borderRadius: '4px',\n            backgroundColor: \n              notification.type === 'success' ? '#4CAF50' :\n              notification.type === 'error' ? '#f44336' :\n              notification.type === 'warning' ? '#ff9800' : '#2196F3',\n            color: 'white',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            minWidth: '300px',\n            boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\n          }}\n        >\n          <span>{notification.message}</span>\n          <button\n            onClick={() => removeNotification(notification.id)}\n            style={{\n              background: 'none',\n              border: 'none',\n              color: 'white',\n              cursor: 'pointer',\n              fontSize: '16px',\n              padding: '0 4px'\n            }}\n          >\n            ×\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Sidebar = () => {\n  const { sidebarOpen } = useAppState();\n  const { toggleSidebar } = useActions();\n  \n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{\n        width: sidebarOpen ? '200px' : '0',\n        backgroundColor: '#f5f5f5',\n        transition: 'width 0.3s ease',\n        overflow: 'hidden',\n        borderRight: sidebarOpen ? '1px solid #ccc' : 'none'\n      }}>\n        <div style={{ padding: '16px', width: '200px' }}>\n          <h4>侧边栏</h4>\n          <ul style={{ listStyle: 'none', padding: 0 }}>\n            <li style={{ padding: '8px 0' }}>📊 仪表板</li>\n            <li style={{ padding: '8px 0' }}>👥 用户管理</li>\n            <li style={{ padding: '8px 0' }}>⚙️ 设置</li>\n            <li style={{ padding: '8px 0' }}>📈 分析</li>\n          </ul>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, padding: '16px' }}>\n        <button\n          onClick={toggleSidebar}\n          style={{\n            padding: '8px 12px',\n            backgroundColor: '#2196F3',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            marginBottom: '16px'\n          }}\n        >\n          {sidebarOpen ? '隐藏' : '显示'} 侧边栏\n        </button>\n        \n        <h3>主要内容区域</h3>\n        <p>这里是应用的主要内容。侧边栏可以通过按钮切换显示/隐藏。</p>\n      </div>\n    </div>\n  );\n};\n\n// 9. 主应用组件\nconst BestPracticesApp = () => {\n  return (\n    <AppProvider>\n      <div>\n        <h3>useReducer 最佳实践示例</h3>\n        \n        <UserProfile />\n        <ThemeSelector />\n        <Sidebar />\n        <NotificationCenter />\n        \n        {/* 状态调试 */}\n        <StateDebugger />\n      </div>\n    </AppProvider>\n  );\n};\n\n// 10. 状态调试组件\nconst StateDebugger = () => {\n  const state = useAppState();\n  const [showDebug, setShowDebug] = React.useState(false);\n  \n  return (\n    <div style={{ marginTop: '32px' }}>\n      <button\n        onClick={() => setShowDebug(!showDebug)}\n        style={{\n          padding: '8px 16px',\n          backgroundColor: '#ff9800',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        }}\n      >\n        {showDebug ? '隐藏' : '显示'} 状态调试\n      </button>\n      \n      {showDebug && (\n        <div style={{\n          marginTop: '16px',\n          padding: '16px',\n          backgroundColor: '#f9f9f9',\n          borderRadius: '8px',\n          border: '1px solid #ddd'\n        }}>\n          <h4>当前应用状态:</h4>\n          <pre style={{\n            backgroundColor: 'white',\n            padding: '12px',\n            borderRadius: '4px',\n            overflow: 'auto',\n            fontSize: '12px'\n          }}>\n            {JSON.stringify(state, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BestPracticesApp;"
    }
}
