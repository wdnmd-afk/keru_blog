{
    "basicSetup": {
        "title": "Vue Router基础配置",
        "language": "javascript",
        "code": "# 安装 Vue Router\nnpm install vue-router@4\n\n# 基本路由配置\n// router/index.js\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  },\n  {\n    path: '/about',\n    name: 'About',\n    component: About\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router\n\n// main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\ncreateApp(App).use(router).mount('#app')"
    },
    "basicTemplate": {
        "title": "基本模板使用",
        "language": "vue",
        "code": "<!-- App.vue -->\n<template>\n  <div id=\"app\">\n    <nav>\n      <!-- 声明式导航 -->\n      <router-link to=\"/\">首页</router-link>\n      <router-link to=\"/about\">关于</router-link>\n      \n      <!-- 带参数的导航 -->\n      <router-link :to=\"{ name: 'User', params: { id: 123 }}\">\n        用户详情\n      </router-link>\n      \n      <!-- 查询参数导航 -->\n      <router-link :to=\"{ path: '/search', query: { q: 'vue' }}\">\n        搜索\n      </router-link>\n    </nav>\n    \n    <!-- 路由出口 -->\n    <router-view />\n  </div>\n</template>\n\n<style>\n.router-link-active {\n  color: #42b983;\n  font-weight: bold;\n}\n</style>"
    },
    "dynamicRoutes": {
        "title": "动态路径参数",
        "language": "javascript",
        "code": "// 路由配置\nconst routes = [\n  // 动态路径参数\n  { path: '/user/:id', component: User },\n  \n  // 多个参数\n  { path: '/user/:id/post/:postId', component: UserPost },\n  \n  // 可选参数\n  { path: '/user/:id?', component: User },\n  \n  // 通配符\n  { path: '/user-*', component: User },\n  \n  // 正则表达式\n  { path: '/user/:id(\\\\d+)', component: User }, // 只匹配数字\n]\n\n// 组件中获取参数\n<template>\n  <div>\n    <h1>用户ID: {{ $route.params.id }}</h1>\n    <h2>文章ID: {{ $route.params.postId }}</h2>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute, watch } from 'vue'\n\nconst route = useRoute()\n\n// 响应路由参数变化\nwatch(() => route.params.id, (newId, oldId) => {\n  console.log('用户ID变化:', oldId, '->', newId)\n  // 重新获取用户数据\n  fetchUser(newId)\n})\n\nconst fetchUser = (id) => {\n  // 获取用户数据的逻辑\n}\n</script>"
    },
    "queryParams": {
        "title": "查询参数处理",
        "language": "vue",
        "code": "// 查询参数示例: /search?q=vue&category=tutorial\n<template>\n  <div>\n    <h1>搜索结果</h1>\n    <p>关键词: {{ $route.query.q }}</p>\n    <p>分类: {{ $route.query.category }}</p>\n    <p>Hash: {{ $route.hash }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { useRoute, useRouter } from 'vue'\n\nconst route = useRoute()\nconst router = useRouter()\n\n// 编程式导航\nconst search = (keyword) => {\n  router.push({\n    path: '/search',\n    query: { \n      q: keyword,\n      category: 'tutorial',\n      page: 1\n    }\n  })\n}\n\n// 更新查询参数\nconst updateQuery = (newParams) => {\n  router.push({\n    query: { ...route.query, ...newParams }\n  })\n}\n\n// 监听查询参数变化\nwatch(() => route.query, (newQuery) => {\n  console.log('查询参数变化:', newQuery)\n  // 根据新参数重新搜索\n})\n</script>"
    },
    "nestedRoutes": {
        "title": "嵌套路由配置",
        "language": "vue",
        "code": "// 路由配置\nconst routes = [\n  {\n    path: '/user/:id',\n    component: User,\n    children: [\n      // 空路径表示默认子路由\n      { path: '', component: UserHome },\n      \n      // 子路由\n      { path: 'profile', component: UserProfile },\n      { path: 'posts', component: UserPosts },\n      { path: 'settings', component: UserSettings }\n    ]\n  }\n]\n\n// User.vue - 父组件\n<template>\n  <div class=\"user\">\n    <h2>用户 {{ $route.params.id }}</h2>\n    \n    <!-- 子路由导航 -->\n    <nav>\n      <router-link :to=\"`/user/${$route.params.id}`\">首页</router-link>\n      <router-link :to=\"`/user/${$route.params.id}/profile`\">资料</router-link>\n      <router-link :to=\"`/user/${$route.params.id}/posts`\">文章</router-link>\n    </nav>\n    \n    <!-- 子路由出口 -->\n    <router-view />\n  </div>\n</template>"
    },
    "namedViews": {
        "title": "命名视图",
        "language": "vue",
        "code": "// 多个视图的路由配置\nconst routes = [\n  {\n    path: '/dashboard',\n    components: {\n      default: Dashboard,\n      sidebar: Sidebar,\n      header: Header\n    }\n  }\n]\n\n// App.vue - 多个命名视图\n<template>\n  <div>\n    <router-view name=\"header\" />\n    <div class=\"main-content\">\n      <router-view name=\"sidebar\" />\n      <router-view /> <!-- 默认视图 -->\n    </div>\n  </div>\n</template>"
    },
    "globalGuards": {
        "title": "全局路由守卫",
        "language": "javascript",
        "code": "// 全局前置守卫\nrouter.beforeEach((to, from) => {\n  console.log('导航到:', to.path)\n  \n  // 权限检查\n  if (to.meta.requiresAuth && !isAuthenticated()) {\n    return { name: 'Login' }\n  }\n  \n  // 角色检查\n  if (to.meta.roles && !hasRole(to.meta.roles)) {\n    return { name: 'Forbidden' }\n  }\n  \n  // 设置页面标题\n  if (to.meta.title) {\n    document.title = to.meta.title\n  }\n})\n\n// 全局后置钩子\nrouter.afterEach((to, from) => {\n  // 发送页面浏览统计\n  analytics.track('page_view', { path: to.path })\n  \n  // 滚动到顶部\n  window.scrollTo(0, 0)\n})\n\n// 全局解析守卫\nrouter.beforeResolve((to, from) => {\n  // 在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后调用\n  console.log('路由解析完成')\n})"
    },
    "routeGuards": {
        "title": "路由独享守卫",
        "language": "javascript",
        "code": "const routes = [\n  {\n    path: '/admin',\n    component: Admin,\n    meta: { requiresAuth: true, roles: ['admin'] },\n    beforeEnter: (to, from) => {\n      // 路由独享的守卫\n      if (!isAdmin()) {\n        return { name: 'Home' }\n      }\n    }\n  },\n  {\n    path: '/user/:id',\n    component: User,\n    beforeEnter: [\n      // 可以是数组\n      checkUserExists,\n      checkUserPermission\n    ]\n  }\n]\n\n// 守卫函数\nfunction checkUserExists(to) {\n  const userId = to.params.id\n  if (!userExists(userId)) {\n    return { name: 'NotFound' }\n  }\n}\n\nfunction checkUserPermission(to) {\n  const userId = to.params.id\n  if (!canViewUser(userId)) {\n    return { name: 'Forbidden' }\n  }\n}"
    },
    "componentGuards": {
        "title": "组件内守卫",
        "language": "vue",
        "code": "<script setup>\nimport { onBeforeRouteEnter, onBeforeRouteUpdate, onBeforeRouteLeave } from 'vue-router'\n\n// 进入路由前\nonBeforeRouteEnter((to, from) => {\n  console.log('即将进入路由')\n  // 可以访问组件实例\n})\n\n// 路由更新时\nonBeforeRouteUpdate((to, from) => {\n  console.log('路由参数更新')\n  // 当前路由改变，但是该组件被复用时调用\n  // 例如：从 /user/1 到 /user/2\n})\n\n// 离开路由前\nonBeforeRouteLeave((to, from) => {\n  console.log('即将离开路由')\n  \n  // 确认离开\n  if (hasUnsavedChanges()) {\n    const answer = window.confirm('有未保存的更改，确定要离开吗？')\n    if (!answer) return false\n  }\n})\n</script>"
    },
    "programmaticNavigation": {
        "title": "编程式导航方法",
        "language": "vue",
        "code": "<script setup>\nimport { useRouter, useRoute } from 'vue-router'\n\nconst router = useRouter()\nconst route = useRoute()\n\n// 基本导航\nconst goHome = () => {\n  router.push('/')\n}\n\n// 带参数导航\nconst goToUser = (userId) => {\n  router.push(`/user/${userId}`)\n  \n  // 或者使用对象形式\n  router.push({\n    name: 'User',\n    params: { id: userId }\n  })\n}\n\n// 带查询参数\nconst search = (keyword) => {\n  router.push({\n    path: '/search',\n    query: { q: keyword }\n  })\n}\n\n// 替换当前历史记录\nconst replaceRoute = () => {\n  router.replace('/new-path')\n}\n\n// 历史记录导航\nconst goBack = () => {\n  router.go(-1) // 后退一步\n}\n\nconst goForward = () => {\n  router.go(1) // 前进一步\n}\n</script>"
    },
    "routeInformation": {
        "title": "路由信息获取",
        "language": "vue",
        "code": "<script setup>\nimport { useRoute, useRouter } from 'vue-router'\nimport { computed, watch } from 'vue'\n\nconst route = useRoute()\nconst router = useRouter()\n\n// 当前路由信息\nconst currentPath = computed(() => route.path)\nconst currentParams = computed(() => route.params)\nconst currentQuery = computed(() => route.query)\n\n// 监听路由变化\nwatch(route, (newRoute, oldRoute) => {\n  console.log('路由变化:', oldRoute.path, '->', newRoute.path)\n})\n\n// 获取路由元信息\nconst pageTitle = computed(() => route.meta.title || '默认标题')\nconst requiresAuth = computed(() => route.meta.requiresAuth)\n\n// 检查当前路由\nconst isHomePage = computed(() => route.name === 'Home')\nconst isUserPage = computed(() => route.path.startsWith('/user'))\n\n// 构建动态链接\nconst userProfileLink = computed(() => ({\n  name: 'UserProfile',\n  params: { id: route.params.id }\n}))\n</script>\n\n<template>\n  <div>\n    <h1>{{ pageTitle }}</h1>\n    <p>当前路径: {{ currentPath }}</p>\n    <p>路由参数: {{ JSON.stringify(currentParams) }}</p>\n    <p>查询参数: {{ JSON.stringify(currentQuery) }}</p>\n    \n    <router-link v-if=\"isUserPage\" :to=\"userProfileLink\">\n      查看用户资料\n    </router-link>\n  </div>\n</template>"
    }
}
