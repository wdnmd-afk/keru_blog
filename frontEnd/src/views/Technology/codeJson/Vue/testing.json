{
    "jestSetup": {
        "title": "Jest 配置",
        "language": "bash",
        "code": "# 安装测试依赖\nnpm install --save-dev @vue/test-utils jest vue-jest babel-jest @babel/preset-env\n\n# jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  transform: {\n    '^.+\\.vue$': 'vue-jest',\n    '^.+\\.js$': 'babel-jest'\n  },\n  moduleFileExtensions: ['js', 'json', 'vue'],\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/src/$1'\n  },\n  collectCoverageFrom: [\n    'src/**/*.{js,vue}',\n    '!src/main.js',\n    '!**/node_modules/**'\n  ],\n  setupFilesAfterEnv: ['<rootDir>/tests/setup.js']\n}"
    },
    "vitestSetup": {
        "title": "Vitest 配置",
        "language": "bash",
        "code": "# 安装Vitest\nnpm install --save-dev vitest @vue/test-utils jsdom\n\n# vite.config.js\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [vue()],\n  test: {\n    environment: 'jsdom',\n    globals: true,\n    setupFiles: ['./tests/setup.js']\n  }\n})\n\n# package.json scripts\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:coverage\": \"vitest --coverage\"\n  }\n}"
    },
    "componentTesting": {
        "title": "Vue 组件测试示例",
        "language": "vue",
        "code": "// Counter.vue\n<template>\n  <div>\n    <p>计数: {{ count }}</p>\n    <button @click=\"increment\" data-testid=\"increment\">增加</button>\n    <button @click=\"decrement\" data-testid=\"decrement\">减少</button>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  name: 'Counter',\n  setup() {\n    const count = ref(0)\n    \n    const increment = () => count.value++\n    const decrement = () => count.value--\n    \n    return { count, increment, decrement }\n  }\n}\n</script>\n\n// Counter.test.js\nimport { mount } from '@vue/test-utils'\nimport Counter from '@/components/Counter.vue'\n\ndescribe('Counter组件', () => {\n  test('应该渲染初始计数', () => {\n    const wrapper = mount(Counter)\n    expect(wrapper.text()).toContain('计数: 0')\n  })\n\n  test('点击增加按钮应该增加计数', async () => {\n    const wrapper = mount(Counter)\n    \n    await wrapper.find('[data-testid=\"increment\"]').trigger('click')\n    \n    expect(wrapper.text()).toContain('计数: 1')\n  })\n\n  test('点击减少按钮应该减少计数', async () => {\n    const wrapper = mount(Counter)\n    \n    await wrapper.find('[data-testid=\"decrement\"]').trigger('click')\n    \n    expect(wrapper.text()).toContain('计数: -1')\n  })\n})"
    },
    "propsEventsTesting": {
        "title": "Props 和 Events 测试",
        "language": "vue",
        "code": "// UserCard.vue\n<template>\n  <div class=\"user-card\">\n    <h3>{{ user.name }}</h3>\n    <p>{{ user.email }}</p>\n    <button @click=\"handleEdit\" :disabled=\"readonly\">编辑</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UserCard',\n  props: {\n    user: {\n      type: Object,\n      required: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['edit'],\n  setup(props, { emit }) {\n    const handleEdit = () => {\n      emit('edit', props.user.id)\n    }\n    \n    return { handleEdit }\n  }\n}\n</script>\n\n// UserCard.test.js\nimport { mount } from '@vue/test-utils'\nimport UserCard from '@/components/UserCard.vue'\n\ndescribe('UserCard组件', () => {\n  const mockUser = {\n    id: 1,\n    name: '张三',\n    email: 'zhangsan@example.com'\n  }\n\n  test('应该显示用户信息', () => {\n    const wrapper = mount(UserCard, {\n      props: { user: mockUser }\n    })\n\n    expect(wrapper.text()).toContain('张三')\n    expect(wrapper.text()).toContain('zhangsan@example.com')\n  })\n\n  test('只读模式下按钮应该被禁用', () => {\n    const wrapper = mount(UserCard, {\n      props: { \n        user: mockUser,\n        readonly: true \n      }\n    })\n\n    const button = wrapper.find('button')\n    expect(button.attributes('disabled')).toBeDefined()\n  })\n\n  test('点击编辑按钮应该触发edit事件', async () => {\n    const wrapper = mount(UserCard, {\n      props: { user: mockUser }\n    })\n\n    await wrapper.find('button').trigger('click')\n\n    expect(wrapper.emitted('edit')).toBeTruthy()\n    expect(wrapper.emitted('edit')[0]).toEqual([1])\n  })\n})"
    },
    "composablesTesting": {
        "title": "Composables 测试",
        "language": "javascript",
        "code": "// composables/useCounter.js\nimport { ref, computed } from 'vue'\n\nexport function useCounter(initialValue = 0) {\n  const count = ref(initialValue)\n  \n  const increment = () => count.value++\n  const decrement = () => count.value--\n  const reset = () => count.value = initialValue\n  \n  const isEven = computed(() => count.value % 2 === 0)\n  const isPositive = computed(() => count.value > 0)\n  \n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n    isEven,\n    isPositive\n  }\n}\n\n// useCounter.test.js\nimport { useCounter } from '@/composables/useCounter'\n\ndescribe('useCounter', () => {\n  test('应该初始化为默认值', () => {\n    const { count } = useCounter()\n    expect(count.value).toBe(0)\n  })\n\n  test('应该初始化为指定值', () => {\n    const { count } = useCounter(10)\n    expect(count.value).toBe(10)\n  })\n\n  test('应该能够增加计数', () => {\n    const { count, increment } = useCounter()\n    \n    increment()\n    \n    expect(count.value).toBe(1)\n  })\n\n  test('应该正确计算是否为偶数', () => {\n    const { count, increment, isEven } = useCounter(0)\n    \n    expect(isEven.value).toBe(true)\n    \n    increment()\n    expect(isEven.value).toBe(false)\n  })\n\n  test('应该能够重置计数', () => {\n    const { count, increment, reset } = useCounter(5)\n    \n    increment()\n    increment()\n    expect(count.value).toBe(7)\n    \n    reset()\n    expect(count.value).toBe(5)\n  })\n})"
    }
}
