{
    "basicUsage": {
        "title": "Composition API 基本用法",
        "language": "vue",
        "code": "<template>\n  <div>\n    <h2>计数器: {{ count }}</h2>\n    <button @click=\"increment\">增加</button>\n    <button @click=\"decrement\">减少</button>\n    <button @click=\"reset\">重置</button>\n    \n    <h3>用户信息</h3>\n    <p>姓名: {{ user.name }}</p>\n    <p>年龄: {{ user.age }}</p>\n    <button @click=\"updateUser\">更新用户</button>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, watch, onMounted } from 'vue'\n\nexport default {\n  name: 'CompositionAPIExample',\n  setup() {\n    // 响应式数据\n    const count = ref(0)\n    const user = reactive({\n      name: '张三',\n      age: 25\n    })\n    \n    // 计算属性\n    const doubleCount = computed(() => count.value * 2)\n    \n    // 方法\n    const increment = () => {\n      count.value++\n    }\n    \n    const decrement = () => {\n      count.value--\n    }\n    \n    const reset = () => {\n      count.value = 0\n    }\n    \n    const updateUser = () => {\n      user.name = '李四'\n      user.age = 30\n    }\n    \n    // 监听器\n    watch(count, (newValue, oldValue) => {\n      console.log(`计数从 ${oldValue} 变为 ${newValue}`)\n    })\n    \n    // 生命周期\n    onMounted(() => {\n      console.log('组件已挂载')\n    })\n    \n    // 返回模板需要的数据和方法\n    return {\n      count,\n      user,\n      doubleCount,\n      increment,\n      decrement,\n      reset,\n      updateUser\n    }\n  }\n}\n</script>"
    },
    "refVsReactive": {
        "title": "ref vs reactive 对比",
        "language": "vue",
        "code": "<template>\n  <div>\n    <h3>ref 示例</h3>\n    <p>计数: {{ count }}</p>\n    <p>消息: {{ message }}</p>\n    <button @click=\"updateRef\">更新 ref</button>\n    \n    <h3>reactive 示例</h3>\n    <p>姓名: {{ person.name }}</p>\n    <p>年龄: {{ person.age }}</p>\n    <p>城市: {{ person.address.city }}</p>\n    <button @click=\"updateReactive\">更新 reactive</button>\n    \n    <h3>数组示例</h3>\n    <ul>\n      <li v-for=\"item in items\" :key=\"item.id\">\n        {{ item.name }} - {{ item.completed ? '已完成' : '未完成' }}\n      </li>\n    </ul>\n    <button @click=\"addItem\">添加项目</button>\n    <button @click=\"toggleFirst\">切换第一项状态</button>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, toRefs } from 'vue'\n\nexport default {\n  setup() {\n    // ref: 用于基本类型和单个值\n    const count = ref(0)\n    const message = ref('Hello Vue 3')\n    \n    // reactive: 用于对象和数组\n    const person = reactive({\n      name: '张三',\n      age: 25,\n      address: {\n        city: '北京',\n        street: '长安街'\n      }\n    })\n    \n    const items = reactive([\n      { id: 1, name: '学习Vue 3', completed: false },\n      { id: 2, name: '掌握Composition API', completed: true }\n    ])\n    \n    // 更新 ref 值\n    const updateRef = () => {\n      count.value += 1\n      message.value = `计数: ${count.value}`\n    }\n    \n    // 更新 reactive 对象\n    const updateReactive = () => {\n      person.name = '李四'\n      person.age += 1\n      person.address.city = '上海'\n    }\n    \n    // 操作 reactive 数组\n    const addItem = () => {\n      items.push({\n        id: items.length + 1,\n        name: `新任务 ${items.length + 1}`,\n        completed: false\n      })\n    }\n    \n    const toggleFirst = () => {\n      if (items.length > 0) {\n        items[0].completed = !items[0].completed\n      }\n    }\n    \n    // 使用 toRefs 解构 reactive 对象\n    const { name, age } = toRefs(person)\n    \n    return {\n      count,\n      message,\n      person,\n      items,\n      name, // 解构后的响应式引用\n      age,  // 解构后的响应式引用\n      updateRef,\n      updateReactive,\n      addItem,\n      toggleFirst\n    }\n  }\n}\n</script>\n\n<style scoped>\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  padding: 8px;\n  margin: 4px 0;\n  background: #f5f5f5;\n  border-radius: 4px;\n}\n\nbutton {\n  margin: 4px;\n  padding: 8px 16px;\n  background: #42b883;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background: #369870;\n}\n</style>"
    },
    "composables": {
        "title": "可组合函数 (Composables)",
        "language": "vue",
        "code": "// composables/useCounter.js\nimport { ref, computed } from 'vue'\n\nexport function useCounter(initialValue = 0) {\n  const count = ref(initialValue)\n  \n  const increment = () => count.value++\n  const decrement = () => count.value--\n  const reset = () => count.value = initialValue\n  \n  const isEven = computed(() => count.value % 2 === 0)\n  const isPositive = computed(() => count.value > 0)\n  \n  return {\n    count,\n    increment,\n    decrement,\n    reset,\n    isEven,\n    isPositive\n  }\n}\n\n// composables/useFetch.js\nimport { ref, watchEffect } from 'vue'\n\nexport function useFetch(url) {\n  const data = ref(null)\n  const error = ref(null)\n  const loading = ref(false)\n  \n  const fetchData = async () => {\n    loading.value = true\n    error.value = null\n    \n    try {\n      const response = await fetch(url.value || url)\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      data.value = await response.json()\n    } catch (err) {\n      error.value = err.message\n    } finally {\n      loading.value = false\n    }\n  }\n  \n  // 当 URL 变化时自动重新获取数据\n  watchEffect(() => {\n    if (url.value || url) {\n      fetchData()\n    }\n  })\n  \n  return {\n    data,\n    error,\n    loading,\n    refetch: fetchData\n  }\n}\n\n// composables/useLocalStorage.js\nimport { ref, watch } from 'vue'\n\nexport function useLocalStorage(key, defaultValue) {\n  const storedValue = localStorage.getItem(key)\n  const initialValue = storedValue ? JSON.parse(storedValue) : defaultValue\n  \n  const value = ref(initialValue)\n  \n  // 监听值的变化并同步到 localStorage\n  watch(\n    value,\n    (newValue) => {\n      localStorage.setItem(key, JSON.stringify(newValue))\n    },\n    { deep: true }\n  )\n  \n  return value\n}\n\n// 在组件中使用 composables\n<template>\n  <div>\n    <h3>计数器示例</h3>\n    <p>计数: {{ count }}</p>\n    <p>是偶数: {{ isEven ? '是' : '否' }}</p>\n    <p>是正数: {{ isPositive ? '是' : '否' }}</p>\n    <button @click=\"increment\">+1</button>\n    <button @click=\"decrement\">-1</button>\n    <button @click=\"reset\">重置</button>\n    \n    <h3>数据获取示例</h3>\n    <div v-if=\"loading\">加载中...</div>\n    <div v-else-if=\"error\">错误: {{ error }}</div>\n    <div v-else-if=\"data\">\n      <h4>用户信息:</h4>\n      <pre>{{ JSON.stringify(data, null, 2) }}</pre>\n    </div>\n    <button @click=\"refetch\">重新获取</button>\n    \n    <h3>本地存储示例</h3>\n    <input v-model=\"savedText\" placeholder=\"输入文本，自动保存到本地存储\" />\n    <p>保存的文本: {{ savedText }}</p>\n  </div>\n</template>\n\n<script>\nimport { useCounter } from './composables/useCounter'\nimport { useFetch } from './composables/useFetch'\nimport { useLocalStorage } from './composables/useLocalStorage'\n\nexport default {\n  setup() {\n    // 使用计数器 composable\n    const { count, increment, decrement, reset, isEven, isPositive } = useCounter(0)\n    \n    // 使用数据获取 composable\n    const { data, error, loading, refetch } = useFetch('https://jsonplaceholder.typicode.com/users/1')\n    \n    // 使用本地存储 composable\n    const savedText = useLocalStorage('my-text', '')\n    \n    return {\n      count,\n      increment,\n      decrement,\n      reset,\n      isEven,\n      isPositive,\n      data,\n      error,\n      loading,\n      refetch,\n      savedText\n    }\n  }\n}\n</script>"
    },
    "lifecycle": {
        "title": "生命周期钩子",
        "language": "vue",
        "code": "<template>\n  <div>\n    <h3>生命周期演示</h3>\n    <p>计数: {{ count }}</p>\n    <button @click=\"count++\">增加计数</button>\n    \n    <h4>窗口尺寸: {{ windowSize.width }} x {{ windowSize.height }}</h4>\n    \n    <div>\n      <h4>定时器: {{ timer }}秒</h4>\n      <button @click=\"startTimer\">开始定时器</button>\n      <button @click=\"stopTimer\">停止定时器</button>\n    </div>\n    \n    <div>\n      <h4>鼠标位置: ({{ mousePosition.x }}, {{ mousePosition.y }})</h4>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  ref,\n  reactive,\n  onMounted,\n  onUpdated,\n  onUnmounted,\n  onBeforeMount,\n  onBeforeUpdate,\n  onBeforeUnmount,\n  watchEffect\n} from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    const timer = ref(0)\n    const windowSize = reactive({ width: 0, height: 0 })\n    const mousePosition = reactive({ x: 0, y: 0 })\n    \n    let timerInterval = null\n    \n    // 组件挂载前\n    onBeforeMount(() => {\n      console.log('onBeforeMount: 组件挂载前')\n    })\n    \n    // 组件挂载后\n    onMounted(() => {\n      console.log('onMounted: 组件已挂载')\n      \n      // 初始化窗口尺寸\n      updateWindowSize()\n      \n      // 添加事件监听器\n      window.addEventListener('resize', updateWindowSize)\n      window.addEventListener('mousemove', updateMousePosition)\n    })\n    \n    // 组件更新前\n    onBeforeUpdate(() => {\n      console.log('onBeforeUpdate: 组件更新前，count =', count.value)\n    })\n    \n    // 组件更新后\n    onUpdated(() => {\n      console.log('onUpdated: 组件已更新，count =', count.value)\n    })\n    \n    // 组件卸载前\n    onBeforeUnmount(() => {\n      console.log('onBeforeUnmount: 组件卸载前')\n    })\n    \n    // 组件卸载后\n    onUnmounted(() => {\n      console.log('onUnmounted: 组件已卸载')\n      \n      // 清理事件监听器\n      window.removeEventListener('resize', updateWindowSize)\n      window.removeEventListener('mousemove', updateMousePosition)\n      \n      // 清理定时器\n      if (timerInterval) {\n        clearInterval(timerInterval)\n      }\n    })\n    \n    // 更新窗口尺寸\n    const updateWindowSize = () => {\n      windowSize.width = window.innerWidth\n      windowSize.height = window.innerHeight\n    }\n    \n    // 更新鼠标位置\n    const updateMousePosition = (event) => {\n      mousePosition.x = event.clientX\n      mousePosition.y = event.clientY\n    }\n    \n    // 开始定时器\n    const startTimer = () => {\n      if (timerInterval) return\n      \n      timerInterval = setInterval(() => {\n        timer.value++\n      }, 1000)\n    }\n    \n    // 停止定时器\n    const stopTimer = () => {\n      if (timerInterval) {\n        clearInterval(timerInterval)\n        timerInterval = null\n      }\n    }\n    \n    // 使用 watchEffect 监听响应式数据变化\n    watchEffect(() => {\n      if (count.value > 0 && count.value % 5 === 0) {\n        console.log(`计数达到 ${count.value}，这是5的倍数！`)\n      }\n    })\n    \n    return {\n      count,\n      timer,\n      windowSize,\n      mousePosition,\n      startTimer,\n      stopTimer\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 16px 0;\n}\n\nbutton {\n  margin: 4px;\n  padding: 8px 16px;\n  background: #42b883;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background: #369870;\n}\n\nh3, h4 {\n  color: #2c3e50;\n}\n</style>"
    }
}
