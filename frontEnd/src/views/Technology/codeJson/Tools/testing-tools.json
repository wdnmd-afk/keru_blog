{
  "jestConfiguration": {
    "title": "Jest 配置与基础使用",
    "language": "javascript",
    "code": "// 安装Jest\nnpm install --save-dev jest @types/jest\n\n// jest.config.js\nmodule.exports = {\n  testEnvironment: 'node',\n  roots: ['<rootDir>/src'],\n  testMatch: [\n    '**/__tests__/**/*.+(ts|tsx|js)',\n    '**/*.(test|spec).+(ts|tsx|js)'\n  ],\n  transform: {\n    '^.+\\\\.(ts|tsx)$': 'ts-jest'\n  },\n  collectCoverageFrom: [\n    'src/**/*.{js,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/index.ts'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  },\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts']\n}\n\n// package.json scripts\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:ci\": \"jest --ci --coverage --watchAll=false\"\n  }\n}"
  },
  "jestBasicTests": {
    "title": "Jest 基础测试示例",
    "language": "javascript",
    "code": "// src/utils/math.js\nexport const add = (a, b) => a + b\nexport const multiply = (a, b) => a * b\nexport const divide = (a, b) => {\n  if (b === 0) throw new Error('除数不能为零')\n  return a / b\n}\n\n// src/utils/__tests__/math.test.js\nimport { add, multiply, divide } from '../math'\n\ndescribe('数学工具函数', () => {\n  describe('add函数', () => {\n    test('应该正确计算两个正数的和', () => {\n      expect(add(2, 3)).toBe(5)\n    })\n    \n    test('应该正确处理负数', () => {\n      expect(add(-1, 1)).toBe(0)\n      expect(add(-2, -3)).toBe(-5)\n    })\n    \n    test('应该正确处理小数', () => {\n      expect(add(0.1, 0.2)).toBeCloseTo(0.3)\n    })\n  })\n  \n  describe('multiply函数', () => {\n    test('应该正确计算乘法', () => {\n      expect(multiply(3, 4)).toBe(12)\n      expect(multiply(-2, 3)).toBe(-6)\n      expect(multiply(0, 5)).toBe(0)\n    })\n  })\n  \n  describe('divide函数', () => {\n    test('应该正确计算除法', () => {\n      expect(divide(10, 2)).toBe(5)\n      expect(divide(7, 2)).toBe(3.5)\n    })\n    \n    test('除数为零时应该抛出错误', () => {\n      expect(() => divide(10, 0)).toThrow('除数不能为零')\n    })\n  })\n})\n\n// 异步测试示例\nconst fetchUser = async (id) => {\n  const response = await fetch(`/api/users/${id}`)\n  if (!response.ok) {\n    throw new Error('用户不存在')\n  }\n  return response.json()\n}\n\ndescribe('异步函数测试', () => {\n  test('应该获取用户数据', async () => {\n    // Mock fetch\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve({ id: 1, name: 'John' })\n      })\n    )\n    \n    const user = await fetchUser(1)\n    expect(user).toEqual({ id: 1, name: 'John' })\n    expect(fetch).toHaveBeenCalledWith('/api/users/1')\n  })\n  \n  test('用户不存在时应该抛出错误', async () => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        ok: false\n      })\n    )\n    \n    await expect(fetchUser(999)).rejects.toThrow('用户不存在')\n  })\n})"
  },
  "reactTesting": {
    "title": "React 组件测试",
    "language": "javascript",
    "code": "// 安装React测试工具\nnpm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event\n\n// src/setupTests.js\nimport '@testing-library/jest-dom'\n\n// src/components/Button.jsx\nimport React from 'react'\n\nconst Button = ({ children, onClick, disabled, variant = 'primary' }) => {\n  return (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      className={`btn btn-${variant}`}\n      data-testid=\"button\"\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n\n// src/components/__tests__/Button.test.jsx\nimport React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport Button from '../Button'\n\ndescribe('Button组件', () => {\n  test('应该渲染按钮文本', () => {\n    render(<Button>点击我</Button>)\n    expect(screen.getByText('点击我')).toBeInTheDocument()\n  })\n  \n  test('点击时应该调用onClick函数', async () => {\n    const handleClick = jest.fn()\n    const user = userEvent.setup()\n    \n    render(<Button onClick={handleClick}>点击我</Button>)\n    \n    await user.click(screen.getByText('点击我'))\n    expect(handleClick).toHaveBeenCalledTimes(1)\n  })\n  \n  test('禁用状态下不应该响应点击', async () => {\n    const handleClick = jest.fn()\n    const user = userEvent.setup()\n    \n    render(\n      <Button onClick={handleClick} disabled>\n        禁用按钮\n      </Button>\n    )\n    \n    await user.click(screen.getByText('禁用按钮'))\n    expect(handleClick).not.toHaveBeenCalled()\n  })\n  \n  test('应该应用正确的CSS类', () => {\n    render(<Button variant=\"secondary\">次要按钮</Button>)\n    expect(screen.getByTestId('button')).toHaveClass('btn-secondary')\n  })\n  \n  test('应该匹配快照', () => {\n    const { container } = render(<Button>快照测试</Button>)\n    expect(container.firstChild).toMatchSnapshot()\n  })\n})"
  },
  "playwrightConfiguration": {
    "title": "Playwright E2E 测试配置",
    "language": "javascript",
    "code": "// 安装Playwright\nnpm install --save-dev @playwright/test\nnpx playwright install\n\n// playwright.config.js\nmodule.exports = {\n  testDir: './e2e',\n  timeout: 30 * 1000,\n  expect: {\n    timeout: 5000\n  },\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  use: {\n    baseURL: 'http://localhost:3000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure'\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] }\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] }\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] }\n    },\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] }\n    }\n  ],\n  webServer: {\n    command: 'npm run start',\n    port: 3000\n  }\n}\n\n// package.json scripts\n{\n  \"scripts\": {\n    \"test:e2e\": \"playwright test\",\n    \"test:e2e:ui\": \"playwright test --ui\",\n    \"test:e2e:debug\": \"playwright test --debug\"\n  }\n}"
  },
  "playwrightTests": {
    "title": "Playwright E2E 测试示例",
    "language": "javascript",
    "code": "// e2e/login.spec.js\nimport { test, expect } from '@playwright/test'\n\ntest.describe('用户登录流程', () => {\n  test.beforeEach(async ({ page }) => {\n    await page.goto('/login')\n  })\n  \n  test('成功登录', async ({ page }) => {\n    await page.fill('[data-testid=\"email\"]', 'user@example.com')\n    await page.fill('[data-testid=\"password\"]', 'password123')\n    await page.click('[data-testid=\"login-button\"]')\n    \n    await expect(page).toHaveURL('/dashboard')\n    await expect(page.locator('[data-testid=\"welcome-message\"]')).toBeVisible()\n  })\n  \n  test('登录失败显示错误信息', async ({ page }) => {\n    await page.fill('[data-testid=\"email\"]', 'invalid@example.com')\n    await page.fill('[data-testid=\"password\"]', 'wrongpassword')\n    await page.click('[data-testid=\"login-button\"]')\n    \n    await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible()\n    await expect(page.locator('[data-testid=\"error-message\"]')).toContainText('登录失败')\n  })\n  \n  test('表单验证', async ({ page }) => {\n    await page.click('[data-testid=\"login-button\"]')\n    \n    await expect(page.locator('[data-testid=\"email-error\"]')).toBeVisible()\n    await expect(page.locator('[data-testid=\"password-error\"]')).toBeVisible()\n  })\n})\n\n// e2e/shopping-cart.spec.js\ntest.describe('购物车功能', () => {\n  test('添加商品到购物车', async ({ page }) => {\n    await page.goto('/products')\n    \n    // 点击第一个商品\n    await page.click('[data-testid=\"product-item\"]:first-child')\n    \n    // 添加到购物车\n    await page.click('[data-testid=\"add-to-cart\"]')\n    \n    // 验证购物车数量\n    await expect(page.locator('[data-testid=\"cart-count\"]')).toContainText('1')\n    \n    // 打开购物车\n    await page.click('[data-testid=\"cart-icon\"]')\n    \n    // 验证商品在购物车中\n    await expect(page.locator('[data-testid=\"cart-item\"]')).toBeVisible()\n  })\n  \n  test('从购物车删除商品', async ({ page }) => {\n    // 先添加商品到购物车\n    await page.goto('/products')\n    await page.click('[data-testid=\"product-item\"]:first-child')\n    await page.click('[data-testid=\"add-to-cart\"]')\n    \n    // 打开购物车\n    await page.click('[data-testid=\"cart-icon\"]')\n    \n    // 删除商品\n    await page.click('[data-testid=\"remove-item\"]')\n    \n    // 验证购物车为空\n    await expect(page.locator('[data-testid=\"empty-cart\"]')).toBeVisible()\n  })\n})\n\n// Page Object Model 示例\nclass LoginPage {\n  constructor(page) {\n    this.page = page\n    this.emailInput = page.locator('[data-testid=\"email\"]')\n    this.passwordInput = page.locator('[data-testid=\"password\"]')\n    this.loginButton = page.locator('[data-testid=\"login-button\"]')\n    this.errorMessage = page.locator('[data-testid=\"error-message\"]')\n  }\n  \n  async goto() {\n    await this.page.goto('/login')\n  }\n  \n  async login(email, password) {\n    await this.emailInput.fill(email)\n    await this.passwordInput.fill(password)\n    await this.loginButton.click()\n  }\n  \n  async getErrorMessage() {\n    return await this.errorMessage.textContent()\n  }\n}\n\n// 使用Page Object\ntest('使用Page Object登录', async ({ page }) => {\n  const loginPage = new LoginPage(page)\n  \n  await loginPage.goto()\n  await loginPage.login('test@example.com', 'password123')\n  \n  await expect(page).toHaveURL('/dashboard')\n})"
  },
  "storybookConfiguration": {
    "title": "Storybook 配置",
    "language": "javascript",
    "code": "// 安装Storybook\nnpx storybook@latest init\n\n// .storybook/main.js\nmodule.exports = {\n  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx|mdx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-docs'\n  ],\n  framework: {\n    name: '@storybook/react-vite',\n    options: {}\n  },\n  features: {\n    interactionsDebugger: true\n  }\n}\n\n// .storybook/preview.js\nimport '../src/index.css'\n\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/\n    }\n  },\n  viewport: {\n    viewports: {\n      mobile: {\n        name: 'Mobile',\n        styles: { width: '375px', height: '667px' }\n      },\n      tablet: {\n        name: 'Tablet',\n        styles: { width: '768px', height: '1024px' }\n      },\n      desktop: {\n        name: 'Desktop',\n        styles: { width: '1200px', height: '800px' }\n      }\n    }\n  }\n}"
  },
  "storybookStories": {
    "title": "Storybook Stories 编写",
    "language": "javascript",
    "code": "// src/components/Button.stories.jsx\nimport Button from './Button'\n\nexport default {\n  title: 'Components/Button',\n  component: Button,\n  parameters: {\n    docs: {\n      description: {\n        component: '通用按钮组件，支持多种样式和状态'\n      }\n    }\n  },\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'danger']\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['small', 'medium', 'large']\n    },\n    disabled: {\n      control: { type: 'boolean' }\n    },\n    onClick: { action: 'clicked' }\n  }\n}\n\nconst Template = (args) => <Button {...args} />\n\nexport const Primary = Template.bind({})\nPrimary.args = {\n  children: '主要按钮',\n  variant: 'primary'\n}\n\nexport const Secondary = Template.bind({})\nSecondary.args = {\n  children: '次要按钮',\n  variant: 'secondary'\n}\n\nexport const Danger = Template.bind({})\nDanger.args = {\n  children: '危险按钮',\n  variant: 'danger'\n}\n\nexport const Small = Template.bind({})\nSmall.args = {\n  children: '小按钮',\n  size: 'small'\n}\n\nexport const Large = Template.bind({})\nLarge.args = {\n  children: '大按钮',\n  size: 'large'\n}\n\nexport const Disabled = Template.bind({})\nDisabled.args = {\n  children: '禁用按钮',\n  disabled: true\n}\n\nexport const Loading = Template.bind({})\nLoading.args = {\n  loading: true\n}"
  },
  "testingBestPractices": {
    "title": "测试最佳实践",
    "language": "javascript",
    "code": "// 1. 测试结构 - AAA模式\ndescribe('用户服务', () => {\n  test('应该创建新用户', () => {\n    // Arrange - 准备\n    const userData = {\n      name: 'John Doe',\n      email: 'john@example.com'\n    }\n    \n    // Act - 执行\n    const user = createUser(userData)\n    \n    // Assert - 断言\n    expect(user.id).toBeDefined()\n    expect(user.name).toBe('John Doe')\n    expect(user.email).toBe('john@example.com')\n  })\n})\n\n// 2. Mock和Spy的使用\nconst userService = {\n  getUser: jest.fn(),\n  createUser: jest.fn(),\n  updateUser: jest.fn()\n}\n\n// Mock模块\njest.mock('../services/userService', () => ({\n  getUser: jest.fn(),\n  createUser: jest.fn()\n}))\n\n// Spy监听\nconst consoleSpy = jest.spyOn(console, 'log')\nconsoleSpy.mockImplementation(() => {})\n\n// 3. 测试覆盖率配置\n// jest.config.js\nmodule.exports = {\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/index.tsx',\n    '!src/serviceWorker.ts'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    },\n    './src/components/': {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    }\n  }\n}\n\n// 4. 测试工具函数\nconst renderWithProviders = (ui, options = {}) => {\n  const {\n    preloadedState = {},\n    store = setupStore(preloadedState),\n    ...renderOptions\n  } = options\n  \n  const Wrapper = ({ children }) => (\n    <Provider store={store}>\n      <Router>\n        {children}\n      </Router>\n    </Provider>\n  )\n  \n  return {\n    store,\n    ...render(ui, { wrapper: Wrapper, ...renderOptions })\n  }\n}\n\n// 5. 异步测试处理\ntest('异步数据加载', async () => {\n  const promise = fetchUserData(1)\n  \n  // 等待Promise解决\n  const userData = await promise\n  expect(userData.id).toBe(1)\n  \n  // 或者使用resolves/rejects\n  await expect(fetchUserData(1)).resolves.toHaveProperty('id', 1)\n  await expect(fetchUserData(999)).rejects.toThrow('用户不存在')\n})\n\n// 6. 测试清理\nafterEach(() => {\n  jest.clearAllMocks()\n  cleanup() // React Testing Library\n})\n\nbeforeEach(() => {\n  // 重置状态\n  jest.resetModules()\n})"
  }
}
