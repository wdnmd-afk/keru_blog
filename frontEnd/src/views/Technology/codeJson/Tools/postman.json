{
  "basicRequests": {
    "title": "基本HTTP请求",
    "language": "http",
    "code": "# GET请求示例\nGET https://jsonplaceholder.typicode.com/posts/1\nContent-Type: application/json\nAuthorization: Bearer {{token}}\n\n# POST请求示例\nPOST https://jsonplaceholder.typicode.com/posts\nContent-Type: application/json\n\n{\n  \"title\": \"新文章标题\",\n  \"body\": \"文章内容\",\n  \"userId\": 1\n}\n\n# PUT请求示例\nPUT https://jsonplaceholder.typicode.com/posts/1\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"title\": \"更新的标题\",\n  \"body\": \"更新的内容\",\n  \"userId\": 1\n}\n\n# DELETE请求示例\nDELETE https://jsonplaceholder.typicode.com/posts/1\nAuthorization: Bearer {{token}}\n\n# 文件上传\nPOST https://httpbin.org/post\nContent-Type: multipart/form-data\n\nfile: [选择文件]\ndescription: 文件描述"
  },
  "environmentVariables": {
    "title": "环境变量管理",
    "language": "json",
    "code": "// 环境变量定义\n// Development环境\n{\n  \"baseUrl\": \"http://localhost:3000\",\n  \"apiKey\": \"dev-api-key-123\",\n  \"dbHost\": \"localhost\",\n  \"timeout\": 5000\n}\n\n// Production环境\n{\n  \"baseUrl\": \"https://api.production.com\",\n  \"apiKey\": \"prod-api-key-456\",\n  \"dbHost\": \"prod-db.example.com\",\n  \"timeout\": 10000\n}\n\n// 全局变量\n{\n  \"appVersion\": \"1.0.0\",\n  \"userAgent\": \"MyApp/1.0.0\",\n  \"defaultTimeout\": 30000\n}\n\n// 在请求中使用变量\n// URL: {{baseUrl}}/api/users\n// Headers: X-API-Key: {{apiKey}}\n\n// 在脚本中操作变量\n// Pre-request Script\npm.environment.set(\"timestamp\", Date.now());\npm.globals.set(\"requestId\", pm.variables.replaceIn(\"{{$guid}}\"));\n\n// 在Tests中获取变量\nconst userId = pm.environment.get(\"userId\");\nconst baseUrl = pm.variables.get(\"baseUrl\");"
  },
  "testScripts": {
    "title": "测试脚本编写",
    "language": "javascript",
    "code": "// Pre-request Script (请求前脚本)\n// 设置动态参数\npm.environment.set(\"timestamp\", Date.now());\n\n// 生成签名\nconst crypto = require('crypto-js');\nconst apiKey = pm.environment.get(\"apiKey\");\nconst timestamp = pm.environment.get(\"timestamp\");\nconst signature = crypto.HmacSHA256(timestamp + apiKey, \"secret\").toString();\npm.environment.set(\"signature\", signature);\n\n// 设置随机数据\npm.environment.set(\"randomEmail\", `user${Math.random().toString(36).substr(2, 9)}@example.com`);\n\n// Tests (响应后测试)\n// 基本状态码测试\npm.test(\"状态码为200\", function () {\n    pm.response.to.have.status(200);\n});\n\n// 响应时间测试\npm.test(\"响应时间小于500ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(500);\n});\n\n// 响应头测试\npm.test(\"包含Content-Type头\", function () {\n    pm.response.to.have.header(\"Content-Type\");\n});\n\n// JSON响应测试\npm.test(\"响应是有效的JSON\", function () {\n    pm.response.to.be.json;\n});\n\n// 响应体内容测试\npm.test(\"用户ID存在\", function () {\n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData.id).to.be.a('number');\n});\n\n// 数组长度测试\npm.test(\"返回用户列表\", function () {\n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('array');\n    pm.expect(jsonData.length).to.be.above(0);\n});\n\n// 条件测试\npm.test(\"环境相关测试\", function () {\n    const jsonData = pm.response.json();\n    const environment = pm.environment.get(\"environment\");\n    \n    if (environment === \"development\") {\n        pm.expect(jsonData.debug).to.be.true;\n    } else {\n        pm.expect(jsonData.debug).to.be.undefined;\n    }\n});\n\n// 保存响应数据到变量\nconst responseJson = pm.response.json();\npm.environment.set(\"userId\", responseJson.id);\npm.environment.set(\"userToken\", responseJson.token);"
  },
  "collectionRunner": {
    "title": "Collection Runner 批量测试",
    "language": "javascript",
    "code": "// 批量运行测试集合\n// 1. 创建测试数据文件 (CSV/JSON)\n// users.csv\nname,email,age\n张三,zhangsan@example.com,25\n李四,lisi@example.com,30\n王五,wangwu@example.com,28\n\n// users.json\n[\n  {\n    \"name\": \"张三\",\n    \"email\": \"zhangsan@example.com\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"李四\",\n    \"email\": \"lisi@example.com\",\n    \"age\": 30\n  }\n]\n\n// 在请求中使用数据文件变量\n// POST {{baseUrl}}/api/users\n// {\n//   \"name\": \"{{name}}\",\n//   \"email\": \"{{email}}\",\n//   \"age\": {{age}}\n// }\n\n// Collection Runner配置\n// - 选择Collection\n// - 选择Environment\n// - 上传数据文件\n// - 设置迭代次数\n// - 设置延迟时间\n\n// 在脚本中控制执行流程\n// 跳过当前请求\nif (pm.iterationData.get(\"skip\") === \"true\") {\n    pm.execution.skipRequest();\n}\n\n// 停止执行\nif (pm.response.code !== 200) {\n    pm.execution.skipRequest();\n}"
  },
  "mockServer": {
    "title": "Mock服务器",
    "language": "javascript",
    "code": "// 创建Mock服务器\n// 1. 在Collection中添加示例响应\n// GET /api/users\n// Example Response:\n{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"张三\",\n      \"email\": \"zhangsan@example.com\",\n      \"role\": \"admin\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"李四\",\n      \"email\": \"lisi@example.com\",\n      \"role\": \"user\"\n    }\n  ],\n  \"total\": 2,\n  \"page\": 1,\n  \"limit\": 10\n}\n\n// 2. 动态Mock响应\n// 在Mock服务器中使用脚本\nconst userRole = pm.request.headers.get(\"X-User-Role\");\n\nif (userRole === \"admin\") {\n    // 返回管理员数据\n    pm.response.json({\n        \"users\": adminUsers,\n        \"permissions\": [\"read\", \"write\", \"delete\"]\n    });\n} else {\n    // 返回普通用户数据\n    pm.response.json({\n        \"users\": regularUsers,\n        \"permissions\": [\"read\"]\n    });\n}\n\n// Mock服务器URL\n// https://{{mockId}}.mock.pstmn.io/api/users\n\n// 3. 条件响应\n// 根据请求参数返回不同响应\nconst page = pm.request.url.query.get(\"page\") || 1;\nconst limit = pm.request.url.query.get(\"limit\") || 10;\n\nconst startIndex = (page - 1) * limit;\nconst endIndex = startIndex + parseInt(limit);\nconst paginatedUsers = allUsers.slice(startIndex, endIndex);\n\npm.response.json({\n    \"users\": paginatedUsers,\n    \"total\": allUsers.length,\n    \"page\": parseInt(page),\n    \"limit\": parseInt(limit)\n});"
  },
  "apiDocumentation": {
    "title": "API文档生成",
    "language": "json",
    "code": "// Collection描述\n{\n  \"info\": {\n    \"name\": \"用户管理API\",\n    \"description\": \"用户管理系统的RESTful API接口文档\",\n    \"version\": \"1.0.0\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n  },\n  \"auth\": {\n    \"type\": \"bearer\",\n    \"bearer\": [\n      {\n        \"key\": \"token\",\n        \"value\": \"{{authToken}}\",\n        \"type\": \"string\"\n      }\n    ]\n  }\n}\n\n// 请求描述示例\n{\n  \"name\": \"获取用户列表\",\n  \"request\": {\n    \"description\": \"获取系统中所有用户的列表，支持分页和筛选\",\n    \"method\": \"GET\",\n    \"header\": [\n      {\n        \"key\": \"Authorization\",\n        \"value\": \"Bearer {{token}}\",\n        \"description\": \"用户认证令牌\"\n      }\n    ],\n    \"url\": {\n      \"raw\": \"{{baseUrl}}/api/users?page={{page}}&limit={{limit}}\",\n      \"query\": [\n        {\n          \"key\": \"page\",\n          \"value\": \"1\",\n          \"description\": \"页码，从1开始\"\n        },\n        {\n          \"key\": \"limit\",\n          \"value\": \"10\",\n          \"description\": \"每页数量，最大100\"\n        }\n      ]\n    }\n  },\n  \"response\": [\n    {\n      \"name\": \"成功响应\",\n      \"status\": \"OK\",\n      \"code\": 200,\n      \"body\": \"示例响应数据\"\n    }\n  ]\n}\n\n// 文档生成步骤:\n// 1. 完善Collection信息\n// 2. 添加请求描述和示例\n// 3. 说明参数和头部信息\n// 4. 发布到Postman文档\n\n// 文档URL示例\n// https://documenter.getpostman.com/view/{{collectionId}}/{{version}}"
  },
  "newmanCLI": {
    "title": "Newman CLI 自动化",
    "language": "bash",
    "code": "# 安装Newman\nnpm install -g newman\n\n# 基本使用\nnewman run collection.json\n\n# 使用环境文件\nnewman run collection.json -e environment.json\n\n# 使用数据文件\nnewman run collection.json -d data.csv\n\n# 生成报告\nnewman run collection.json -r html,json,cli\nnewman run collection.json -r html --reporter-html-export report.html\n\n# 设置迭代次数\nnewman run collection.json -n 5\n\n# 设置延迟\nnewman run collection.json --delay-request 1000\n\n# 忽略SSL错误\nnewman run collection.json --insecure\n\n# 设置超时\nnewman run collection.json --timeout-request 10000\n\n# CI/CD集成示例\n# package.json\n{\n  \"scripts\": {\n    \"test:api\": \"newman run tests/api-tests.json -e tests/env.json -r html,json\",\n    \"test:smoke\": \"newman run tests/smoke-tests.json -e tests/prod-env.json\"\n  }\n}\n\n# GitHub Actions\nname: API Tests\non: [push, pull_request]\njobs:\n  api-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Newman\n        run: npm install -g newman\n      - name: Run API Tests\n        run: |\n          newman run tests/api-collection.json \\\n            -e tests/test-environment.json \\\n            -r html,json \\\n            --reporter-html-export results.html\n      - name: Upload Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: results.html\n\n# Jenkins Pipeline\npipeline {\n    agent any\n    stages {\n        stage('API Tests') {\n            steps {\n                sh 'newman run collection.json -e environment.json -r junit --reporter-junit-export results.xml'\n            }\n            post {\n                always {\n                    publishTestResults testResultsPattern: 'results.xml'\n                }\n            }\n        }\n    }\n}"
  },
  "customNewmanScript": {
    "title": "自定义Newman脚本",
    "language": "javascript",
    "code": "// test-runner.js\nconst newman = require('newman');\nconst fs = require('fs');\n\nclass APITestRunner {\n    constructor(options = {}) {\n        this.options = {\n            collection: options.collection || 'collection.json',\n            environment: options.environment || 'environment.json',\n            reporters: options.reporters || ['cli', 'html'],\n            iterations: options.iterations || 1,\n            ...options\n        };\n    }\n    \n    async runTests() {\n        return new Promise((resolve, reject) => {\n            newman.run({\n                collection: this.options.collection,\n                environment: this.options.environment,\n                reporters: this.options.reporters,\n                iterationCount: this.options.iterations,\n                reporter: {\n                    html: {\n                        export: './reports/api-test-report.html'\n                    },\n                    json: {\n                        export: './reports/api-test-results.json'\n                    }\n                }\n            }, (err, summary) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                \n                console.log('测试完成!');\n                console.log(`总请求数: ${summary.run.stats.requests.total}`);\n                console.log(`成功请求: ${summary.run.stats.requests.total - summary.run.stats.requests.failed}`);\n                console.log(`失败请求: ${summary.run.stats.requests.failed}`);\n                console.log(`总断言数: ${summary.run.stats.assertions.total}`);\n                console.log(`成功断言: ${summary.run.stats.assertions.total - summary.run.stats.assertions.failed}`);\n                console.log(`失败断言: ${summary.run.stats.assertions.failed}`);\n                \n                // 生成自定义报告\n                this.generateCustomReport(summary);\n                \n                if (summary.run.stats.requests.failed > 0 || summary.run.stats.assertions.failed > 0) {\n                    reject(new Error('测试失败'));\n                } else {\n                    resolve(summary);\n                }\n            });\n        });\n    }\n    \n    generateCustomReport(summary) {\n        const report = {\n            timestamp: new Date().toISOString(),\n            summary: {\n                requests: summary.run.stats.requests,\n                assertions: summary.run.stats.assertions,\n                testScripts: summary.run.stats.testScripts,\n                prerequestScripts: summary.run.stats.prerequestScripts\n            },\n            failures: summary.run.failures.map(failure => ({\n                source: failure.source,\n                error: failure.error.message\n            }))\n        };\n        \n        fs.writeFileSync('./reports/custom-report.json', JSON.stringify(report, null, 2));\n    }\n}\n\n// 使用示例\nconst runner = new APITestRunner({\n    collection: './collections/user-api.json',\n    environment: './environments/test.json',\n    iterations: 3\n});\n\nrunner.runTests()\n    .then(summary => {\n        console.log('所有测试通过!');\n        process.exit(0);\n    })\n    .catch(error => {\n        console.error('测试失败:', error);\n        process.exit(1);\n    });"
  }
}
