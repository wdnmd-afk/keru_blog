{
    "basicConfig": {
        "title": "Webpack基础配置",
        "language": "javascript",
        "code": "// webpack.config.js\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  // 入口文件\n  entry: './src/index.js',\n  \n  // 输出配置\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    clean: true  // 清理输出目录\n  },\n  \n  // 模式\n  mode: 'development', // 或 'production'\n  \n  // 开发服务器\n  devServer: {\n    static: './dist',\n    port: 3000,\n    open: true,\n    hot: true  // 热模块替换\n  },\n  \n  // 插件\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      title: '我的应用'\n    })\n  ]\n}"
    },
    "loaders": {
        "title": "加载器配置",
        "language": "javascript",
        "code": "module.exports = {\n  module: {\n    rules: [\n      // JavaScript/TypeScript\n      {\n        test: /\\.(js|jsx|ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              '@babel/preset-env',\n              '@babel/preset-react',\n              '@babel/preset-typescript'\n            ]\n          }\n        }\n      },\n      \n      // CSS\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader']\n      },\n      \n      // SCSS/Sass\n      {\n        test: /\\.(scss|sass)$/i,\n        use: [\n          'style-loader',\n          'css-loader',\n          'sass-loader'\n        ]\n      },\n      \n      // 图片\n      {\n        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n        type: 'asset/resource'\n      },\n      \n      // 字体\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n        type: 'asset/resource'\n      },\n      \n      // JSON\n      {\n        test: /\\.json$/,\n        type: 'json'\n      }\n    ]\n  }\n}"
    },
    "plugins": {
        "title": "常用插件",
        "language": "javascript",
        "code": "const HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst webpack = require('webpack')\n\nmodule.exports = {\n  plugins: [\n    // HTML插件\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html',\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true\n      }\n    }),\n    \n    // CSS提取插件\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css'\n    }),\n    \n    // 清理插件\n    new CleanWebpackPlugin(),\n    \n    // 环境变量插件\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n      'process.env.API_URL': JSON.stringify(process.env.API_URL)\n    }),\n    \n    // 热模块替换插件\n    new webpack.HotModuleReplacementPlugin(),\n    \n    // 进度插件\n    new webpack.ProgressPlugin(),\n    \n    // Bundle分析插件\n    new (require('webpack-bundle-analyzer').BundleAnalyzerPlugin)({\n      analyzerMode: 'static',\n      openAnalyzer: false\n    })\n  ]\n}"
    },
    "optimization": {
        "title": "优化配置",
        "language": "javascript",
        "code": "const TerserPlugin = require('terser-webpack-plugin')\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = {\n  optimization: {\n    // 代码分割\n    splitChunks: {\n      chunks: 'all',\n      cacheGroups: {\n        // 第三方库\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          chunks: 'all',\n          priority: 10\n        },\n        // 公共代码\n        common: {\n          name: 'common',\n          minChunks: 2,\n          chunks: 'all',\n          priority: 5\n        }\n      }\n    },\n    \n    // 运行时代码分离\n    runtimeChunk: 'single',\n    \n    // 压缩配置\n    minimize: true,\n    minimizer: [\n      // JS压缩\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            drop_console: true,  // 移除console\n            drop_debugger: true  // 移除debugger\n          }\n        }\n      }),\n      \n      // CSS压缩\n      new CssMinimizerPlugin()\n    ],\n    \n    // 模块ID优化\n    moduleIds: 'deterministic',\n    chunkIds: 'deterministic'\n  }\n}"
    },
    "devServer": {
        "title": "开发服务器",
        "language": "javascript",
        "code": "module.exports = {\n  devServer: {\n    // 静态文件目录\n    static: {\n      directory: path.join(__dirname, 'public'),\n      publicPath: '/static'\n    },\n    \n    // 端口和主机\n    port: 3000,\n    host: 'localhost',\n    \n    // 自动打开浏览器\n    open: true,\n    \n    // 热模块替换\n    hot: true,\n    \n    // 历史API回退\n    historyApiFallback: {\n      index: '/index.html'\n    },\n    \n    // 代理配置\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8080',\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    },\n    \n    // 压缩\n    compress: true,\n    \n    // HTTPS\n    https: false,\n    \n    // 客户端日志级别\n    client: {\n      logging: 'info',\n      overlay: {\n        errors: true,\n        warnings: false\n      }\n    },\n    \n    // 监听文件变化\n    watchFiles: {\n      paths: ['src/**/*', 'public/**/*'],\n      options: {\n        usePolling: false\n      }\n    }\n  }\n}"
    },
    "multipleEntries": {
        "title": "多入口配置",
        "language": "javascript",
        "code": "module.exports = {\n  // 多个入口点\n  entry: {\n    main: './src/index.js',\n    admin: './src/admin.js',\n    vendor: ['react', 'react-dom', 'lodash']\n  },\n  \n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js'\n  },\n  \n  // 为每个入口生成HTML\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: 'index.html',\n      chunks: ['main', 'vendor']\n    }),\n    \n    new HtmlWebpackPlugin({\n      template: './src/admin.html',\n      filename: 'admin.html',\n      chunks: ['admin', 'vendor']\n    })\n  ],\n  \n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendor',\n          chunks: 'all'\n        }\n      }\n    }\n  }\n}"
    },
    "productionConfig": {
        "title": "生产环境配置",
        "language": "javascript",
        "code": "const path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst TerserPlugin = require('terser-webpack-plugin')\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\n\nmodule.exports = {\n  mode: 'production',\n  \n  entry: './src/index.js',\n  \n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[contenthash].js',\n    chunkFilename: '[name].[contenthash].chunk.js',\n    clean: true,\n    publicPath: '/'\n  },\n  \n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader']\n      }\n    ]\n  },\n  \n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true\n      }\n    }),\n    \n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css',\n      chunkFilename: '[id].[contenthash].css'\n    })\n  ],\n  \n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          compress: {\n            drop_console: true,\n            drop_debugger: true\n          }\n        }\n      }),\n      new CssMinimizerPlugin()\n    ],\n    \n    splitChunks: {\n      chunks: 'all',\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: 'vendors',\n          chunks: 'all'\n        }\n      }\n    },\n    \n    runtimeChunk: 'single'\n  }\n}"
    },
    "performance": {
        "title": "性能优化",
        "language": "javascript",
        "code": "module.exports = {\n  // 性能提示\n  performance: {\n    hints: 'warning',\n    maxEntrypointSize: 250000,  // 入口点最大大小\n    maxAssetSize: 250000        // 资源最大大小\n  },\n  \n  // 缓存配置\n  cache: {\n    type: 'filesystem',\n    buildDependencies: {\n      config: [__filename]\n    }\n  },\n  \n  // 解析优化\n  resolve: {\n    // 别名\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n      'components': path.resolve(__dirname, 'src/components'),\n      'utils': path.resolve(__dirname, 'src/utils')\n    },\n    \n    // 扩展名\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n    \n    // 模块查找目录\n    modules: ['node_modules', path.resolve(__dirname, 'src')]\n  },\n  \n  // 外部依赖\n  externals: {\n    'react': 'React',\n    'react-dom': 'ReactDOM',\n    'lodash': '_'\n  },\n  \n  // Tree Shaking\n  optimization: {\n    usedExports: true,\n    sideEffects: false  // 或者指定有副作用的文件\n  },\n  \n  // 监听优化\n  watchOptions: {\n    ignored: /node_modules/,\n    aggregateTimeout: 300,\n    poll: 1000\n  }\n}"
    }
}
