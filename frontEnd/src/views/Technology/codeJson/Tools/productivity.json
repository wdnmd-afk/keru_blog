{
  "codeSnippets": {
    "title": "代码片段管理",
    "language": "json",
    "code": "// VS Code 自定义代码片段\n// 文件: .vscode/snippets.code-snippets\n{\n  \"React Functional Component\": {\n    \"prefix\": \"rfc\",\n    \"body\": [\n      \"import React from 'react'\",\n      \"\",\n      \"interface ${1:ComponentName}Props {\",\n      \"  $2\",\n      \"}\",\n      \"\",\n      \"const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = (props) => {\",\n      \"  return (\",\n      \"    <div>\",\n      \"      $0\",\n      \"    </div>\",\n      \"  )\",\n      \"}\",\n      \"\",\n      \"export default ${1:ComponentName}\"\n    ],\n    \"description\": \"React函数组件模板\"\n  },\n  \"Console Log\": {\n    \"prefix\": \"clg\",\n    \"body\": [\n      \"console.log('$1', $1)$0\"\n    ],\n    \"description\": \"带变量的console.log\"\n  },\n  \"TypeScript Interface\": {\n    \"prefix\": \"tsi\",\n    \"body\": [\n      \"interface ${1:InterfaceName} {\",\n      \"  $0\",\n      \"}\"\n    ],\n    \"description\": \"TypeScript接口定义\"\n  }\n}"
  },
  "textExpansion": {
    "title": "文本扩展工具",
    "language": "text",
    "code": "# Alfred 文本扩展配置 (macOS)\n# 关键词: email\n# 扩展内容: your.email@example.com\n\n# 关键词: sig\n# 扩展内容:\n最好的祝愿,\n[您的姓名]\n[您的职位]\n[公司名称]\n[联系方式]\n\n# 关键词: addr\n# 扩展内容:\n[您的地址]\n[城市, 省份 邮编]\n[国家]\n\n# 关键词: phone\n# 扩展内容: +86 138-0013-8000\n\n# 关键词: uuid\n# AppleScript脚本:\ndo shell script \"uuidgen | tr '[:upper:]' '[:lower:]'\"\n\n# 关键词: timestamp\n# AppleScript脚本:\ndo shell script \"date +%s\"\n\n# 关键词: date\n# AppleScript脚本:\ndo shell script \"date '+%Y-%m-%d'\"\n\n# 关键词: time\n# AppleScript脚本:\ndo shell script \"date '+%H:%M:%S'\""
  },
  "raycastScripts": {
    "title": "Raycast 脚本命令",
    "language": "bash",
    "code": "#!/bin/bash\n\n# Raycast Script Commands\n\n# @raycast.title Generate UUID\n# @raycast.mode compact\n# @raycast.packageName Developer Utils\n# @raycast.icon 🆔\nuuidgen | tr '[:upper:]' '[:lower:]' | pbcopy\necho \"UUID copied to clipboard\"\n\n# @raycast.title Current Timestamp\n# @raycast.mode compact\n# @raycast.packageName Developer Utils\n# @raycast.icon ⏰\ndate +%s | pbcopy\necho \"Timestamp copied to clipboard\"\n\n# @raycast.title Kill Port\n# @raycast.mode fullOutput\n# @raycast.packageName Developer Utils\n# @raycast.icon 🔌\n# @raycast.argument1 { \"type\": \"text\", \"placeholder\": \"Port number\" }\nPORT=$1\nPID=$(lsof -ti:$PORT)\nif [ ! -z \"$PID\" ]; then\n  kill -9 $PID\n  echo \"Process on port $PORT killed\"\nelse\n  echo \"No process found on port $PORT\"\nfi\n\n# @raycast.title Create React Component\n# @raycast.mode fullOutput\n# @raycast.packageName Developer Utils\n# @raycast.icon ⚛️\n# @raycast.argument1 { \"type\": \"text\", \"placeholder\": \"Component name\" }\nCOMPONENT_NAME=$1\nDIR=\"./src/components/$COMPONENT_NAME\"\n\nmkdir -p \"$DIR\"\n\ncat > \"$DIR/$COMPONENT_NAME.tsx\" << EOF\nimport React from 'react'\nimport styles from './$COMPONENT_NAME.module.scss'\n\ninterface ${COMPONENT_NAME}Props {\n  // 定义Props\n}\n\nconst $COMPONENT_NAME: React.FC<${COMPONENT_NAME}Props> = (props) => {\n  return (\n    <div className={styles.${COMPONENT_NAME,,}}>\n      $COMPONENT_NAME Component\n    </div>\n  )\n}\n\nexport default $COMPONENT_NAME\nEOF\n\ncat > \"$DIR/$COMPONENT_NAME.module.scss\" << EOF\n.${COMPONENT_NAME,,} {\n  // 组件样式\n}\nEOF\n\necho \"Component $COMPONENT_NAME created successfully\""
  },
  "windowManagement": {
    "title": "窗口管理工具",
    "language": "lua",
    "code": "-- Hammerspoon 窗口管理配置 (macOS)\n-- 文件: ~/.hammerspoon/init.lua\n\n-- 窗口移动到左半屏\nhs.hotkey.bind({\"ctrl\", \"alt\"}, \"Left\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n  local screen = win:screen()\n  local max = screen:frame()\n  \n  f.x = max.x\n  f.y = max.y\n  f.w = max.w / 2\n  f.h = max.h\n  win:setFrame(f)\nend)\n\n-- 窗口移动到右半屏\nhs.hotkey.bind({\"ctrl\", \"alt\"}, \"Right\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n  local screen = win:screen()\n  local max = screen:frame()\n  \n  f.x = max.x + (max.w / 2)\n  f.y = max.y\n  f.w = max.w / 2\n  f.h = max.h\n  win:setFrame(f)\nend)\n\n-- 窗口最大化\nhs.hotkey.bind({\"ctrl\", \"alt\"}, \"Up\", function()\n  local win = hs.window.focusedWindow()\n  win:maximize()\nend)\n\n-- 快速启动应用\nhs.hotkey.bind({\"cmd\"}, \"1\", function()\n  hs.application.launchOrFocus(\"Visual Studio Code\")\nend)\n\nhs.hotkey.bind({\"cmd\"}, \"2\", function()\n  hs.application.launchOrFocus(\"Google Chrome\")\nend)\n\nhs.hotkey.bind({\"cmd\"}, \"3\", function()\n  hs.application.launchOrFocus(\"Terminal\")\nend)\n\n-- Windows PowerToys FancyZones 配置\n-- {\n--   \"version\": \"1.0\",\n--   \"name\": \"Development Layout\",\n--   \"type\": \"grid\",\n--   \"info\": {\n--     \"rows\": 2,\n--     \"columns\": 3,\n--     \"zones\": [\n--       { \"X\": 0, \"Y\": 0, \"width\": 2, \"height\": 2 },\n--       { \"X\": 2, \"Y\": 0, \"width\": 1, \"height\": 1 },\n--       { \"X\": 2, \"Y\": 1, \"width\": 1, \"height\": 1 }\n--     ]\n--   }\n-- }"
  },
  "automationWorkflows": {
    "title": "自动化工作流",
    "language": "yaml",
    "code": "# Zapier 工作流示例\n\n# 1. GitHub 到 Slack 通知\nTrigger: GitHub - New Issue\nAction: Slack - Send Channel Message\nMessage: \"新问题: {{issue_title}} - {{issue_url}}\"\nChannel: \"#development\"\n\n# 2. 邮件到任务管理\nTrigger: Gmail - New Email (with label \"todo\")\nAction: Todoist - Create Task\nTask Name: \"回复邮件: {{subject}}\"\nProject: \"工作\"\nDue Date: \"明天\"\n\n# 3. 日历事件提醒\nTrigger: Google Calendar - Event Starting\nAction: Slack - Send Direct Message\nMessage: \"会议 '{{event_title}}' 将在15分钟后开始\"\nRecipient: \"@me\"\n\n# 4. 代码审查提醒\nTrigger: GitHub - Pull Request Opened\nAction: Google Calendar - Create Event\nTitle: \"代码审查: {{pull_request_title}}\"\nStart Time: \"{{created_at}} + 2 hours\"\nDuration: \"30 minutes\"\n\n# IFTTT Applet 示例\n\n# 1. 工作时间自动静音\nIF: Android Device - Connects to specific WiFi (Office WiFi)\nTHEN: Android Device - Set ringtone volume to 0\n\n# 2. 下班时间恢复音量\nIF: Android Device - Disconnects from specific WiFi (Office WiFi)\nTHEN: Android Device - Set ringtone volume to 7\n\n# 3. 天气提醒\nIF: Weather Underground - Tomorrow's weather includes \"Rain\"\nTHEN: SMS - Send me an SMS\nMessage: \"明天有雨，记得带伞！\"\n\n# 4. 位置提醒\nIF: Location - You enter an area (超市)\nTHEN: Todoist - Create task\nTask: \"购买清单上的物品\"\n\n# 5. 社交媒体同步\nIF: Instagram - Any new photo by you\nTHEN: Twitter - Post a tweet\nTweet: \"刚在Instagram分享了新照片 {{Caption}} {{Url}}\"\n\n# 6. 备份提醒\nIF: Date & Time - Every day at 6:00 PM\nTHEN: Todoist - Create task\nTask: \"检查今日工作备份\"\n\n# 7. 运动记录\nIF: Strava - New activity by you\nTHEN: Google Sheets - Add row to spreadsheet\nRow: \"{{ActivityDate}}, {{ActivityType}}, {{Distance}}, {{Duration}}\"\n\n# 8. 健康数据记录\nIF: iOS Health - New weight measurement\nTHEN: Google Sheets - Add row to spreadsheet\nRow: \"{{Date}}, {{Weight}}, {{BMI}}\""
  },
  "customAutomation": {
    "title": "自定义自动化脚本",
    "language": "javascript",
    "code": "// Node.js 自动化脚本示例\nconst fs = require('fs');\nconst path = require('path');\nconst { exec } = require('child_process');\nconst cron = require('node-cron');\nconst nodemailer = require('nodemailer');\n\n// 1. 自动备份项目\nfunction backupProject() {\n    const projectPath = '/path/to/your/project';\n    const backupPath = `/backups/project-${new Date().toISOString().split('T')[0]}.tar.gz`;\n    \n    exec(`tar -czf ${backupPath} ${projectPath}`, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`备份失败: ${error}`);\n            return;\n        }\n        console.log(`项目备份完成: ${backupPath}`);\n    });\n}\n\n// 2. 清理临时文件\nfunction cleanupTempFiles() {\n    const tempDirs = [\n        '/tmp',\n        './node_modules/.cache',\n        './dist',\n        './.next/cache'\n    ];\n    \n    tempDirs.forEach(dir => {\n        if (fs.existsSync(dir)) {\n            exec(`find ${dir} -type f -mtime +7 -delete`, (error) => {\n                if (!error) {\n                    console.log(`清理完成: ${dir}`);\n                }\n            });\n        }\n    });\n}\n\n// 3. 检查服务状态\nfunction checkServiceHealth() {\n    const services = [\n        'http://localhost:3000/health',\n        'http://localhost:8080/api/health',\n        'http://localhost:5432' // PostgreSQL\n    ];\n    \n    services.forEach(service => {\n        exec(`curl -f ${service}`, (error, stdout, stderr) => {\n            if (error) {\n                console.error(`服务异常: ${service}`);\n                sendAlert(`服务 ${service} 无法访问`);\n            } else {\n                console.log(`服务正常: ${service}`);\n            }\n        });\n    });\n}\n\n// 4. 发送告警邮件\nfunction sendAlert(message) {\n    const transporter = nodemailer.createTransporter({\n        service: 'gmail',\n        auth: {\n            user: 'your-email@gmail.com',\n            pass: 'your-app-password'\n        }\n    });\n    \n    const mailOptions = {\n        from: 'your-email@gmail.com',\n        to: 'admin@yourcompany.com',\n        subject: '系统告警',\n        text: message\n    };\n    \n    transporter.sendMail(mailOptions, (error, info) => {\n        if (error) {\n            console.error('邮件发送失败:', error);\n        } else {\n            console.log('告警邮件已发送:', info.response);\n        }\n    });\n}\n\n// 5. 定时任务调度\n// 每天凌晨2点备份\ncron.schedule('0 2 * * *', () => {\n    console.log('开始执行每日备份...');\n    backupProject();\n});\n\n// 每小时清理临时文件\ncron.schedule('0 * * * *', () => {\n    console.log('开始清理临时文件...');\n    cleanupTempFiles();\n});\n\n// 每5分钟检查服务状态\ncron.schedule('*/5 * * * *', () => {\n    checkServiceHealth();\n});\n\n// 工作日早上9点提醒\ncron.schedule('0 9 * * 1-5', () => {\n    console.log('新的一天开始了！记得查看今天的任务清单。');\n});\n\nconsole.log('自动化脚本已启动...');"
  }
}
