{
  "zshConfiguration": {
    "title": "Zsh + Oh My Zsh 配置",
    "language": "bash",
    "code": "# 安装Zsh (macOS)\nbrew install zsh\n\n# 安装Oh My Zsh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# 设置为默认Shell\nchsh -s $(which zsh)\n\n# ~/.zshrc 配置\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# 主题设置\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n\n# 插件配置\nplugins=(\n    git\n    zsh-autosuggestions\n    zsh-syntax-highlighting\n    z\n    docker\n    node\n    npm\n    yarn\n    vscode\n)\n\nsource $ZSH/oh-my-zsh.sh\n\n# 自定义别名\nalias ll=\"ls -la\"\nalias la=\"ls -A\"\nalias l=\"ls -CF\"\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias grep=\"grep --color=auto\"\nalias fgrep=\"fgrep --color=auto\"\nalias egrep=\"egrep --color=auto\"\n\n# Git别名\nalias gs=\"git status\"\nalias ga=\"git add\"\nalias gc=\"git commit\"\nalias gp=\"git push\"\nalias gl=\"git pull\"\nalias gd=\"git diff\"\nalias gb=\"git branch\"\nalias gco=\"git checkout\"\n\n# 安装插件\n# zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# zsh-syntax-highlighting  \ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# powerlevel10k主题\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k"
  },
  "powershellConfiguration": {
    "title": "PowerShell 配置",
    "language": "powershell",
    "code": "# 安装PowerShell 7\n# Windows\nwinget install Microsoft.PowerShell\n\n# macOS\nbrew install --cask powershell\n\n# Linux\nwget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt-get update\nsudo apt-get install -y powershell\n\n# PowerShell配置文件 ($PROFILE)\n# 创建配置文件\nif (!(Test-Path -Path $PROFILE)) {\n    New-Item -ItemType File -Path $PROFILE -Force\n}\n\n# 编辑配置文件\nnotepad $PROFILE\n\n# 配置内容示例\n# 设置执行策略\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# 导入模块\nImport-Module PSReadLine\nImport-Module posh-git\n\n# PSReadLine配置\nSet-PSReadLineOption -PredictionSource History\nSet-PSReadLineOption -PredictionViewStyle ListView\nSet-PSReadLineOption -EditMode Windows\n\n# 自定义函数\nfunction Get-GitStatus { git status }\nSet-Alias -Name gs -Value Get-GitStatus\n\nfunction Get-GitLog { git log --oneline -10 }\nSet-Alias -Name gl -Value Get-GitLog\n\nfunction Open-CurrentDirectory { explorer . }\nSet-Alias -Name open -Value Open-CurrentDirectory\n\n# 快速导航\nfunction Set-LocationUp { Set-Location .. }\nSet-Alias -Name .. -Value Set-LocationUp\n\nfunction Set-LocationHome { Set-Location ~ }\nSet-Alias -Name ~ -Value Set-LocationHome\n\n# 快速编辑配置\nfunction Edit-Profile { code $PROFILE }\n\n# 重新加载配置\nfunction Reload-Profile { . $PROFILE }"
  },
  "terminalThemes": {
    "title": "终端主题配置",
    "language": "json",
    "code": "// Windows Terminal settings.json\n{\n    \"defaultProfile\": \"{574e775e-4f2a-5b96-ac1e-a2962a402336}\",\n    \"profiles\": {\n        \"defaults\": {\n            \"fontFace\": \"Cascadia Code PL\",\n            \"fontSize\": 12,\n            \"cursorShape\": \"bar\",\n            \"colorScheme\": \"One Half Dark\"\n        },\n        \"list\": [\n            {\n                \"guid\": \"{574e775e-4f2a-5b96-ac1e-a2962a402336}\",\n                \"name\": \"PowerShell\",\n                \"source\": \"Windows.Terminal.PowershellCore\",\n                \"colorScheme\": \"Campbell Powershell\",\n                \"startingDirectory\": \"%USERPROFILE%\"\n            },\n            {\n                \"guid\": \"{2c4de342-38b7-51cf-b940-2309a097f518}\",\n                \"name\": \"Ubuntu\",\n                \"source\": \"Windows.Terminal.Wsl\",\n                \"colorScheme\": \"Ubuntu\"\n            }\n        ]\n    },\n    \"schemes\": [\n        {\n            \"name\": \"One Half Dark\",\n            \"black\": \"#282c34\",\n            \"red\": \"#e06c75\",\n            \"green\": \"#98c379\",\n            \"yellow\": \"#e5c07b\",\n            \"blue\": \"#61afef\",\n            \"purple\": \"#c678dd\",\n            \"cyan\": \"#56b6c2\",\n            \"white\": \"#dcdfe4\",\n            \"brightBlack\": \"#5a6374\",\n            \"brightRed\": \"#e06c75\",\n            \"brightGreen\": \"#98c379\",\n            \"brightYellow\": \"#e5c07b\",\n            \"brightBlue\": \"#61afef\",\n            \"brightPurple\": \"#c678dd\",\n            \"brightCyan\": \"#56b6c2\",\n            \"brightWhite\": \"#dcdfe4\",\n            \"background\": \"#282c34\",\n            \"foreground\": \"#dcdfe4\"\n        }\n    ],\n    \"actions\": [\n        { \"command\": \"copy\", \"keys\": \"ctrl+c\" },\n        { \"command\": \"paste\", \"keys\": \"ctrl+v\" },\n        { \"command\": \"newTab\", \"keys\": \"ctrl+t\" },\n        { \"command\": \"closeTab\", \"keys\": \"ctrl+w\" },\n        { \"command\": \"splitPane\", \"keys\": \"alt+shift+d\" }\n    ]\n}\n\n// iTerm2 配置 (macOS)\n// Preferences > Profiles > Colors\n// 导入配色方案: One Dark, Solarized Dark, Dracula\n\n// Hyper终端配置\n// ~/.hyper.js\nmodule.exports = {\n    config: {\n        fontSize: 14,\n        fontFamily: '\"Fira Code\", \"DejaVu Sans Mono\", Consolas, monospace',\n        cursorColor: 'rgba(248,28,229,0.8)',\n        cursorShape: 'BLOCK',\n        foregroundColor: '#fff',\n        backgroundColor: '#000',\n        borderColor: '#333',\n        css: '',\n        termCSS: '',\n        showHamburgerMenu: '',\n        showWindowControls: '',\n        padding: '12px 14px',\n        colors: {\n            black: '#000000',\n            red: '#ff0000',\n            green: '#33ff00',\n            yellow: '#ffff00',\n            blue: '#0066ff',\n            magenta: '#cc00ff',\n            cyan: '#00ffff',\n            white: '#d0d0d0',\n            lightBlack: '#808080',\n            lightRed: '#ff0000',\n            lightGreen: '#33ff00',\n            lightYellow: '#ffff00',\n            lightBlue: '#0066ff',\n            lightMagenta: '#cc00ff',\n            lightCyan: '#00ffff',\n            lightWhite: '#ffffff'\n        },\n        shell: '',\n        shellArgs: ['--login'],\n        env: {},\n        bell: 'SOUND',\n        copyOnSelect: false\n    },\n    plugins: [\n        'hyper-one-dark',\n        'hyper-tabs-enhanced',\n        'hyper-search',\n        'hyper-pane'\n    ]\n}"
  },
  "modernCliTools": {
    "title": "现代化CLI工具",
    "language": "bash",
    "code": "# 文件和目录操作\n# exa - 现代化的ls替代品\nbrew install exa\nalias ls=\"exa\"\nalias ll=\"exa -l\"\nalias la=\"exa -la\"\nalias tree=\"exa --tree\"\n\n# bat - 现代化的cat替代品\nbrew install bat\nalias cat=\"bat\"\n\n# fd - 现代化的find替代品\nbrew install fd\nalias find=\"fd\"\n\n# ripgrep - 现代化的grep替代品\nbrew install ripgrep\nalias grep=\"rg\"\n\n# fzf - 模糊查找工具\nbrew install fzf\n# 安装shell集成\n$(brew --prefix)/opt/fzf/install\n\n# 系统监控\n# htop - 现代化的top替代品\nbrew install htop\n\n# glances - 系统监控工具\nbrew install glances\n\n# ncdu - 磁盘使用分析\nbrew install ncdu\n\n# 网络工具\n# httpie - 现代化的curl替代品\nbrew install httpie\n\n# 使用示例\nhttp GET https://api.github.com/users/octocat\nhttp POST https://httpbin.org/post name=John age:=30\n\n# dog - 现代化的dig替代品\nbrew install dog\n\n# 文本处理\n# jq - JSON处理工具\nbrew install jq\n\n# 使用示例\necho '{\"name\":\"John\",\"age\":30}' | jq '.name'\ncurl -s https://api.github.com/users/octocat | jq '.login'\n\n# yq - YAML处理工具\nbrew install yq\n\n# 版本控制\n# delta - Git diff增强\nbrew install git-delta\n\n# Git配置\ngit config --global core.pager delta\ngit config --global interactive.diffFilter 'delta --color-only'\n\n# lazygit - Git TUI\nbrew install lazygit\n\n# 文件同步\n# rsync增强版\nbrew install rsync\n\n# 现代化的wget\nbrew install wget2"
  },
  "developmentTools": {
    "title": "开发专用工具",
    "language": "bash",
    "code": "# Node.js工具\n# nvm - Node版本管理\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install node\nnvm use 16.14.0\nnvm alias default 16.14.0\n\n# yarn - 包管理器\nnpm install -g yarn\n\n# pnpm - 快速包管理器\nnpm install -g pnpm\n\n# Python工具\n# pyenv - Python版本管理\nbrew install pyenv\npyenv install 3.9.0\npyenv global 3.9.0\n\n# pipenv - Python包管理\npip install pipenv\n\n# poetry - Python依赖管理\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Ruby工具\n# rbenv - Ruby版本管理\nbrew install rbenv\nrbenv install 3.0.0\nrbenv global 3.0.0\n\n# Java工具\n# jenv - Java版本管理\nbrew install jenv\njenv add /Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home\njenv global 11.0\n\n# Docker工具\n# docker-compose\nbrew install docker-compose\n\n# lazydocker - Docker TUI\nbrew install lazydocker\n\n# 数据库工具\n# mycli - MySQL客户端\npip install mycli\n\n# pgcli - PostgreSQL客户端\npip install pgcli\n\n# redis-cli\nbrew install redis\n\n# 云服务工具\n# aws-cli\nbrew install awscli\n\n# gcloud\nbrew install --cask google-cloud-sdk\n\n# kubectl\nbrew install kubectl\n\n# helm\nbrew install helm\n\n# 编辑器\n# micro - 现代化的nano替代品\nbrew install micro\n\n# neovim - Vim的现代化版本\nbrew install neovim\nalias vim=\"nvim\"\nalias vi=\"nvim\""
  },
  "shellScripts": {
    "title": "实用Shell脚本",
    "language": "bash",
    "code": "#!/bin/bash\n# 项目初始化脚本\n\n# 颜色定义\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 日志函数\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# 检查命令是否存在\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# 安装Node.js项目依赖\nsetup_node_project() {\n    local project_name=$1\n    \n    log_info \"创建Node.js项目: $project_name\"\n    \n    mkdir -p \"$project_name\"\n    cd \"$project_name\"\n    \n    # 初始化package.json\n    npm init -y\n    \n    # 安装常用依赖\n    log_info \"安装开发依赖...\"\n    npm install -D eslint prettier husky lint-staged\n    \n    # 创建基础文件结构\n    mkdir -p src tests docs\n    \n    # 创建.gitignore\n    cat > .gitignore << EOF\nnode_modules/\ndist/\nbuild/\n.env\n.env.local\n.DS_Store\n*.log\nEOF\n    \n    # 创建README.md\n    cat > README.md << EOF\n# $project_name\n\n## 安装\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## 开发\n\\`\\`\\`bash\nnpm run dev\n\\`\\`\\`\n\n## 构建\n\\`\\`\\`bash\nnpm run build\n\\`\\`\\`\nEOF\n    \n    log_success \"Node.js项目 $project_name 创建完成\"\n}\n\n# 创建React项目\nsetup_react_project() {\n    local project_name=$1\n    \n    log_info \"创建React项目: $project_name\"\n    \n    if command_exists npx; then\n        npx create-react-app \"$project_name\" --template typescript\n        cd \"$project_name\"\n        \n        # 安装额外依赖\n        npm install -D @types/node @types/react @types/react-dom\n        \n        log_success \"React项目 $project_name 创建完成\"\n    else\n        log_error \"npx 未安装，请先安装Node.js\"\n        return 1\n    fi\n}\n\n# 系统清理脚本\ncleanup_system() {\n    log_info \"开始系统清理...\"\n    \n    # 清理npm缓存\n    if command_exists npm; then\n        log_info \"清理npm缓存...\"\n        npm cache clean --force\n    fi\n    \n    # 清理yarn缓存\n    if command_exists yarn; then\n        log_info \"清理yarn缓存...\"\n        yarn cache clean\n    fi\n    \n    # 清理Docker\n    if command_exists docker; then\n        log_info \"清理Docker...\"\n        docker system prune -f\n        docker volume prune -f\n    fi\n    \n    # 清理Homebrew缓存 (macOS)\n    if command_exists brew; then\n        log_info \"清理Homebrew缓存...\"\n        brew cleanup\n    fi\n    \n    log_success \"系统清理完成\"\n}\n\n# 备份重要文件\nbackup_configs() {\n    local backup_dir=\"$HOME/config-backup-$(date +%Y%m%d)\"\n    \n    log_info \"备份配置文件到: $backup_dir\"\n    \n    mkdir -p \"$backup_dir\"\n    \n    # 备份shell配置\n    [ -f \"$HOME/.zshrc\" ] && cp \"$HOME/.zshrc\" \"$backup_dir/\"\n    [ -f \"$HOME/.bashrc\" ] && cp \"$HOME/.bashrc\" \"$backup_dir/\"\n    [ -f \"$HOME/.bash_profile\" ] && cp \"$HOME/.bash_profile\" \"$backup_dir/\"\n    \n    # 备份Git配置\n    [ -f \"$HOME/.gitconfig\" ] && cp \"$HOME/.gitconfig\" \"$backup_dir/\"\n    \n    # 备份SSH配置\n    [ -d \"$HOME/.ssh\" ] && cp -r \"$HOME/.ssh\" \"$backup_dir/\"\n    \n    # 备份VS Code配置\n    if [ -d \"$HOME/Library/Application Support/Code/User\" ]; then\n        cp -r \"$HOME/Library/Application Support/Code/User\" \"$backup_dir/vscode\"\n    fi\n    \n    log_success \"配置文件备份完成\"\n}\n\n# 主函数\nmain() {\n    case \"$1\" in\n        \"node\")\n            setup_node_project \"$2\"\n            ;;\n        \"react\")\n            setup_react_project \"$2\"\n            ;;\n        \"cleanup\")\n            cleanup_system\n            ;;\n        \"backup\")\n            backup_configs\n            ;;\n        *)\n            echo \"用法: $0 {node|react|cleanup|backup} [project_name]\"\n            echo \"  node <name>    - 创建Node.js项目\"\n            echo \"  react <name>   - 创建React项目\"\n            echo \"  cleanup        - 系统清理\"\n            echo \"  backup         - 备份配置文件\"\n            exit 1\n            ;;\n    esac\n}\n\n# 执行主函数\nmain \"$@\""
  }
}
