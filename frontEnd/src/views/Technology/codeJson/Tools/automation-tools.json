{
    "npmScripts": {
        "title": "npm scripts 自动化",
        "language": "json",
        "code": "// package.json 脚本配置\n{\n  \"scripts\": {\n    // 开发相关\n    \"dev\": \"vite\",\n    \"dev:host\": \"vite --host\",\n    \"dev:https\": \"vite --https\",\n    \n    // 构建相关\n    \"build\": \"vite build\",\n    \"build:dev\": \"vite build --mode development\",\n    \"build:staging\": \"vite build --mode staging\",\n    \"build:prod\": \"vite build --mode production\",\n    \n    // 测试相关\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:e2e\": \"cypress run\",\n    \n    // 代码质量\n    \"lint\": \"eslint src/\",\n    \"lint:fix\": \"eslint src/ --fix\",\n    \"format\": \"prettier --write src/\",\n    \"type-check\": \"tsc --noEmit\",\n    \n    // 部署相关\n    \"deploy\": \"npm run build && npm run deploy:upload\",\n    \"deploy:staging\": \"npm run build:staging && npm run deploy:staging:upload\",\n    \"deploy:prod\": \"npm run build:prod && npm run deploy:prod:upload\",\n    \n    // 工具脚本\n    \"clean\": \"rimraf dist\",\n    \"analyze\": \"npm run build && npx vite-bundle-analyzer\",\n    \"preview\": \"vite preview\",\n    \n    // 并行执行\n    \"build:parallel\": \"npm-run-all --parallel build:css build:js\",\n    \"build:series\": \"npm-run-all build:clean build:compile build:minify\"\n  }\n}"
    },
    "gulpAutomation": {
        "title": "Gulp 任务自动化",
        "language": "javascript",
        "code": "// 安装Gulp\n// npm install --save-dev gulp\n\n// gulpfile.js\nconst gulp = require('gulp')\nconst sass = require('gulp-sass')(require('sass'))\nconst uglify = require('gulp-uglify')\nconst concat = require('gulp-concat')\nconst imagemin = require('gulp-imagemin')\nconst browserSync = require('browser-sync').create()\nconst del = require('del')\n\n// 路径配置\nconst paths = {\n  styles: {\n    src: 'src/scss/**/*.scss',\n    dest: 'dist/css/'\n  },\n  scripts: {\n    src: 'src/js/**/*.js',\n    dest: 'dist/js/'\n  },\n  images: {\n    src: 'src/images/**/*',\n    dest: 'dist/images/'\n  },\n  html: {\n    src: 'src/**/*.html',\n    dest: 'dist/'\n  }\n}\n\n// 清理任务\nfunction clean() {\n  return del(['dist'])\n}\n\n// 样式处理\nfunction styles() {\n  return gulp.src(paths.styles.src)\n    .pipe(sass({ outputStyle: 'compressed' }).on('error', sass.logError))\n    .pipe(gulp.dest(paths.styles.dest))\n    .pipe(browserSync.stream())\n}\n\n// 脚本处理\nfunction scripts() {\n  return gulp.src(paths.scripts.src)\n    .pipe(concat('main.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest(paths.scripts.dest))\n}\n\n// 图片优化\nfunction images() {\n  return gulp.src(paths.images.src)\n    .pipe(imagemin([\n      imagemin.gifsicle({ interlaced: true }),\n      imagemin.mozjpeg({ quality: 75, progressive: true }),\n      imagemin.optipng({ optimizationLevel: 5 }),\n      imagemin.svgo({\n        plugins: [\n          { removeViewBox: true },\n          { cleanupIDs: false }\n        ]\n      })\n    ]))\n    .pipe(gulp.dest(paths.images.dest))\n}\n\n// 复制HTML文件\nfunction copy() {\n  return gulp.src(paths.html.src)\n    .pipe(gulp.dest(paths.html.dest))\n}\n\n// 监听文件变化\nfunction watch() {\n  browserSync.init({\n    server: {\n      baseDir: './dist'\n    }\n  })\n  \n  gulp.watch(paths.styles.src, styles)\n  gulp.watch(paths.scripts.src, scripts).on('change', browserSync.reload)\n  gulp.watch(paths.html.src, copy).on('change', browserSync.reload)\n  gulp.watch(paths.images.src, images)\n}\n\n// 导出任务\nexports.clean = clean\nexports.styles = styles\nexports.scripts = scripts\nexports.images = images\nexports.copy = copy\nexports.watch = watch\n\n// 组合任务\nexports.build = gulp.series(clean, gulp.parallel(styles, scripts, images, copy))\nexports.dev = gulp.series(exports.build, watch)\nexports.default = exports.dev"
    },
    "customBuildScript": {
        "title": "自定义构建脚本",
        "language": "javascript",
        "code": "// scripts/build.js - 自定义构建脚本\nconst fs = require('fs')\nconst path = require('path')\nconst { execSync } = require('child_process')\nconst chalk = require('chalk')\n\nclass BuildTool {\n  constructor(options = {}) {\n    this.options = {\n      srcDir: 'src',\n      distDir: 'dist',\n      mode: 'production',\n      ...options\n    }\n  }\n  \n  // 清理输出目录\n  clean() {\n    console.log(chalk.blue('🧹 清理输出目录...'))\n    if (fs.existsSync(this.options.distDir)) {\n      fs.rmSync(this.options.distDir, { recursive: true })\n    }\n    fs.mkdirSync(this.options.distDir, { recursive: true })\n  }\n  \n  // 构建CSS\n  buildCSS() {\n    console.log(chalk.green('🎨 构建CSS...'))\n    try {\n      execSync(`sass ${this.options.srcDir}/scss:${this.options.distDir}/css --style=compressed`, {\n        stdio: 'inherit'\n      })\n    } catch (error) {\n      console.error(chalk.red('CSS构建失败:'), error.message)\n      process.exit(1)\n    }\n  }\n  \n  // 构建JavaScript\n  buildJS() {\n    console.log(chalk.yellow('📦 构建JavaScript...'))\n    try {\n      execSync(`webpack --mode=${this.options.mode}`, {\n        stdio: 'inherit'\n      })\n    } catch (error) {\n      console.error(chalk.red('JavaScript构建失败:'), error.message)\n      process.exit(1)\n    }\n  }\n  \n  // 复制静态资源\n  copyAssets() {\n    console.log(chalk.cyan('📁 复制静态资源...'))\n    const assetsDir = path.join(this.options.srcDir, 'assets')\n    const targetDir = path.join(this.options.distDir, 'assets')\n    \n    if (fs.existsSync(assetsDir)) {\n      this.copyDirectory(assetsDir, targetDir)\n    }\n  }\n  \n  // 递归复制目录\n  copyDirectory(src, dest) {\n    if (!fs.existsSync(dest)) {\n      fs.mkdirSync(dest, { recursive: true })\n    }\n    \n    const files = fs.readdirSync(src)\n    \n    files.forEach(file => {\n      const srcPath = path.join(src, file)\n      const destPath = path.join(dest, file)\n      \n      if (fs.statSync(srcPath).isDirectory()) {\n        this.copyDirectory(srcPath, destPath)\n      } else {\n        fs.copyFileSync(srcPath, destPath)\n      }\n    })\n  }\n  \n  // 生成构建报告\n  generateReport() {\n    console.log(chalk.magenta('📊 生成构建报告...'))\n    const report = {\n      buildTime: new Date().toISOString(),\n      mode: this.options.mode,\n      files: this.getFileList(this.options.distDir)\n    }\n    \n    fs.writeFileSync(\n      path.join(this.options.distDir, 'build-report.json'),\n      JSON.stringify(report, null, 2)\n    )\n  }\n  \n  // 获取文件列表\n  getFileList(dir) {\n    const files = []\n    const items = fs.readdirSync(dir)\n    \n    items.forEach(item => {\n      const fullPath = path.join(dir, item)\n      const stat = fs.statSync(fullPath)\n      \n      if (stat.isDirectory()) {\n        files.push(...this.getFileList(fullPath))\n      } else {\n        files.push({\n          path: path.relative(this.options.distDir, fullPath),\n          size: stat.size,\n          modified: stat.mtime\n        })\n      }\n    })\n    \n    return files\n  }\n  \n  // 执行完整构建\n  async build() {\n    const startTime = Date.now()\n    \n    console.log(chalk.bold.blue('🚀 开始构建...'))\n    \n    try {\n      this.clean()\n      this.buildCSS()\n      this.buildJS()\n      this.copyAssets()\n      this.generateReport()\n      \n      const duration = Date.now() - startTime\n      console.log(chalk.bold.green(`✅ 构建完成! 耗时: ${duration}ms`))\n    } catch (error) {\n      console.error(chalk.bold.red('❌ 构建失败:'), error.message)\n      process.exit(1)\n    }\n  }\n}\n\n// 使用构建工具\nconst mode = process.argv[2] || 'production'\nconst builder = new BuildTool({ mode })\nbuilder.build()\n\n// package.json 中添加脚本\n// {\n//   \"scripts\": {\n//     \"build:custom\": \"node scripts/build.js\"\n//   }\n// }"
    },
    "plopCodeGenerator": {
        "title": "Plop.js 代码生成器",
        "language": "javascript",
        "code": "// 安装Plop.js\n// npm install --save-dev plop\n\n// plopfile.js\nmodule.exports = function (plop) {\n  // React组件生成器\n  plop.setGenerator('component', {\n    description: '创建React组件',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: '组件名称:',\n        validate: function (value) {\n          if (/.+/.test(value)) {\n            return true\n          }\n          return '组件名称是必需的'\n        }\n      },\n      {\n        type: 'confirm',\n        name: 'wantProps',\n        message: '是否需要Props接口?',\n        default: true\n      },\n      {\n        type: 'confirm',\n        name: 'wantStyles',\n        message: '是否需要样式文件?',\n        default: true\n      }\n    ],\n    actions: function(data) {\n      const actions = []\n      \n      // 创建组件文件\n      actions.push({\n        type: 'add',\n        path: 'src/components/{{pascalCase name}}/{{pascalCase name}}.tsx',\n        templateFile: 'plop-templates/component.hbs'\n      })\n      \n      // 创建Props接口\n      if (data.wantProps) {\n        actions.push({\n          type: 'add',\n          path: 'src/components/{{pascalCase name}}/types.ts',\n          templateFile: 'plop-templates/types.hbs'\n        })\n      }\n      \n      // 创建样式文件\n      if (data.wantStyles) {\n        actions.push({\n          type: 'add',\n          path: 'src/components/{{pascalCase name}}/{{pascalCase name}}.module.scss',\n          templateFile: 'plop-templates/styles.hbs'\n        })\n      }\n      \n      // 创建index文件\n      actions.push({\n        type: 'add',\n        path: 'src/components/{{pascalCase name}}/index.ts',\n        templateFile: 'plop-templates/index.hbs'\n      })\n      \n      return actions\n    }\n  })\n  \n  // API生成器\n  plop.setGenerator('api', {\n    description: '创建API服务',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: 'API服务名称:'\n      },\n      {\n        type: 'input',\n        name: 'baseUrl',\n        message: 'API基础URL:',\n        default: '/api'\n      }\n    ],\n    actions: [\n      {\n        type: 'add',\n        path: 'src/services/{{camelCase name}}.ts',\n        templateFile: 'plop-templates/api.hbs'\n      },\n      {\n        type: 'add',\n        path: 'src/types/{{camelCase name}}.ts',\n        templateFile: 'plop-templates/api-types.hbs'\n      }\n    ]\n  })\n  \n  // 页面生成器\n  plop.setGenerator('page', {\n    description: '创建页面组件',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: '页面名称:'\n      },\n      {\n        type: 'input',\n        name: 'route',\n        message: '路由路径:',\n        default: function(data) {\n          return `/${data.name.toLowerCase()}`\n        }\n      }\n    ],\n    actions: [\n      {\n        type: 'add',\n        path: 'src/pages/{{pascalCase name}}/{{pascalCase name}}.tsx',\n        templateFile: 'plop-templates/page.hbs'\n      },\n      {\n        type: 'add',\n        path: 'src/pages/{{pascalCase name}}/{{pascalCase name}}.module.scss',\n        templateFile: 'plop-templates/page-styles.hbs'\n      },\n      {\n        type: 'append',\n        path: 'src/router/routes.ts',\n        pattern: '// PLOP_INJECT_ROUTE',\n        template: '  { path: \"{{route}}\", component: lazy(() => import(\"../pages/{{pascalCase name}}/{{pascalCase name}}\")) },'\n      }\n    ]\n  })\n}\n\n// 使用Plop生成代码\n// npx plop component\n// npx plop api\n// npx plop page"
    },
    "customCodeGenerator": {
        "title": "自定义代码生成脚本",
        "language": "javascript",
        "code": "// scripts/generate.js\nconst fs = require('fs')\nconst path = require('path')\nconst inquirer = require('inquirer')\nconst chalk = require('chalk')\n\nclass CodeGenerator {\n  constructor() {\n    this.templatesDir = path.join(__dirname, '../templates')\n    this.srcDir = path.join(__dirname, '../src')\n  }\n  \n  // 生成React组件\n  async generateComponent() {\n    const answers = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'name',\n        message: '组件名称:',\n        validate: input => input ? true : '组件名称不能为空'\n      },\n      {\n        type: 'list',\n        name: 'type',\n        message: '组件类型:',\n        choices: ['functional', 'class']\n      },\n      {\n        type: 'confirm',\n        name: 'withProps',\n        message: '是否需要Props接口?',\n        default: true\n      }\n    ])\n    \n    const componentDir = path.join(this.srcDir, 'components', answers.name)\n    \n    // 创建组件目录\n    if (!fs.existsSync(componentDir)) {\n      fs.mkdirSync(componentDir, { recursive: true })\n    }\n    \n    // 生成组件文件\n    const componentTemplate = this.getTemplate('component', answers.type)\n    const componentContent = this.renderTemplate(componentTemplate, answers)\n    \n    fs.writeFileSync(\n      path.join(componentDir, `${answers.name}.tsx`),\n      componentContent\n    )\n    \n    // 生成样式文件\n    const styleContent = `.${answers.name.toLowerCase()} {\\n  /* 组件样式 */\\n}`\n    fs.writeFileSync(\n      path.join(componentDir, `${answers.name}.module.scss`),\n      styleContent\n    )\n    \n    // 生成index文件\n    const indexContent = `export { default } from './${answers.name}'`\n    fs.writeFileSync(\n      path.join(componentDir, 'index.ts'),\n      indexContent\n    )\n    \n    console.log(chalk.green(`✅ 组件 ${answers.name} 创建成功!`))\n  }\n  \n  // 生成自定义Hook\n  async generateHook() {\n    const answers = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Hook名称 (不含use前缀):'\n      },\n      {\n        type: 'list',\n        name: 'category',\n        message: 'Hook分类:',\n        choices: ['state', 'effect', 'context', 'utility']\n      }\n    ])\n    \n    const hookName = `use${answers.name}`\n    const hooksDir = path.join(this.srcDir, 'hooks')\n    \n    if (!fs.existsSync(hooksDir)) {\n      fs.mkdirSync(hooksDir, { recursive: true })\n    }\n    \n    const hookTemplate = this.getTemplate('hook', answers.category)\n    const hookContent = this.renderTemplate(hookTemplate, {\n      ...answers,\n      hookName\n    })\n    \n    fs.writeFileSync(\n      path.join(hooksDir, `${hookName}.ts`),\n      hookContent\n    )\n    \n    console.log(chalk.green(`✅ Hook ${hookName} 创建成功!`))\n  }\n  \n  // 生成API服务\n  async generateService() {\n    const answers = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'name',\n        message: '服务名称:'\n      },\n      {\n        type: 'input',\n        name: 'baseUrl',\n        message: 'API基础URL:',\n        default: '/api'\n      }\n    ])\n    \n    const servicesDir = path.join(this.srcDir, 'services')\n    \n    if (!fs.existsSync(servicesDir)) {\n      fs.mkdirSync(servicesDir, { recursive: true })\n    }\n    \n    const serviceTemplate = this.getTemplate('service')\n    const serviceContent = this.renderTemplate(serviceTemplate, answers)\n    \n    fs.writeFileSync(\n      path.join(servicesDir, `${answers.name}Service.ts`),\n      serviceContent\n    )\n    \n    console.log(chalk.green(`✅ 服务 ${answers.name}Service 创建成功!`))\n  }\n  \n  // 获取模板\n  getTemplate(type, subType = '') {\n    const templatePath = path.join(\n      this.templatesDir,\n      `${type}${subType ? `-${subType}` : ''}.template`\n    )\n    \n    if (fs.existsSync(templatePath)) {\n      return fs.readFileSync(templatePath, 'utf8')\n    }\n    \n    // 返回默认模板\n    return this.getDefaultTemplate(type, subType)\n  }\n  \n  // 渲染模板\n  renderTemplate(template, data) {\n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n      return data[key] || match\n    })\n  }\n  \n  // 获取默认模板\n  getDefaultTemplate(type, subType) {\n    const templates = {\n      'component-functional': `import React from 'react'\nimport styles from './{{name}}.module.scss'\n\ninterface {{name}}Props {\n  // 定义Props\n}\n\nconst {{name}}: React.FC<{{name}}Props> = (props) => {\n  return (\n    <div className={styles.{{name.toLowerCase()}}>\n      {{name}} Component\n    </div>\n  )\n}\n\nexport default {{name}}`,\n      'hook-state': `import { useState } from 'react'\n\nexport const {{hookName}} = () => {\n  const [state, setState] = useState()\n  \n  return {\n    state,\n    setState\n  }\n}`,\n      'service': `import axios from 'axios'\n\nconst API_BASE_URL = '{{baseUrl}}'\n\nexport class {{name}}Service {\n  static async getAll() {\n    const response = await axios.get(\\`\\${API_BASE_URL}/{{name.toLowerCase()}}\\`)\n    return response.data\n  }\n  \n  static async getById(id: string) {\n    const response = await axios.get(\\`\\${API_BASE_URL}/{{name.toLowerCase()}}/\\${id}\\`)\n    return response.data\n  }\n  \n  static async create(data: any) {\n    const response = await axios.post(\\`\\${API_BASE_URL}/{{name.toLowerCase()}}\\`, data)\n    return response.data\n  }\n  \n  static async update(id: string, data: any) {\n    const response = await axios.put(\\`\\${API_BASE_URL}/{{name.toLowerCase()}}/\\${id}\\`, data)\n    return response.data\n  }\n  \n  static async delete(id: string) {\n    const response = await axios.delete(\\`\\${API_BASE_URL}/{{name.toLowerCase()}}/\\${id}\\`)\n    return response.data\n  }\n}`\n    }\n    \n    return templates[`${type}-${subType}`] || templates[type] || ''\n  }\n}\n\n// CLI入口\nasync function main() {\n  const generator = new CodeGenerator()\n  \n  const { action } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'action',\n      message: '选择生成类型:',\n      choices: [\n        { name: '生成组件', value: 'component' },\n        { name: '生成Hook', value: 'hook' },\n        { name: '生成服务', value: 'service' }\n      ]\n    }\n  ])\n  \n  switch (action) {\n    case 'component':\n      await generator.generateComponent()\n      break\n    case 'hook':\n      await generator.generateHook()\n      break\n    case 'service':\n      await generator.generateService()\n      break\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error)\n}\n\n// package.json 脚本\n// {\n//   \"scripts\": {\n//     \"g:component\": \"node scripts/generate.js component\",\n//     \"g:hook\": \"node scripts/generate.js hook\",\n//     \"g:service\": \"node scripts/generate.js service\"\n//   }\n// }\n\n// 使用示例\n// npm run g:component MyComponent\n// npm run g:hook MyHook\n// npm run g:service User"
    }
}
