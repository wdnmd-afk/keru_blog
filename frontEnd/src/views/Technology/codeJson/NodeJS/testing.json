{
    "jestBasic": {
        "title": "Jest 基本测试",
        "language": "javascript",
        "code": "// 安装 Jest\n// npm install --save-dev jest\n\n// math.js - 被测试的模块\nfunction add(a, b) {\n  return a + b\n}\n\nfunction subtract(a, b) {\n  return a - b\n}\n\nfunction multiply(a, b) {\n  return a * b\n}\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error('除数不能为零')\n  }\n  return a / b\n}\n\nmodule.exports = { add, subtract, multiply, divide }\n\n// math.test.js - 测试文件\nconst { add, subtract, multiply, divide } = require('./math')\n\n// 基本测试\ndescribe('数学运算测试', () => {\n  test('加法运算', () => {\n    expect(add(2, 3)).toBe(5)\n    expect(add(-1, 1)).toBe(0)\n    expect(add(0, 0)).toBe(0)\n  })\n  \n  test('减法运算', () => {\n    expect(subtract(5, 3)).toBe(2)\n    expect(subtract(0, 5)).toBe(-5)\n  })\n  \n  test('乘法运算', () => {\n    expect(multiply(3, 4)).toBe(12)\n    expect(multiply(-2, 3)).toBe(-6)\n  })\n  \n  test('除法运算', () => {\n    expect(divide(10, 2)).toBe(5)\n    expect(divide(7, 2)).toBeCloseTo(3.5)\n  })\n  \n  test('除零异常', () => {\n    expect(() => divide(10, 0)).toThrow('除数不能为零')\n  })\n})\n\n// 运行测试\n// npm test"
    },
    "asyncTesting": {
        "title": "异步测试",
        "language": "javascript",
        "code": "// userService.js - 异步服务\nconst axios = require('axios')\n\nclass UserService {\n  async getUser(id) {\n    try {\n      const response = await axios.get(`/api/users/${id}`)\n      return response.data\n    } catch (error) {\n      throw new Error(`获取用户失败: ${error.message}`)\n    }\n  }\n  \n  async createUser(userData) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userData.email) {\n          resolve({ id: Date.now(), ...userData })\n        } else {\n          reject(new Error('邮箱是必填的'))\n        }\n      }, 100)\n    })\n  }\n}\n\nmodule.exports = UserService\n\n// userService.test.js - 异步测试\nconst UserService = require('./userService')\nconst axios = require('axios')\n\n// Mock axios\njest.mock('axios')\nconst mockedAxios = axios\n\ndescribe('UserService 异步测试', () => {\n  let userService\n  \n  beforeEach(() => {\n    userService = new UserService()\n    jest.clearAllMocks()\n  })\n  \n  // Promise 测试\n  test('获取用户 - Promise', () => {\n    const userData = { id: 1, name: '张三', email: 'zhang@example.com' }\n    mockedAxios.get.mockResolvedValue({ data: userData })\n    \n    return userService.getUser(1).then(user => {\n      expect(user).toEqual(userData)\n      expect(mockedAxios.get).toHaveBeenCalledWith('/api/users/1')\n    })\n  })\n  \n  // async/await 测试\n  test('获取用户 - async/await', async () => {\n    const userData = { id: 1, name: '张三', email: 'zhang@example.com' }\n    mockedAxios.get.mockResolvedValue({ data: userData })\n    \n    const user = await userService.getUser(1)\n    expect(user).toEqual(userData)\n  })\n  \n  // 异常测试\n  test('获取用户失败', async () => {\n    mockedAxios.get.mockRejectedValue(new Error('网络错误'))\n    \n    await expect(userService.getUser(1))\n      .rejects\n      .toThrow('获取用户失败: 网络错误')\n  })\n  \n  // 超时测试\n  test('创建用户成功', async () => {\n    const userData = { name: '李四', email: 'li@example.com' }\n    const result = await userService.createUser(userData)\n    \n    expect(result).toMatchObject(userData)\n    expect(result.id).toBeDefined()\n  }, 10000) // 设置超时时间\n})"
    },
    "mockingSpying": {
        "title": "Mock 和 Spy",
        "language": "javascript",
        "code": "// emailService.js - 邮件服务\nclass EmailService {\n  constructor(apiKey) {\n    this.apiKey = apiKey\n  }\n  \n  async sendEmail(to, subject, body) {\n    // 模拟发送邮件\n    console.log(`发送邮件到: ${to}`)\n    return { messageId: 'msg_' + Date.now(), status: 'sent' }\n  }\n}\n\n// notificationService.js - 通知服务\nconst EmailService = require('./emailService')\n\nclass NotificationService {\n  constructor(emailService) {\n    this.emailService = emailService\n  }\n  \n  async sendWelcomeEmail(user) {\n    const subject = '欢迎注册'\n    const body = `欢迎 ${user.name}！`\n    \n    try {\n      const result = await this.emailService.sendEmail(user.email, subject, body)\n      console.log('欢迎邮件发送成功')\n      return result\n    } catch (error) {\n      console.error('邮件发送失败:', error)\n      throw error\n    }\n  }\n}\n\nmodule.exports = NotificationService\n\n// notificationService.test.js - Mock 测试\nconst NotificationService = require('./notificationService')\nconst EmailService = require('./emailService')\n\n// Mock 整个模块\njest.mock('./emailService')\n\ndescribe('NotificationService Mock 测试', () => {\n  let notificationService\n  let mockEmailService\n  \n  beforeEach(() => {\n    // 创建 Mock 实例\n    mockEmailService = new EmailService()\n    notificationService = new NotificationService(mockEmailService)\n  })\n  \n  test('发送欢迎邮件', async () => {\n    // 设置 Mock 返回值\n    const mockResult = { messageId: 'test_123', status: 'sent' }\n    mockEmailService.sendEmail.mockResolvedValue(mockResult)\n    \n    const user = { name: '张三', email: 'zhang@example.com' }\n    const result = await notificationService.sendWelcomeEmail(user)\n    \n    // 验证调用\n    expect(mockEmailService.sendEmail).toHaveBeenCalledWith(\n      'zhang@example.com',\n      '欢迎注册',\n      '欢迎 张三！'\n    )\n    expect(mockEmailService.sendEmail).toHaveBeenCalledTimes(1)\n    expect(result).toEqual(mockResult)\n  })\n  \n  test('邮件发送失败处理', async () => {\n    // Mock 抛出异常\n    mockEmailService.sendEmail.mockRejectedValue(new Error('API 错误'))\n    \n    const user = { name: '李四', email: 'li@example.com' }\n    \n    await expect(notificationService.sendWelcomeEmail(user))\n      .rejects\n      .toThrow('API 错误')\n  })\n})\n\n// Spy 测试示例\ndescribe('Spy 测试', () => {\n  test('监听控制台输出', async () => {\n    const consoleSpy = jest.spyOn(console, 'log').mockImplementation()\n    \n    const emailService = new EmailService('test-key')\n    await emailService.sendEmail('test@example.com', 'Test', 'Body')\n    \n    expect(consoleSpy).toHaveBeenCalledWith('发送邮件到: test@example.com')\n    \n    consoleSpy.mockRestore() // 恢复原始实现\n  })\n})"
    },
    "integrationTesting": {
        "title": "集成测试",
        "language": "javascript",
        "code": "// app.js - Express 应用\nconst express = require('express')\nconst mongoose = require('mongoose')\nconst userRoutes = require('./routes/users')\n\nconst app = express()\n\napp.use(express.json())\napp.use('/api/users', userRoutes)\n\n// 错误处理中间件\napp.use((error, req, res, next) => {\n  res.status(error.status || 500).json({\n    error: error.message\n  })\n})\n\nmodule.exports = app\n\n// routes/users.js - 用户路由\nconst express = require('express')\nconst User = require('../models/User')\nconst router = express.Router()\n\n// 获取所有用户\nrouter.get('/', async (req, res, next) => {\n  try {\n    const users = await User.find()\n    res.json(users)\n  } catch (error) {\n    next(error)\n  }\n})\n\n// 创建用户\nrouter.post('/', async (req, res, next) => {\n  try {\n    const user = new User(req.body)\n    await user.save()\n    res.status(201).json(user)\n  } catch (error) {\n    next(error)\n  }\n})\n\n// 获取单个用户\nrouter.get('/:id', async (req, res, next) => {\n  try {\n    const user = await User.findById(req.params.id)\n    if (!user) {\n      return res.status(404).json({ error: '用户不存在' })\n    }\n    res.json(user)\n  } catch (error) {\n    next(error)\n  }\n})\n\nmodule.exports = router\n\n// models/User.js - 用户模型\nconst mongoose = require('mongoose')\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  age: {\n    type: Number,\n    min: 0,\n    max: 120\n  }\n}, {\n  timestamps: true\n})\n\nmodule.exports = mongoose.model('User', userSchema)\n\n// tests/integration/users.test.js - 集成测试\nconst request = require('supertest')\nconst mongoose = require('mongoose')\nconst app = require('../../app')\nconst User = require('../../models/User')\n\n// 测试数据库配置\nconst MONGODB_URI = process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/test_db'\n\ndescribe('用户 API 集成测试', () => {\n  beforeAll(async () => {\n    // 连接测试数据库\n    await mongoose.connect(MONGODB_URI)\n  })\n  \n  beforeEach(async () => {\n    // 清空测试数据\n    await User.deleteMany({})\n  })\n  \n  afterAll(async () => {\n    // 关闭数据库连接\n    await mongoose.connection.close()\n  })\n  \n  describe('GET /api/users', () => {\n    test('应该返回空数组', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .expect(200)\n      \n      expect(response.body).toEqual([])\n    })\n    \n    test('应该返回所有用户', async () => {\n      // 创建测试数据\n      await User.create([\n        { name: '张三', email: 'zhang@example.com', age: 25 },\n        { name: '李四', email: 'li@example.com', age: 30 }\n      ])\n      \n      const response = await request(app)\n        .get('/api/users')\n        .expect(200)\n      \n      expect(response.body).toHaveLength(2)\n      expect(response.body[0]).toMatchObject({\n        name: '张三',\n        email: 'zhang@example.com'\n      })\n    })\n  })\n  \n  describe('POST /api/users', () => {\n    test('应该创建新用户', async () => {\n      const userData = {\n        name: '王五',\n        email: 'wang@example.com',\n        age: 28\n      }\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201)\n      \n      expect(response.body).toMatchObject(userData)\n      expect(response.body._id).toBeDefined()\n      \n      // 验证数据库中的数据\n      const userInDb = await User.findById(response.body._id)\n      expect(userInDb).toBeTruthy()\n      expect(userInDb.name).toBe(userData.name)\n    })\n    \n    test('应该验证必填字段', async () => {\n      const response = await request(app)\n        .post('/api/users')\n        .send({ age: 25 }) // 缺少 name 和 email\n        .expect(500)\n      \n      expect(response.body.error).toBeDefined()\n    })\n  })\n  \n  describe('GET /api/users/:id', () => {\n    test('应该返回指定用户', async () => {\n      const user = await User.create({\n        name: '赵六',\n        email: 'zhao@example.com',\n        age: 35\n      })\n      \n      const response = await request(app)\n        .get(`/api/users/${user._id}`)\n        .expect(200)\n      \n      expect(response.body._id).toBe(user._id.toString())\n      expect(response.body.name).toBe('赵六')\n    })\n    \n    test('用户不存在时应该返回404', async () => {\n      const fakeId = new mongoose.Types.ObjectId()\n      \n      const response = await request(app)\n        .get(`/api/users/${fakeId}`)\n        .expect(404)\n      \n      expect(response.body.error).toBe('用户不存在')\n    })\n  })\n})"
    },
    "testConfiguration": {
        "title": "测试配置和工具",
        "language": "javascript",
        "code": "// jest.config.js - Jest 配置\nmodule.exports = {\n  // 测试环境\n  testEnvironment: 'node',\n  \n  // 测试文件匹配模式\n  testMatch: [\n    '**/__tests__/**/*.js',\n    '**/?(*.)+(spec|test).js'\n  ],\n  \n  // 覆盖率配置\n  collectCoverage: true,\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n  collectCoverageFrom: [\n    'src/**/*.js',\n    '!src/**/*.test.js',\n    '!src/index.js'\n  ],\n  \n  // 覆盖率阈值\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  },\n  \n  // 设置和清理\n  setupFilesAfterEnv: ['<rootDir>/tests/setup.js'],\n  \n  // Mock 配置\n  clearMocks: true,\n  restoreMocks: true,\n  \n  // 超时设置\n  testTimeout: 10000,\n  \n  // 并行测试\n  maxWorkers: '50%',\n  \n  // 详细输出\n  verbose: true\n}\n\n// tests/setup.js - 测试设置\nconst mongoose = require('mongoose')\n\n// 全局测试设置\nbeforeAll(async () => {\n  // 设置测试环境变量\n  process.env.NODE_ENV = 'test'\n  process.env.JWT_SECRET = 'test-secret'\n  \n  // 连接测试数据库\n  if (mongoose.connection.readyState === 0) {\n    await mongoose.connect(process.env.MONGODB_TEST_URI)\n  }\n})\n\n// 全局测试清理\nafterAll(async () => {\n  // 关闭数据库连接\n  await mongoose.connection.close()\n})\n\n// 自定义匹配器\nexpect.extend({\n  toBeValidEmail(received) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    const pass = emailRegex.test(received)\n    \n    if (pass) {\n      return {\n        message: () => `期望 ${received} 不是有效的邮箱地址`,\n        pass: true\n      }\n    } else {\n      return {\n        message: () => `期望 ${received} 是有效的邮箱地址`,\n        pass: false\n      }\n    }\n  }\n})\n\n// package.json - 测试脚本配置\n/*\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:ci\": \"jest --ci --coverage --watchAll=false\",\n    \"test:integration\": \"jest --testPathPattern=integration\",\n    \"test:unit\": \"jest --testPathPattern=unit\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^29.0.0\",\n    \"supertest\": \"^6.0.0\",\n    \"@types/jest\": \"^29.0.0\"\n  }\n}\n*/\n\n// .github/workflows/test.yml - CI/CD 测试配置\n/*\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [16.x, 18.x, 20.x]\n    \n    services:\n      mongodb:\n        image: mongo:5.0\n        ports:\n          - 27017:27017\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    \n    - run: npm ci\n    - run: npm run test:ci\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n*/\n\n// 测试工具函数\n// tests/helpers/testUtils.js\nconst mongoose = require('mongoose')\nconst User = require('../../models/User')\n\n// 创建测试用户\nexports.createTestUser = async (userData = {}) => {\n  const defaultData = {\n    name: '测试用户',\n    email: `test${Date.now()}@example.com`,\n    age: 25\n  }\n  \n  return await User.create({ ...defaultData, ...userData })\n}\n\n// 清理测试数据\nexports.cleanupTestData = async () => {\n  const collections = mongoose.connection.collections\n  \n  for (const key in collections) {\n    await collections[key].deleteMany({})\n  }\n}\n\n// 生成随机测试数据\nexports.generateTestData = (count = 5) => {\n  return Array.from({ length: count }, (_, index) => ({\n    name: `用户${index + 1}`,\n    email: `user${index + 1}@example.com`,\n    age: 20 + index\n  }))\n}"
    }
}
