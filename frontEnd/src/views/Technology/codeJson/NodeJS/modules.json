{
  "commonjsBasic": {
    "title": "CommonJS 基本使用",
    "language": "javascript",
    "code": "// math.js - 导出模块\nfunction add(a, b) {\n  return a + b\n}\n\nfunction subtract(a, b) {\n  return a - b\n}\n\nfunction multiply(a, b) {\n  return a * b\n}\n\n// 单个导出\nmodule.exports.add = add\nmodule.exports.subtract = subtract\n\n// 批量导出\nmodule.exports = {\n  add,\n  subtract,\n  multiply\n}\n\n// app.js - 导入模块\nconst math = require('./math')\nconst { add, subtract } = require('./math')\n\nconsole.log(math.add(5, 3))      // 8\nconsole.log(subtract(10, 4))     // 6\n\n// 导入内置模块\nconst fs = require('fs')\nconst path = require('path')\nconst http = require('http')\n\n// 导入第三方模块\nconst express = require('express')\nconst lodash = require('lodash')"
  },
  "esModules": {
    "title": "ES Modules (ESM)",
    "language": "javascript",
    "code": "// math.mjs - 导出模块\nexport function add(a, b) {\n  return a + b\n}\n\nexport function subtract(a, b) {\n  return a - b\n}\n\n// 默认导出\nexport default function multiply(a, b) {\n  return a * b\n}\n\n// 批量导出\nconst PI = 3.14159\nconst E = 2.71828\n\nexport { PI, E }\n\n// app.mjs - 导入模块\nimport multiply, { add, subtract, PI } from './math.mjs'\nimport * as math from './math.mjs'\n\nconsole.log(add(5, 3))           // 8\nconsole.log(multiply(4, 2))      // 8\nconsole.log(math.PI)             // 3.14159\n\n// 动态导入\nasync function loadMath() {\n  const mathModule = await import('./math.mjs')\n  return mathModule.add(10, 5)\n}\n\n// 条件导入\nif (process.env.NODE_ENV === 'development') {\n  const devTools = await import('./dev-tools.mjs')\n  devTools.enableDebugMode()\n}\n\n// 重新导出\nexport { add, subtract } from './math.mjs'\nexport { default as multiply } from './math.mjs'"
  },
  "packageJson": {
    "title": "package.json 配置",
    "language": "json",
    "code": "{\n  \"name\": \"my-node-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js 应用示例\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"jest\",\n    \"build\": \"webpack --mode production\",\n    \"lint\": \"eslint src/\",\n    \"format\": \"prettier --write src/\"\n  },\n  \"keywords\": [\"nodejs\", \"express\", \"api\"],\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"^4.18.0\",\n    \"mongoose\": \"^6.0.0\",\n    \"dotenv\": \"^16.0.0\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.0\",\n    \"jest\": \"^28.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"@types/node\": \"^18.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\",\n    \"npm\": \">=8.0.0\"\n  },\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.mjs\",\n      \"require\": \"./index.js\"\n    },\n    \"./utils\": {\n      \"import\": \"./utils/index.mjs\",\n      \"require\": \"./utils/index.js\"\n    }\n  }\n}"
  },
  "npmCommands": {
    "title": "NPM 包管理",
    "language": "bash",
    "code": "# 初始化项目\nnpm init\nnpm init -y  # 使用默认配置\n\n# 安装依赖\nnpm install express\nnpm install express@4.18.0  # 指定版本\nnpm install express --save   # 保存到 dependencies\nnpm install nodemon --save-dev  # 保存到 devDependencies\nnpm install -g pm2  # 全局安装\n\n# 安装所有依赖\nnpm install\nnpm ci  # 基于 package-lock.json 安装\n\n# 更新依赖\nnpm update\nnpm update express  # 更新特定包\nnpm outdated  # 查看过期包\n\n# 卸载依赖\nnpm uninstall express\nnpm uninstall express --save\nnpm uninstall nodemon --save-dev\n\n# 查看依赖\nnpm list\nnpm list --depth=0  # 只显示顶级依赖\nnpm list express    # 查看特定包\n\n# 运行脚本\nnpm start\nnpm run dev\nnpm test\nnpm run build\n\n# 发布包\nnpm login\nnpm publish\nnpm version patch  # 更新版本号\nnpm version minor\nnpm version major\n\n# 其他有用命令\nnpm cache clean --force  # 清理缓存\nnpm audit  # 安全审计\nnpm audit fix  # 修复安全问题\nnpm config list  # 查看配置\nnpm config set registry https://registry.npm.taobao.org/  # 设置镜像"
  },
  "moduleResolution": {
    "title": "模块解析机制",
    "language": "javascript",
    "code": "// Node.js 模块解析顺序\n// 1. 核心模块 (fs, path, http 等)\nconst fs = require('fs')\n\n// 2. 文件模块 (相对路径)\nconst myModule = require('./my-module')     // ./my-module.js\nconst utils = require('./utils/index')      // ./utils/index.js\nconst config = require('../config.json')   // ../config.json\n\n// 3. 目录模块\nconst express = require('./node_modules/express')  // 查找 package.json 的 main 字段\n\n// 4. node_modules 查找\n// 从当前目录开始，逐级向上查找 node_modules\nconst lodash = require('lodash')\n// 查找顺序:\n// ./node_modules/lodash\n// ../node_modules/lodash\n// ../../node_modules/lodash\n// ... 直到根目录\n\n// 模块缓存\nconsole.log(require.cache)  // 查看模块缓存\ndelete require.cache[require.resolve('./my-module')]  // 清除特定模块缓存\n\n// 模块路径\nconsole.log(require.resolve('express'))     // 获取模块完整路径\nconsole.log(require.resolve('./my-module'))  // 获取本地模块路径\n\n// 条件导入\nfunction loadModule(moduleName) {\n  try {\n    return require(moduleName)\n  } catch (error) {\n    if (error.code === 'MODULE_NOT_FOUND') {\n      console.log(`模块 ${moduleName} 未找到`)\n      return null\n    }\n    throw error\n  }\n}\n\n// 动态模块加载\nconst moduleName = process.env.NODE_ENV === 'production' ? './prod-config' : './dev-config'\nconst config = require(moduleName)\n\n// 模块热重载 (开发环境)\nif (process.env.NODE_ENV === 'development') {\n  const chokidar = require('chokidar')\n  \n  chokidar.watch('./config.js').on('change', () => {\n    delete require.cache[require.resolve('./config.js')]\n    const newConfig = require('./config.js')\n    console.log('配置已重新加载:', newConfig)\n  })\n}"
  },
  "customModules": {
    "title": "自定义模块开发",
    "language": "javascript",
    "code": "// utils/logger.js - 日志模块\nconst fs = require('fs')\nconst path = require('path')\n\nclass Logger {\n  constructor(options = {}) {\n    this.level = options.level || 'info'\n    this.logFile = options.logFile || path.join(__dirname, '../logs/app.log')\n    this.enableConsole = options.enableConsole !== false\n  }\n  \n  log(level, message, meta = {}) {\n    const timestamp = new Date().toISOString()\n    const logEntry = {\n      timestamp,\n      level,\n      message,\n      ...meta\n    }\n    \n    const logString = JSON.stringify(logEntry) + '\\n'\n    \n    // 写入文件\n    fs.appendFileSync(this.logFile, logString)\n    \n    // 控制台输出\n    if (this.enableConsole) {\n      console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`)\n    }\n  }\n  \n  info(message, meta) {\n    this.log('info', message, meta)\n  }\n  \n  error(message, meta) {\n    this.log('error', message, meta)\n  }\n  \n  warn(message, meta) {\n    this.log('warn', message, meta)\n  }\n  \n  debug(message, meta) {\n    if (this.level === 'debug') {\n      this.log('debug', message, meta)\n    }\n  }\n}\n\n// 单例模式\nlet instance = null\n\nfunction createLogger(options) {\n  if (!instance) {\n    instance = new Logger(options)\n  }\n  return instance\n}\n\nmodule.exports = {\n  Logger,\n  createLogger,\n  // 默认实例\n  default: createLogger()\n}\n\n// utils/database.js - 数据库连接模块\nconst mongoose = require('mongoose')\nconst logger = require('./logger').default\n\nclass Database {\n  constructor() {\n    this.connection = null\n    this.isConnected = false\n  }\n  \n  async connect(uri, options = {}) {\n    try {\n      this.connection = await mongoose.connect(uri, {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        ...options\n      })\n      \n      this.isConnected = true\n      logger.info('数据库连接成功', { uri })\n      \n      // 监听连接事件\n      mongoose.connection.on('error', (error) => {\n        logger.error('数据库连接错误', { error: error.message })\n      })\n      \n      mongoose.connection.on('disconnected', () => {\n        this.isConnected = false\n        logger.warn('数据库连接断开')\n      })\n      \n      return this.connection\n    } catch (error) {\n      logger.error('数据库连接失败', { error: error.message })\n      throw error\n    }\n  }\n  \n  async disconnect() {\n    if (this.connection) {\n      await mongoose.disconnect()\n      this.isConnected = false\n      logger.info('数据库连接已关闭')\n    }\n  }\n  \n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      readyState: mongoose.connection.readyState\n    }\n  }\n}\n\nmodule.exports = new Database()\n\n// app.js - 使用自定义模块\nconst logger = require('./utils/logger').default\nconst database = require('./utils/database')\nconst express = require('express')\n\nconst app = express()\n\n// 初始化数据库\ndatabase.connect(process.env.MONGODB_URI)\n  .then(() => {\n    logger.info('应用启动成功')\n    \n    app.listen(3000, () => {\n      logger.info('服务器运行在端口 3000')\n    })\n  })\n  .catch((error) => {\n    logger.error('应用启动失败', { error: error.message })\n    process.exit(1)\n  })"
  }
}
