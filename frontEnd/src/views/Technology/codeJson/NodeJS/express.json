{
    "basicSetup": {
        "title": "Express基础设置",
        "language": "javascript",
        "code": "// 安装Express\n// npm install express\n\n// 基础Express应用\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\n// 基础中间件\napp.use(express.json())  // 解析JSON请求体\napp.use(express.urlencoded({ extended: true }))  // 解析URL编码请求体\n\n// 基础路由\napp.get('/', (req, res) => {\n  res.send('Hello Express!')\n})\n\napp.get('/api/users', (req, res) => {\n  res.json({ users: [] })\n})\n\napp.post('/api/users', (req, res) => {\n  const { name, email } = req.body\n  // 处理用户创建逻辑\n  res.status(201).json({ id: 1, name, email })\n})\n\n// 启动服务器\napp.listen(port, () => {\n  console.log(`服务器运行在 http://localhost:${port}`)\n})"
    },
    "routingAdvanced": {
        "title": "高级路由",
        "language": "javascript",
        "code": "const express = require('express')\nconst router = express.Router()\n\n// 路由参数\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id\n  res.json({ userId })\n})\n\n// 多个参数\napp.get('/users/:userId/posts/:postId', (req, res) => {\n  const { userId, postId } = req.params\n  res.json({ userId, postId })\n})\n\n// 查询参数\napp.get('/search', (req, res) => {\n  const { q, page = 1, limit = 10 } = req.query\n  res.json({ query: q, page: Number(page), limit: Number(limit) })\n})\n\n// 路由模式匹配\napp.get('/files/*', (req, res) => {\n  const filePath = req.params[0]\n  res.json({ filePath })\n})\n\n// 正则表达式路由\napp.get(/.*fly$/, (req, res) => {\n  res.send('以fly结尾的路径')\n})\n\n// 路由处理器数组\napp.get('/protected', authenticate, authorize, (req, res) => {\n  res.json({ message: '受保护的资源' })\n})\n\n// 路由模块化\n// routes/users.js\nrouter.get('/', (req, res) => {\n  res.json({ users: [] })\n})\n\nrouter.post('/', (req, res) => {\n  res.json({ message: '用户已创建' })\n})\n\nmodule.exports = router\n\n// 在主应用中使用\napp.use('/api/users', require('./routes/users'))"
    },
    "middleware": {
        "title": "中间件",
        "language": "javascript",
        "code": "const express = require('express')\nconst app = express()\n\n// 应用级中间件\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.path} - ${new Date().toISOString()}`)\n  next()  // 调用下一个中间件\n})\n\n// 路由级中间件\nconst authenticate = (req, res, next) => {\n  const token = req.headers.authorization\n  if (!token) {\n    return res.status(401).json({ error: '未提供认证令牌' })\n  }\n  // 验证token逻辑\n  req.user = { id: 1, name: 'John' }  // 模拟用户信息\n  next()\n}\n\n// 错误处理中间件\nconst errorHandler = (err, req, res, next) => {\n  console.error(err.stack)\n  res.status(500).json({ error: '服务器内部错误' })\n}\n\n// 内置中间件\napp.use(express.static('public'))  // 静态文件服务\napp.use(express.json({ limit: '10mb' }))  // JSON解析\n\n// 第三方中间件\nconst cors = require('cors')\nconst helmet = require('helmet')\nconst morgan = require('morgan')\n\napp.use(cors())  // 跨域支持\napp.use(helmet())  // 安全头\napp.use(morgan('combined'))  // 日志记录\n\n// 条件中间件\napp.use('/api', (req, res, next) => {\n  if (req.method === 'POST') {\n    // 只对POST请求执行特定逻辑\n  }\n  next()\n})\n\n// 使用中间件\napp.get('/protected', authenticate, (req, res) => {\n  res.json({ user: req.user })\n})\n\n// 错误处理中间件必须放在最后\napp.use(errorHandler)"
    },
    "requestResponse": {
        "title": "请求和响应处理",
        "language": "javascript",
        "code": "// 请求对象 (req)\napp.post('/api/data', (req, res) => {\n  // 请求体\n  const data = req.body\n  \n  // 请求头\n  const contentType = req.get('Content-Type')\n  const userAgent = req.headers['user-agent']\n  \n  // 路径参数\n  const id = req.params.id\n  \n  // 查询参数\n  const { page, limit } = req.query\n  \n  // 请求信息\n  console.log('Method:', req.method)\n  console.log('URL:', req.url)\n  console.log('Path:', req.path)\n  console.log('IP:', req.ip)\n  console.log('Protocol:', req.protocol)\n  console.log('Secure:', req.secure)\n})\n\n// 响应对象 (res)\napp.get('/api/response-examples', (req, res) => {\n  // 设置状态码\n  res.status(200)\n  \n  // 设置响应头\n  res.set('X-Custom-Header', 'MyValue')\n  res.type('application/json')\n  \n  // 发送响应\n  res.json({ message: 'JSON响应' })\n  // res.send('文本响应')\n  // res.sendFile(path.join(__dirname, 'file.html'))\n  // res.redirect('/other-page')\n  // res.download('/path/to/file.pdf')\n})\n\n// 响应方法示例\napp.get('/api/examples', (req, res) => {\n  const { format } = req.query\n  \n  switch (format) {\n    case 'json':\n      res.json({ data: 'JSON格式' })\n      break\n    case 'xml':\n      res.type('application/xml')\n      res.send('<data>XML格式</data>')\n      break\n    case 'file':\n      res.download('./files/sample.pdf')\n      break\n    default:\n      res.send('默认文本响应')\n  }\n})\n\n// Cookie操作\napp.get('/set-cookie', (req, res) => {\n  res.cookie('username', 'john', { \n    maxAge: 900000, \n    httpOnly: true,\n    secure: true \n  })\n  res.send('Cookie已设置')\n})\n\napp.get('/get-cookie', (req, res) => {\n  const username = req.cookies.username\n  res.json({ username })\n})"
    },
    "errorHandling": {
        "title": "错误处理",
        "language": "javascript",
        "code": "const express = require('express')\nconst app = express()\n\n// 异步错误处理包装器\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}\n\n// 自定义错误类\nclass AppError extends Error {\n  constructor(message, statusCode) {\n    super(message)\n    this.statusCode = statusCode\n    this.isOperational = true\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n\n// 路由中的错误处理\napp.get('/api/users/:id', asyncHandler(async (req, res, next) => {\n  const user = await User.findById(req.params.id)\n  \n  if (!user) {\n    throw new AppError('用户不存在', 404)\n  }\n  \n  res.json(user)\n}))\n\n// 同步错误处理\napp.get('/sync-error', (req, res, next) => {\n  try {\n    // 可能抛出错误的代码\n    const result = riskyOperation()\n    res.json(result)\n  } catch (error) {\n    next(error)  // 传递给错误处理中间件\n  }\n})\n\n// 404处理\napp.all('*', (req, res, next) => {\n  const err = new AppError(`找不到路径 ${req.originalUrl}`, 404)\n  next(err)\n})\n\n// 全局错误处理中间件\napp.use((err, req, res, next) => {\n  // 设置默认值\n  err.statusCode = err.statusCode || 500\n  err.status = err.status || 'error'\n  \n  // 开发环境错误响应\n  if (process.env.NODE_ENV === 'development') {\n    res.status(err.statusCode).json({\n      status: err.status,\n      error: err,\n      message: err.message,\n      stack: err.stack\n    })\n  } else {\n    // 生产环境错误响应\n    if (err.isOperational) {\n      res.status(err.statusCode).json({\n        status: err.status,\n        message: err.message\n      })\n    } else {\n      console.error('ERROR:', err)\n      res.status(500).json({\n        status: 'error',\n        message: '服务器内部错误'\n      })\n    }\n  }\n})\n\n// 未捕获异常处理\nprocess.on('uncaughtException', (err) => {\n  console.log('未捕获异常:', err.name, err.message)\n  process.exit(1)\n})\n\nprocess.on('unhandledRejection', (err) => {\n  console.log('未处理的Promise拒绝:', err.name, err.message)\n  server.close(() => {\n    process.exit(1)\n  })\n})"
    },
    "templateEngines": {
        "title": "模板引擎",
        "language": "javascript",
        "code": "const express = require('express')\nconst path = require('path')\nconst app = express()\n\n// 设置EJS模板引擎\napp.set('view engine', 'ejs')\napp.set('views', path.join(__dirname, 'views'))\n\n// 渲染EJS模板\napp.get('/', (req, res) => {\n  const data = {\n    title: '我的网站',\n    users: [\n      { name: '张三', email: 'zhang@example.com' },\n      { name: '李四', email: 'li@example.com' }\n    ]\n  }\n  res.render('index', data)\n})\n\n// views/index.ejs\n/*\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= title %></title>\n</head>\n<body>\n  <h1><%= title %></h1>\n  <ul>\n    <% users.forEach(user => { %>\n      <li><%= user.name %> - <%= user.email %></li>\n    <% }) %>\n  </ul>\n</body>\n</html>\n*/\n\n// 设置Handlebars模板引擎\nconst exphbs = require('express-handlebars')\n\napp.engine('handlebars', exphbs.engine())\napp.set('view engine', 'handlebars')\n\n// 渲染Handlebars模板\napp.get('/handlebars', (req, res) => {\n  res.render('home', {\n    title: 'Handlebars示例',\n    message: '欢迎使用Handlebars!'\n  })\n})\n\n// 设置Pug模板引擎\napp.set('view engine', 'pug')\n\n// 渲染Pug模板\napp.get('/pug', (req, res) => {\n  res.render('index', {\n    title: 'Pug示例',\n    message: '欢迎使用Pug!'\n  })\n})\n\n// views/index.pug\n/*\nhtml\n  head\n    title= title\n  body\n    h1= message\n    p 这是一个Pug模板示例\n*/\n\n// 模板局部变量\napp.locals.siteName = '我的网站'\napp.locals.currentYear = new Date().getFullYear()\n\n// 响应局部变量\napp.use((req, res, next) => {\n  res.locals.user = req.user || null\n  res.locals.currentPath = req.path\n  next()\n})"
    },
    "security": {
        "title": "安全最佳实践",
        "language": "javascript",
        "code": "const express = require('express')\nconst helmet = require('helmet')\nconst rateLimit = require('express-rate-limit')\nconst mongoSanitize = require('express-mongo-sanitize')\nconst xss = require('xss-clean')\nconst hpp = require('hpp')\nconst cors = require('cors')\nconst app = express()\n\n// 基础安全头\napp.use(helmet())\n\n// 速率限制\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15分钟\n  max: 100, // 限制每个IP 100个请求\n  message: '请求过于频繁，请稍后再试'\n})\napp.use('/api/', limiter)\n\n// 登录速率限制\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5,\n  skipSuccessfulRequests: true,\n  message: '登录尝试过多，请15分钟后再试'\n})\napp.use('/api/auth/login', loginLimiter)\n\n// 数据清理\napp.use(mongoSanitize()) // 防止NoSQL注入\napp.use(xss()) // 防止XSS攻击\napp.use(hpp()) // 防止HTTP参数污染\n\n// CORS配置\nconst corsOptions = {\n  origin: ['https://mydomain.com', 'https://www.mydomain.com'],\n  credentials: true,\n  optionsSuccessStatus: 200\n}\napp.use(cors(corsOptions))\n\n// 请求体大小限制\napp.use(express.json({ limit: '10kb' }))\napp.use(express.urlencoded({ extended: true, limit: '10kb' }))\n\n// 安全的Cookie设置\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24小时\n  }\n}))\n\n// 输入验证\nconst { body, validationResult } = require('express-validator')\n\napp.post('/api/users',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('password').isLength({ min: 8 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/),\n    body('name').trim().isLength({ min: 2, max: 50 })\n  ],\n  (req, res) => {\n    const errors = validationResult(req)\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() })\n    }\n    // 处理有效数据\n  }\n)\n\n// 环境变量验证\nif (!process.env.JWT_SECRET || !process.env.DATABASE_URL) {\n  console.error('缺少必要的环境变量')\n  process.exit(1)\n}\n\n// 安全响应头\napp.use((req, res, next) => {\n  res.removeHeader('X-Powered-By')\n  next()\n})"
    },
    "performance": {
        "title": "性能优化",
        "language": "javascript",
        "code": "const express = require('express')\nconst compression = require('compression')\nconst cluster = require('cluster')\nconst os = require('os')\nconst app = express()\n\n// Gzip压缩\napp.use(compression())\n\n// 静态文件缓存\napp.use(express.static('public', {\n  maxAge: '1d', // 缓存1天\n  etag: true,\n  lastModified: true\n}))\n\n// 响应缓存中间件\nconst cache = (duration) => {\n  return (req, res, next) => {\n    const key = req.originalUrl\n    const cached = memoryCache.get(key)\n    \n    if (cached) {\n      return res.json(cached)\n    }\n    \n    res.sendResponse = res.json\n    res.json = (body) => {\n      memoryCache.put(key, body, duration * 1000)\n      res.sendResponse(body)\n    }\n    \n    next()\n  }\n}\n\n// 使用缓存\napp.get('/api/data', cache(300), (req, res) => {\n  // 这个响应会被缓存5分钟\n  res.json({ data: 'expensive operation result' })\n})\n\n// 数据库连接池\nconst mongoose = require('mongoose')\nmongoose.connect(process.env.DATABASE_URL, {\n  maxPoolSize: 10, // 最大连接数\n  serverSelectionTimeoutMS: 5000,\n  socketTimeoutMS: 45000,\n  bufferCommands: false,\n  bufferMaxEntries: 0\n})\n\n// 异步处理优化\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next)\n}\n\n// 分页优化\napp.get('/api/posts', asyncHandler(async (req, res) => {\n  const page = parseInt(req.query.page) || 1\n  const limit = parseInt(req.query.limit) || 10\n  const skip = (page - 1) * limit\n  \n  const posts = await Post.find()\n    .skip(skip)\n    .limit(limit)\n    .lean() // 返回普通对象而不是Mongoose文档\n    .exec()\n  \n  const total = await Post.countDocuments()\n  \n  res.json({\n    posts,\n    pagination: {\n      page,\n      limit,\n      total,\n      pages: Math.ceil(total / limit)\n    }\n  })\n}))\n\n// 集群模式\nif (cluster.isMaster) {\n  const numCPUs = os.cpus().length\n  \n  console.log(`主进程 ${process.pid} 正在运行`)\n  \n  // 为每个CPU核心创建工作进程\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork()\n  }\n  \n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`工作进程 ${worker.process.pid} 已退出`)\n    cluster.fork() // 重启工作进程\n  })\n} else {\n  // 工作进程运行Express应用\n  app.listen(3000, () => {\n    console.log(`工作进程 ${process.pid} 启动`)\n  })\n}\n\n// 内存使用监控\nsetInterval(() => {\n  const used = process.memoryUsage()\n  console.log('内存使用:', {\n    rss: Math.round(used.rss / 1024 / 1024) + 'MB',\n    heapTotal: Math.round(used.heapTotal / 1024 / 1024) + 'MB',\n    heapUsed: Math.round(used.heapUsed / 1024 / 1024) + 'MB'\n  })\n}, 30000)"
    },
    "expressGenerator": {
        "title": "Express应用生成器",
        "language": "bash",
        "code": "# 安装Express应用生成器\nnpm install -g express-generator\n\n# 创建应用\nexpress --view=ejs myapp\ncd myapp\nnpm install\n\n# 启动应用\nnpm start\n\n# 生成的项目结构\nmyapp/\n├── bin/             # 启动脚本\n├── public/          # 静态文件\n├── routes/          # 路由文件\n├── views/           # 视图模板\n├── app.js           # 应用入口\n└── package.json"
    },
    "routeModularization": {
        "title": "路由模块化",
        "language": "javascript",
        "code": "// routes/users.js\nconst express = require('express')\nconst router = express.Router()\n\n// 中间件，对该路由下的所有请求生效\nrouter.use((req, res, next) => {\n  console.log('用户路由中间件')\n  next()\n})\n\n// 获取所有用户\nrouter.get('/', (req, res) => {\n  res.json({ users: [] })\n})\n\n// 获取特定用户\nrouter.get('/:id', validateUserId, (req, res) => {\n  const userId = req.userId\n  res.json({ userId })\n})\n\n// 创建用户\nrouter.post('/', (req, res) => {\n  const { name, email } = req.body\n  res.status(201).json({ id: Date.now(), name, email })\n})\n\n// 参数验证中间件\nfunction validateUserId(req, res, next) {\n  const { id } = req.params\n  if (!/^\\d+$/.test(id)) {\n    return res.status(400).json({ error: '无效的ID格式' })\n  }\n  req.userId = parseInt(id)\n  next()\n}\n\nmodule.exports = router"
    },
    "routePatterns": {
        "title": "路由模式匹配",
        "language": "javascript",
        "code": "// 字符串模式\napp.get('/ab*cd', handler)     // 匹配 abcd, abxcd, abRANDOMcd 等\napp.get('/ab+cd', handler)     // 匹配 abcd, abbcd, abbbcd 等\napp.get('/ab?cd', handler)     // 匹配 acd, abcd\napp.get('/ab(cd)?e', handler)  // 匹配 abe, abcde\n\n// 正则表达式模式\napp.get(/.*fly$/, handler)     // 匹配以fly结尾的路径\napp.get(/^/users\\/(\\d+)$/, handler)  // 匹配 /users/数字\n\n// 路由参数\napp.get('/users/:id(\\\\d+)', handler)  // 只匹配数字ID\napp.get('/files/*', handler)          // 匹配任意子路径\n\n// 多个处理函数\napp.get('/protected', authenticate, authorize, handler)\n\n// 路由数组\napp.get(['/users', '/people'], handler)\n\n// 条件路由\napp.get('/api/*', (req, res, next) => {\n  if (req.headers['api-version'] === 'v2') {\n    // 处理v2 API\n  } else {\n    next()  // 继续到下一个路由\n  }\n})\n\n// 404处理\napp.use('*', (req, res) => {\n  res.status(404).json({ error: '页面未找到' })\n})"
    },
    "builtinMiddleware": {
        "title": "内置中间件",
        "language": "javascript",
        "code": "const express = require('express')\nconst path = require('path')\nconst app = express()\n\n// 解析JSON请求体\napp.use(express.json({ limit: '10mb' }))\n\n// 解析URL编码请求体\napp.use(express.urlencoded({ extended: true, limit: '10mb' }))\n\n// 静态文件服务\napp.use(express.static('public'))\napp.use('/uploads', express.static('uploads'))\n\n// 使用示例\napp.post('/api/data', (req, res) => {\n  console.log('请求体:', req.body)\n  res.json({ received: req.body })\n})"
    },
    "thirdPartyMiddleware": {
        "title": "第三方中间件",
        "language": "bash",
        "code": "# 安装常用中间件\nnpm install cors helmet morgan compression cookie-parser\n\nconst express = require('express')\nconst cors = require('cors')\nconst helmet = require('helmet')\nconst morgan = require('morgan')\nconst compression = require('compression')\nconst cookieParser = require('cookie-parser')\nconst app = express()\n\n// 安全头部\napp.use(helmet())\n\n// 跨域支持\napp.use(cors({\n  origin: ['http://localhost:3000', 'https://mydomain.com'],\n  credentials: true\n}))\n\n// 日志记录\napp.use(morgan('combined'))\n\n// Gzip压缩\napp.use(compression())\n\n// Cookie解析\napp.use(cookieParser())\n\n// 请求体解析\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))"
    },
    "globalErrorHandling": {
        "title": "全局异常捕获",
        "language": "javascript",
        "code": "// 捕获未处理的Promise拒绝\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('未处理的Promise拒绝:', reason)\n  // 优雅关闭服务器\n  server.close(() => {\n    process.exit(1)\n  })\n})\n\n// 捕获未捕获的异常\nprocess.on('uncaughtException', (error) => {\n  console.error('未捕获的异常:', error)\n  process.exit(1)\n})\n\n// 优雅关闭\nconst gracefulShutdown = (signal) => {\n  console.log(`收到 ${signal} 信号，开始优雅关闭...`)\n  server.close(() => {\n    console.log('HTTP服务器已关闭')\n    // 关闭数据库连接等\n    process.exit(0)\n  })\n}\n\nprocess.on('SIGTERM', gracefulShutdown)\nprocess.on('SIGINT', gracefulShutdown)"
    },
    "restfulAPI": {
        "title": "RESTful API 示例",
        "language": "javascript",
        "code": "const express = require('express')\nconst router = express.Router()\n\n// 用户资源的RESTful API\nclass UserController {\n  // GET /api/users - 获取用户列表\n  static async getUsers(req, res) {\n    try {\n      const { page = 1, limit = 10, search } = req.query\n      const users = await User.find(\n        search ? { name: new RegExp(search, 'i') } : {}\n      )\n      .limit(limit * 1)\n      .skip((page - 1) * limit)\n      .select('-password')\n      \n      const total = await User.countDocuments()\n      \n      res.json({\n        users,\n        pagination: {\n          page: Number(page),\n          limit: Number(limit),\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      })\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n  \n  // GET /api/users/:id - 获取单个用户\n  static async getUserById(req, res) {\n    try {\n      const user = await User.findById(req.params.id).select('-password')\n      if (!user) {\n        return res.status(404).json({ error: '用户不存在' })\n      }\n      res.json(user)\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n  \n  // POST /api/users - 创建用户\n  static async createUser(req, res) {\n    try {\n      const { name, email, password } = req.body\n      \n      // 验证邮箱是否已存在\n      const existingUser = await User.findOne({ email })\n      if (existingUser) {\n        return res.status(400).json({ error: '邮箱已被使用' })\n      }\n      \n      const user = new User({ name, email, password })\n      await user.save()\n      \n      // 不返回密码\n      const { password: _, ...userWithoutPassword } = user.toObject()\n      res.status(201).json(userWithoutPassword)\n    } catch (error) {\n      res.status(400).json({ error: error.message })\n    }\n  }\n  \n  // PUT /api/users/:id - 更新用户\n  static async updateUser(req, res) {\n    try {\n      const { name, email } = req.body\n      const user = await User.findByIdAndUpdate(\n        req.params.id,\n        { name, email },\n        { new: true, runValidators: true }\n      ).select('-password')\n      \n      if (!user) {\n        return res.status(404).json({ error: '用户不存在' })\n      }\n      \n      res.json(user)\n    } catch (error) {\n      res.status(400).json({ error: error.message })\n    }\n  }\n  \n  // DELETE /api/users/:id - 删除用户\n  static async deleteUser(req, res) {\n    try {\n      const user = await User.findByIdAndDelete(req.params.id)\n      if (!user) {\n        return res.status(404).json({ error: '用户不存在' })\n      }\n      res.status(204).send()\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n}\n\n// 路由定义\nrouter.get('/users', UserController.getUsers)\nrouter.get('/users/:id', UserController.getUserById)\nrouter.post('/users', UserController.createUser)\nrouter.put('/users/:id', UserController.updateUser)\nrouter.delete('/users/:id', UserController.deleteUser)\n\nmodule.exports = router"
    },
    "projectStructure": {
        "title": "项目结构组织",
        "language": "text",
        "code": "project/\n├── src/\n│   ├── controllers/     # 控制器\n│   ├── models/         # 数据模型\n│   ├── routes/         # 路由定义\n│   ├── middleware/     # 中间件\n│   ├── services/       # 业务逻辑\n│   └── utils/          # 工具函数\n├── public/             # 静态文件\n├── docs/               # 文档\n├── .env                # 环境变量\n├── app.js              # 应用入口\n└── server.js           # 服务器启动"
    },
    "securityConfig": {
        "title": "安全性配置",
        "language": "javascript",
        "code": "const helmet = require('helmet')\nconst rateLimit = require('express-rate-limit')\n\n// 安全头部\napp.use(helmet())\n\n// 速率限制\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15分钟\n  max: 100 // 限制每个IP 100个请求\n})\napp.use('/api/', limiter)\n\n// 输入验证\nconst { body, validationResult } = require('express-validator')\n\napp.post('/api/users',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('password').isLength({ min: 6 })\n  ],\n  (req, res) => {\n    const errors = validationResult(req)\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() })\n    }\n    // 处理请求\n  }\n)"
    }
}
