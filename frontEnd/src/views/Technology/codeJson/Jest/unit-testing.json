{
  "basicFunctionTesting": {
    "title": "基础函数测试",
    "language": "javascript",
    "code": "// 被测试的函数\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction isEven(num) {\n  return num % 2 === 0;\n}\n\n// 测试文件：math.test.js\ndescribe('数学工具函数', () => {\n  describe('add 函数', () => {\n    test('应该正确计算两个正数的和', () => {\n      // Arrange - 准备测试数据\n      const a = 2;\n      const b = 3;\n      \n      // Act - 执行被测试的函数\n      const result = add(a, b);\n      \n      // Assert - 验证结果\n      expect(result).toBe(5);\n    });\n    \n    test('应该正确处理负数', () => {\n      expect(add(-1, 1)).toBe(0);\n      expect(add(-2, -3)).toBe(-5);\n    });\n    \n    test('应该正确处理小数', () => {\n      expect(add(0.1, 0.2)).toBeCloseTo(0.3);\n    });\n    \n    test('应该正确处理零', () => {\n      expect(add(0, 5)).toBe(5);\n      expect(add(5, 0)).toBe(5);\n      expect(add(0, 0)).toBe(0);\n    });\n  });\n  \n  describe('multiply 函数', () => {\n    test('应该正确计算乘法', () => {\n      expect(multiply(3, 4)).toBe(12);\n      expect(multiply(-2, 3)).toBe(-6);\n      expect(multiply(0, 5)).toBe(0);\n    });\n  });\n  \n  describe('isEven 函数', () => {\n    test('应该正确判断偶数', () => {\n      expect(isEven(2)).toBe(true);\n      expect(isEven(4)).toBe(true);\n      expect(isEven(0)).toBe(true);\n    });\n    \n    test('应该正确判断奇数', () => {\n      expect(isEven(1)).toBe(false);\n      expect(isEven(3)).toBe(false);\n      expect(isEven(-1)).toBe(false);\n    });\n  });\n});"
  },
  "boundaryTesting": {
    "title": "边界条件测试",
    "language": "javascript",
    "code": "// 被测试的函数\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error('除数不能为零');\n  }\n  return a / b;\n}\n\nfunction getGrade(score) {\n  if (score < 0 || score > 100) {\n    throw new Error('分数必须在0-100之间');\n  }\n  if (score >= 90) return 'A';\n  if (score >= 80) return 'B';\n  if (score >= 70) return 'C';\n  if (score >= 60) return 'D';\n  return 'F';\n}\n\nfunction validateAge(age) {\n  if (typeof age !== 'number' || age < 0 || age > 150) {\n    return false;\n  }\n  return true;\n}\n\n// 边界条件测试\ndescribe('边界条件测试', () => {\n  describe('divide 函数', () => {\n    test('正常除法运算', () => {\n      expect(divide(10, 2)).toBe(5);\n      expect(divide(7, 2)).toBe(3.5);\n    });\n    \n    test('边界值测试', () => {\n      expect(divide(1, 1)).toBe(1);\n      expect(divide(0, 1)).toBe(0);\n      expect(divide(-10, 2)).toBe(-5);\n    });\n    \n    test('除数为零应该抛出错误', () => {\n      expect(() => divide(10, 0)).toThrow('除数不能为零');\n      expect(() => divide(0, 0)).toThrow('除数不能为零');\n    });\n  });\n  \n  describe('getGrade 函数', () => {\n    test('边界分数测试', () => {\n      // 测试边界值\n      expect(getGrade(0)).toBe('F');\n      expect(getGrade(59)).toBe('F');\n      expect(getGrade(60)).toBe('D');\n      expect(getGrade(69)).toBe('D');\n      expect(getGrade(70)).toBe('C');\n      expect(getGrade(79)).toBe('C');\n      expect(getGrade(80)).toBe('B');\n      expect(getGrade(89)).toBe('B');\n      expect(getGrade(90)).toBe('A');\n      expect(getGrade(100)).toBe('A');\n    });\n    \n    test('无效分数应该抛出错误', () => {\n      expect(() => getGrade(-1)).toThrow('分数必须在0-100之间');\n      expect(() => getGrade(101)).toThrow('分数必须在0-100之间');\n    });\n  });\n  \n  describe('validateAge 函数', () => {\n    test('有效年龄', () => {\n      expect(validateAge(0)).toBe(true);\n      expect(validateAge(25)).toBe(true);\n      expect(validateAge(150)).toBe(true);\n    });\n    \n    test('无效年龄', () => {\n      expect(validateAge(-1)).toBe(false);\n      expect(validateAge(151)).toBe(false);\n      expect(validateAge('25')).toBe(false);\n      expect(validateAge(null)).toBe(false);\n      expect(validateAge(undefined)).toBe(false);\n    });\n  });\n});"
  },
  "classTesting": {
    "title": "类和对象测试",
    "language": "javascript",
    "code": "// 被测试的类\nclass Calculator {\n  constructor() {\n    this.result = 0;\n    this.history = [];\n  }\n  \n  add(value) {\n    this.result += value;\n    this.history.push(`+${value}`);\n    return this;\n  }\n  \n  subtract(value) {\n    this.result -= value;\n    this.history.push(`-${value}`);\n    return this;\n  }\n  \n  multiply(value) {\n    this.result *= value;\n    this.history.push(`*${value}`);\n    return this;\n  }\n  \n  getResult() {\n    return this.result;\n  }\n  \n  getHistory() {\n    return [...this.history];\n  }\n  \n  clear() {\n    this.result = 0;\n    this.history = [];\n    return this;\n  }\n}\n\nclass BankAccount {\n  constructor(initialBalance = 0) {\n    this.balance = initialBalance;\n    this.transactions = [];\n  }\n  \n  deposit(amount) {\n    if (amount <= 0) {\n      throw new Error('存款金额必须大于0');\n    }\n    this.balance += amount;\n    this.transactions.push({ type: 'deposit', amount, date: new Date() });\n    return this.balance;\n  }\n  \n  withdraw(amount) {\n    if (amount <= 0) {\n      throw new Error('取款金额必须大于0');\n    }\n    if (amount > this.balance) {\n      throw new Error('余额不足');\n    }\n    this.balance -= amount;\n    this.transactions.push({ type: 'withdraw', amount, date: new Date() });\n    return this.balance;\n  }\n  \n  getBalance() {\n    return this.balance;\n  }\n}\n\n// 类测试\ndescribe('Calculator 类测试', () => {\n  let calculator;\n  \n  beforeEach(() => {\n    // 每个测试前创建新实例\n    calculator = new Calculator();\n  });\n  \n  describe('基本运算', () => {\n    test('应该正确执行加法', () => {\n      calculator.add(5);\n      expect(calculator.getResult()).toBe(5);\n    });\n    \n    test('应该支持链式调用', () => {\n      const result = calculator.add(5).subtract(2).multiply(3).getResult();\n      expect(result).toBe(9); // (0 + 5 - 2) * 3 = 9\n    });\n    \n    test('应该记录操作历史', () => {\n      calculator.add(5).subtract(2);\n      expect(calculator.getHistory()).toEqual(['+5', '-2']);\n    });\n  });\n  \n  describe('状态管理', () => {\n    test('应该正确清除状态', () => {\n      calculator.add(10).subtract(5);\n      calculator.clear();\n      \n      expect(calculator.getResult()).toBe(0);\n      expect(calculator.getHistory()).toEqual([]);\n    });\n  });\n});\n\ndescribe('BankAccount 类测试', () => {\n  let account;\n  \n  beforeEach(() => {\n    account = new BankAccount(100); // 初始余额100\n  });\n  \n  describe('存款功能', () => {\n    test('应该正确处理存款', () => {\n      const newBalance = account.deposit(50);\n      expect(newBalance).toBe(150);\n      expect(account.getBalance()).toBe(150);\n    });\n    \n    test('存款金额必须大于0', () => {\n      expect(() => account.deposit(0)).toThrow('存款金额必须大于0');\n      expect(() => account.deposit(-10)).toThrow('存款金额必须大于0');\n    });\n  });\n  \n  describe('取款功能', () => {\n    test('应该正确处理取款', () => {\n      const newBalance = account.withdraw(30);\n      expect(newBalance).toBe(70);\n      expect(account.getBalance()).toBe(70);\n    });\n    \n    test('余额不足时应该抛出错误', () => {\n      expect(() => account.withdraw(150)).toThrow('余额不足');\n    });\n    \n    test('取款金额必须大于0', () => {\n      expect(() => account.withdraw(0)).toThrow('取款金额必须大于0');\n      expect(() => account.withdraw(-10)).toThrow('取款金额必须大于0');\n    });\n  });\n});"
  },
  "stateTesting": {
    "title": "状态变化测试",
    "language": "javascript",
    "code": "// 状态管理类\nclass TodoList {\n  constructor() {\n    this.todos = [];\n    this.nextId = 1;\n  }\n  \n  addTodo(text) {\n    const todo = {\n      id: this.nextId++,\n      text,\n      completed: false,\n      createdAt: new Date()\n    };\n    this.todos.push(todo);\n    return todo;\n  }\n  \n  toggleTodo(id) {\n    const todo = this.todos.find(t => t.id === id);\n    if (todo) {\n      todo.completed = !todo.completed;\n      return todo;\n    }\n    throw new Error('Todo not found');\n  }\n  \n  removeTodo(id) {\n    const index = this.todos.findIndex(t => t.id === id);\n    if (index !== -1) {\n      return this.todos.splice(index, 1)[0];\n    }\n    throw new Error('Todo not found');\n  }\n  \n  getTodos() {\n    return [...this.todos];\n  }\n  \n  getCompletedTodos() {\n    return this.todos.filter(t => t.completed);\n  }\n  \n  getPendingTodos() {\n    return this.todos.filter(t => !t.completed);\n  }\n  \n  getCount() {\n    return {\n      total: this.todos.length,\n      completed: this.getCompletedTodos().length,\n      pending: this.getPendingTodos().length\n    };\n  }\n}\n\n// 状态测试\ndescribe('TodoList 状态管理测试', () => {\n  let todoList;\n  \n  beforeEach(() => {\n    todoList = new TodoList();\n  });\n  \n  describe('添加任务', () => {\n    test('应该正确添加新任务', () => {\n      const todo = todoList.addTodo('学习Jest');\n      \n      expect(todo).toMatchObject({\n        id: 1,\n        text: '学习Jest',\n        completed: false\n      });\n      expect(todo.createdAt).toBeInstanceOf(Date);\n      expect(todoList.getTodos()).toHaveLength(1);\n    });\n    \n    test('应该为每个任务分配唯一ID', () => {\n      const todo1 = todoList.addTodo('任务1');\n      const todo2 = todoList.addTodo('任务2');\n      \n      expect(todo1.id).toBe(1);\n      expect(todo2.id).toBe(2);\n      expect(todo1.id).not.toBe(todo2.id);\n    });\n  });\n  \n  describe('任务状态切换', () => {\n    test('应该正确切换任务完成状态', () => {\n      const todo = todoList.addTodo('测试任务');\n      \n      // 初始状态应该是未完成\n      expect(todo.completed).toBe(false);\n      \n      // 切换为完成\n      const toggledTodo = todoList.toggleTodo(todo.id);\n      expect(toggledTodo.completed).toBe(true);\n      \n      // 再次切换为未完成\n      todoList.toggleTodo(todo.id);\n      expect(todoList.getTodos()[0].completed).toBe(false);\n    });\n    \n    test('切换不存在的任务应该抛出错误', () => {\n      expect(() => todoList.toggleTodo(999)).toThrow('Todo not found');\n    });\n  });\n  \n  describe('任务删除', () => {\n    test('应该正确删除任务', () => {\n      const todo = todoList.addTodo('要删除的任务');\n      \n      expect(todoList.getTodos()).toHaveLength(1);\n      \n      const removedTodo = todoList.removeTodo(todo.id);\n      \n      expect(removedTodo).toEqual(todo);\n      expect(todoList.getTodos()).toHaveLength(0);\n    });\n    \n    test('删除不存在的任务应该抛出错误', () => {\n      expect(() => todoList.removeTodo(999)).toThrow('Todo not found');\n    });\n  });\n  \n  describe('任务统计', () => {\n    beforeEach(() => {\n      todoList.addTodo('任务1');\n      todoList.addTodo('任务2');\n      todoList.addTodo('任务3');\n      \n      // 完成第一个任务\n      todoList.toggleTodo(1);\n    });\n    \n    test('应该正确统计任务数量', () => {\n      const count = todoList.getCount();\n      \n      expect(count).toEqual({\n        total: 3,\n        completed: 1,\n        pending: 2\n      });\n    });\n    \n    test('应该正确获取已完成任务', () => {\n      const completedTodos = todoList.getCompletedTodos();\n      \n      expect(completedTodos).toHaveLength(1);\n      expect(completedTodos[0].text).toBe('任务1');\n      expect(completedTodos[0].completed).toBe(true);\n    });\n    \n    test('应该正确获取待完成任务', () => {\n      const pendingTodos = todoList.getPendingTodos();\n      \n      expect(pendingTodos).toHaveLength(2);\n      expect(pendingTodos.every(t => !t.completed)).toBe(true);\n    });\n  });\n});"
  },
  "exceptionTesting": {
    "title": "异常抛出测试",
    "language": "javascript",
    "code": "// 异常处理函数\nfunction parseJSON(jsonString) {\n  if (typeof jsonString !== 'string') {\n    throw new TypeError('输入必须是字符串');\n  }\n  \n  if (jsonString.trim() === '') {\n    throw new Error('JSON字符串不能为空');\n  }\n  \n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    throw new SyntaxError('无效的JSON格式');\n  }\n}\n\nfunction validateEmail(email) {\n  if (!email) {\n    throw new Error('邮箱地址不能为空');\n  }\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new Error('邮箱格式不正确');\n  }\n  \n  return true;\n}\n\nclass UserService {\n  constructor() {\n    this.users = new Map();\n  }\n  \n  createUser(userData) {\n    if (!userData.email) {\n      throw new Error('邮箱是必填项');\n    }\n    \n    if (this.users.has(userData.email)) {\n      throw new Error('用户已存在');\n    }\n    \n    if (userData.age && (userData.age < 0 || userData.age > 150)) {\n      throw new RangeError('年龄必须在0-150之间');\n    }\n    \n    const user = { ...userData, id: Date.now() };\n    this.users.set(userData.email, user);\n    return user;\n  }\n}\n\n// 异常测试\ndescribe('异常处理测试', () => {\n  describe('parseJSON 函数', () => {\n    test('有效JSON应该正确解析', () => {\n      const result = parseJSON('{\"name\": \"John\"}');\n      expect(result).toEqual({ name: 'John' });\n    });\n    \n    test('非字符串输入应该抛出TypeError', () => {\n      expect(() => parseJSON(123)).toThrow(TypeError);\n      expect(() => parseJSON(123)).toThrow('输入必须是字符串');\n      expect(() => parseJSON(null)).toThrow(TypeError);\n      expect(() => parseJSON(undefined)).toThrow(TypeError);\n    });\n    \n    test('空字符串应该抛出Error', () => {\n      expect(() => parseJSON('')).toThrow(Error);\n      expect(() => parseJSON('   ')).toThrow('JSON字符串不能为空');\n    });\n    \n    test('无效JSON格式应该抛出SyntaxError', () => {\n      expect(() => parseJSON('{invalid json}')).toThrow(SyntaxError);\n      expect(() => parseJSON('{invalid json}')).toThrow('无效的JSON格式');\n    });\n  });\n  \n  describe('validateEmail 函数', () => {\n    test('有效邮箱应该返回true', () => {\n      expect(validateEmail('test@example.com')).toBe(true);\n      expect(validateEmail('user.name@domain.co.uk')).toBe(true);\n    });\n    \n    test('空邮箱应该抛出错误', () => {\n      expect(() => validateEmail('')).toThrow('邮箱地址不能为空');\n      expect(() => validateEmail(null)).toThrow('邮箱地址不能为空');\n      expect(() => validateEmail(undefined)).toThrow('邮箱地址不能为空');\n    });\n    \n    test('无效邮箱格式应该抛出错误', () => {\n      expect(() => validateEmail('invalid-email')).toThrow('邮箱格式不正确');\n      expect(() => validateEmail('test@')).toThrow('邮箱格式不正确');\n      expect(() => validateEmail('@example.com')).toThrow('邮箱格式不正确');\n    });\n  });\n  \n  describe('UserService 类', () => {\n    let userService;\n    \n    beforeEach(() => {\n      userService = new UserService();\n    });\n    \n    test('有效用户数据应该成功创建用户', () => {\n      const userData = { email: 'test@example.com', name: 'John', age: 25 };\n      const user = userService.createUser(userData);\n      \n      expect(user).toMatchObject(userData);\n      expect(user.id).toBeDefined();\n    });\n    \n    test('缺少邮箱应该抛出错误', () => {\n      const userData = { name: 'John' };\n      expect(() => userService.createUser(userData)).toThrow('邮箱是必填项');\n    });\n    \n    test('重复邮箱应该抛出错误', () => {\n      const userData = { email: 'test@example.com', name: 'John' };\n      \n      userService.createUser(userData);\n      \n      expect(() => userService.createUser(userData)).toThrow('用户已存在');\n    });\n    \n    test('无效年龄应该抛出RangeError', () => {\n      const userData1 = { email: 'test1@example.com', age: -1 };\n      const userData2 = { email: 'test2@example.com', age: 151 };\n      \n      expect(() => userService.createUser(userData1)).toThrow(RangeError);\n      expect(() => userService.createUser(userData1)).toThrow('年龄必须在0-150之间');\n      expect(() => userService.createUser(userData2)).toThrow(RangeError);\n    });\n  });\n});"
  },
  "errorHandling": {
    "title": "错误处理测试",
    "language": "javascript",
    "code": "// 错误处理工具类\nclass ErrorHandler {\n  static handleApiError(error) {\n    if (error.response) {\n      // 服务器响应错误\n      switch (error.response.status) {\n        case 400:\n          return { type: 'validation', message: '请求参数错误' };\n        case 401:\n          return { type: 'auth', message: '未授权访问' };\n        case 404:\n          return { type: 'notFound', message: '资源不存在' };\n        case 500:\n          return { type: 'server', message: '服务器内部错误' };\n        default:\n          return { type: 'unknown', message: '未知错误' };\n      }\n    } else if (error.request) {\n      // 网络错误\n      return { type: 'network', message: '网络连接失败' };\n    } else {\n      // 其他错误\n      return { type: 'client', message: error.message };\n    }\n  }\n  \n  static retry(fn, maxAttempts = 3, delay = 1000) {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      \n      const attempt = () => {\n        attempts++;\n        \n        fn()\n          .then(resolve)\n          .catch(error => {\n            if (attempts >= maxAttempts) {\n              reject(new Error(`操作失败，已重试${maxAttempts}次: ${error.message}`));\n            } else {\n              setTimeout(attempt, delay);\n            }\n          });\n      };\n      \n      attempt();\n    });\n  }\n}\n\n// 模拟API服务\nclass ApiService {\n  constructor() {\n    this.failureCount = 0;\n  }\n  \n  async fetchUser(id) {\n    // 模拟网络延迟\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    if (id === 'network-error') {\n      const error = new Error('Network Error');\n      error.request = true;\n      throw error;\n    }\n    \n    if (id === 'server-error') {\n      const error = new Error('Server Error');\n      error.response = { status: 500 };\n      throw error;\n    }\n    \n    if (id === 'not-found') {\n      const error = new Error('Not Found');\n      error.response = { status: 404 };\n      throw error;\n    }\n    \n    if (id === 'unauthorized') {\n      const error = new Error('Unauthorized');\n      error.response = { status: 401 };\n      throw error;\n    }\n    \n    return { id, name: `User ${id}` };\n  }\n  \n  async unreliableOperation() {\n    this.failureCount++;\n    \n    if (this.failureCount <= 2) {\n      throw new Error('临时失败');\n    }\n    \n    return '操作成功';\n  }\n}\n\n// 错误处理测试\ndescribe('错误处理测试', () => {\n  describe('ErrorHandler.handleApiError', () => {\n    test('应该正确处理400错误', () => {\n      const error = {\n        response: { status: 400 }\n      };\n      \n      const result = ErrorHandler.handleApiError(error);\n      \n      expect(result).toEqual({\n        type: 'validation',\n        message: '请求参数错误'\n      });\n    });\n    \n    test('应该正确处理401错误', () => {\n      const error = {\n        response: { status: 401 }\n      };\n      \n      const result = ErrorHandler.handleApiError(error);\n      \n      expect(result).toEqual({\n        type: 'auth',\n        message: '未授权访问'\n      });\n    });\n    \n    test('应该正确处理网络错误', () => {\n      const error = {\n        request: true,\n        message: 'Network Error'\n      };\n      \n      const result = ErrorHandler.handleApiError(error);\n      \n      expect(result).toEqual({\n        type: 'network',\n        message: '网络连接失败'\n      });\n    });\n    \n    test('应该正确处理客户端错误', () => {\n      const error = {\n        message: '客户端错误'\n      };\n      \n      const result = ErrorHandler.handleApiError(error);\n      \n      expect(result).toEqual({\n        type: 'client',\n        message: '客户端错误'\n      });\n    });\n  });\n  \n  describe('ErrorHandler.retry', () => {\n    let apiService;\n    \n    beforeEach(() => {\n      apiService = new ApiService();\n    });\n    \n    test('应该在重试后成功', async () => {\n      const operation = () => apiService.unreliableOperation();\n      \n      const result = await ErrorHandler.retry(operation, 3, 10);\n      \n      expect(result).toBe('操作成功');\n      expect(apiService.failureCount).toBe(3);\n    });\n    \n    test('超过最大重试次数应该失败', async () => {\n      const operation = () => Promise.reject(new Error('持续失败'));\n      \n      await expect(ErrorHandler.retry(operation, 2, 10))\n        .rejects\n        .toThrow('操作失败，已重试2次: 持续失败');\n    });\n  });\n  \n  describe('ApiService 错误场景', () => {\n    let apiService;\n    \n    beforeEach(() => {\n      apiService = new ApiService();\n    });\n    \n    test('正常请求应该成功', async () => {\n      const user = await apiService.fetchUser('123');\n      \n      expect(user).toEqual({\n        id: '123',\n        name: 'User 123'\n      });\n    });\n    \n    test('网络错误应该被正确处理', async () => {\n      try {\n        await apiService.fetchUser('network-error');\n      } catch (error) {\n        const handled = ErrorHandler.handleApiError(error);\n        expect(handled.type).toBe('network');\n      }\n    });\n    \n    test('服务器错误应该被正确处理', async () => {\n      try {\n        await apiService.fetchUser('server-error');\n      } catch (error) {\n        const handled = ErrorHandler.handleApiError(error);\n        expect(handled.type).toBe('server');\n      }\n    });\n  });\n});"
  }
}
