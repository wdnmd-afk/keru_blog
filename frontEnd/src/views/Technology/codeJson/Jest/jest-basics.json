{
  "installation": {
    "title": "Jest 安装",
    "language": "bash",
    "code": "# 使用 npm 安装\nnpm install --save-dev jest\n\n# 使用 yarn 安装\nyarn add --dev jest\n\n# 安装 TypeScript 支持\nnpm install --save-dev jest @types/jest ts-jest typescript\n\n# 安装 Babel 支持\nnpm install --save-dev jest babel-jest @babel/core @babel/preset-env\n\n# 全局安装（不推荐）\nnpm install -g jest"
  },
  "basicConfiguration": {
    "title": "Jest 基础配置",
    "language": "javascript",
    "code": "// jest.config.js\nmodule.exports = {\n  // 测试环境\n  testEnvironment: 'node', // 或 'jsdom' 用于浏览器环境\n  \n  // 测试文件匹配模式\n  testMatch: [\n    '**/__tests__/**/*.(js|jsx|ts|tsx)',\n    '**/*.(test|spec).(js|jsx|ts|tsx)'\n  ],\n  \n  // 覆盖率收集\n  collectCoverage: true,\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/index.js'\n  ],\n  \n  // 覆盖率报告格式\n  coverageReporters: ['text', 'lcov', 'html'],\n  \n  // 覆盖率阈值\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  },\n  \n  // 模块路径映射\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/src/$1'\n  },\n  \n  // 设置文件\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],\n  \n  // 转换配置\n  transform: {\n    '^.+\\\\.(js|jsx|ts|tsx)$': 'babel-jest'\n  },\n  \n  // 忽略转换的文件\n  transformIgnorePatterns: [\n    'node_modules/(?!(module-to-transform)/)',\n  ],\n  \n  // 清除模拟\n  clearMocks: true,\n  \n  // 详细输出\n  verbose: true\n}"
  },
  "typescriptConfiguration": {
    "title": "TypeScript 配置",
    "language": "javascript",
    "code": "// jest.config.js (TypeScript 项目)\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  \n  // TypeScript 文件匹配\n  testMatch: [\n    '**/__tests__/**/*.ts',\n    '**/?(*.)+(spec|test).ts'\n  ],\n  \n  // 转换配置\n  transform: {\n    '^.+\\\\.ts$': 'ts-jest'\n  },\n  \n  // 模块文件扩展名\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  \n  // TypeScript 配置\n  globals: {\n    'ts-jest': {\n      tsconfig: 'tsconfig.json'\n    }\n  },\n  \n  // 覆盖率收集\n  collectCoverageFrom: [\n    'src/**/*.ts',\n    '!src/**/*.d.ts'\n  ]\n}\n\n// package.json scripts\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:ci\": \"jest --ci --coverage --watchAll=false\"\n  }\n}\n\n// tsconfig.json (测试相关配置)\n{\n  \"compilerOptions\": {\n    \"types\": [\"jest\", \"node\"]\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"**/*.test.ts\",\n    \"**/*.spec.ts\"\n  ]\n}"
  },
  "testStructure": {
    "title": "测试结构",
    "language": "javascript",
    "code": "// 基本测试结构\ndescribe('Calculator', () => {\n  // 测试组描述\n  \n  beforeAll(() => {\n    // 在所有测试前执行一次\n    console.log('开始测试 Calculator');\n  });\n  \n  afterAll(() => {\n    // 在所有测试后执行一次\n    console.log('Calculator 测试完成');\n  });\n  \n  beforeEach(() => {\n    // 在每个测试前执行\n    // 初始化测试数据\n  });\n  \n  afterEach(() => {\n    // 在每个测试后执行\n    // 清理测试数据\n  });\n  \n  describe('add 方法', () => {\n    // 嵌套测试组\n    \n    test('应该正确计算两个正数的和', () => {\n      // 具体测试用例\n      const result = add(2, 3);\n      expect(result).toBe(5);\n    });\n    \n    test('应该正确处理负数', () => {\n      expect(add(-1, 1)).toBe(0);\n      expect(add(-2, -3)).toBe(-5);\n    });\n    \n    test('应该正确处理小数', () => {\n      expect(add(0.1, 0.2)).toBeCloseTo(0.3);\n    });\n  });\n  \n  describe('subtract 方法', () => {\n    test('应该正确计算减法', () => {\n      expect(subtract(5, 3)).toBe(2);\n      expect(subtract(0, 5)).toBe(-5);\n    });\n  });\n});\n\n// 单独的测试用例\ntest('全局测试用例', () => {\n  expect(true).toBeTruthy();\n});\n\n// 使用 it 代替 test（功能相同）\nit('应该通过测试', () => {\n  expect(1 + 1).toBe(2);\n});"
  },
  "commonMatchers": {
    "title": "常用匹配器",
    "language": "javascript",
    "code": "// 相等性匹配器\nexpect(2 + 2).toBe(4);                    // 严格相等 (===)\nexpect({name: 'John'}).toEqual({name: 'John'}); // 深度相等\n\n// 真值匹配器\nexpect(true).toBeTruthy();                // 真值\nexpect(false).toBeFalsy();                // 假值\nexpect(null).toBeNull();                  // null\nexpect(undefined).toBeUndefined();        // undefined\nexpect('Hello').toBeDefined();            // 已定义\n\n// 数字匹配器\nexpect(2 + 2).toBeGreaterThan(3);        // 大于\nexpect(3.14).toBeGreaterThanOrEqual(3);  // 大于等于\nexpect(2).toBeLessThan(5);               // 小于\nexpect(3.14).toBeLessThanOrEqual(3.15);  // 小于等于\nexpect(0.1 + 0.2).toBeCloseTo(0.3);      // 浮点数近似相等\n\n// 字符串匹配器\nexpect('Hello World').toMatch(/World/);   // 正则匹配\nexpect('Hello World').toMatch('World');   // 字符串包含\nexpect('Hello').toHaveLength(5);          // 长度匹配\n\n// 数组匹配器\nexpect(['Alice', 'Bob', 'Eve']).toContain('Alice');     // 包含元素\nexpect(['a', 'b', 'c']).toHaveLength(3);                // 数组长度\nexpect([1, 2, 3]).toEqual(expect.arrayContaining([1, 2])); // 包含子数组\n\n// 对象匹配器\nexpect({name: 'John', age: 30}).toHaveProperty('name');           // 有属性\nexpect({name: 'John', age: 30}).toHaveProperty('name', 'John');   // 属性值\nexpect({a: 1, b: 2}).toMatchObject({a: 1});                      // 部分匹配\n\n// 异常匹配器\nexpect(() => {\n  throw new Error('Something went wrong');\n}).toThrow();                                    // 抛出异常\nexpect(() => {\n  throw new Error('Something went wrong');\n}).toThrow('Something went wrong');              // 抛出特定异常\n\n// 函数匹配器\nconst mockFn = jest.fn();\nmockFn('arg1', 'arg2');\nexpect(mockFn).toHaveBeenCalled();              // 被调用\nexpect(mockFn).toHaveBeenCalledWith('arg1', 'arg2'); // 被特定参数调用\nexpect(mockFn).toHaveBeenCalledTimes(1);        // 调用次数\n\n// 否定匹配器\nexpect(2 + 2).not.toBe(5);                      // 不等于\nexpect('Hello').not.toMatch(/Goodbye/);         // 不匹配"
  },
  "testCommands": {
    "title": "Jest 测试命令",
    "language": "bash",
    "code": "# 基本测试命令\nnpx jest                    # 运行所有测试\nnpm test                    # 使用 npm scripts 运行测试\nyarn test                   # 使用 yarn 运行测试\n\n# 运行特定测试文件\nnpx jest calculator.test.js\nnpx jest --testNamePattern=\"add\"\n\n# 运行匹配模式的测试\nnpx jest --testPathPattern=\"calculator\"\nnpx jest src/utils/\n\n# 覆盖率相关\nnpx jest --coverage         # 生成覆盖率报告\nnpx jest --coverage --coverageDirectory=coverage\n\n# 监视模式\nnpx jest --watch           # 监视文件变化\nnpx jest --watchAll        # 监视所有文件\n\n# 调试模式\nnpx jest --verbose         # 详细输出\nnpx jest --silent          # 静默模式\nnpx jest --debug           # 调试模式\n\n# 并行控制\nnpx jest --maxWorkers=4    # 设置最大工作进程数\nnpx jest --runInBand       # 串行运行测试\n\n# 更新快照\nnpx jest --updateSnapshot  # 更新所有快照\nnpx jest -u                # 更新快照（简写）\n\n# 配置文件\nnpx jest --config=jest.config.js\nnpx jest --no-cache        # 禁用缓存\nnpx jest --clearCache      # 清除缓存\n\n# CI 环境\nnpx jest --ci              # CI 模式\nnpx jest --passWithNoTests # 没有测试时也通过"
  },
  "watchMode": {
    "title": "监视模式",
    "language": "bash",
    "code": "# 启动监视模式\nnpx jest --watch\n\n# 监视模式下的交互命令\n# 按下以下键进行操作：\n\n# › Press f to run only failed tests.\n# › Press o to only run tests related to changed files.\n# › Press p to filter by a filename regex pattern.\n# › Press t to filter by a test name regex pattern.\n# › Press q to quit watch mode.\n# › Press Enter to trigger a test run.\n\n# 监视所有文件（包括未在 git 中的文件）\nnpx jest --watchAll\n\n# 监视模式配置\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:watchAll\": \"jest --watchAll\"\n  },\n  \"jest\": {\n    \"watchman\": true,  // 使用 Watchman 文件监视器\n    \"watchPathIgnorePatterns\": [\n      \"node_modules\",\n      \"build\",\n      \"dist\"\n    ]\n  }\n}\n\n# 监视特定文件模式\nnpx jest --watch --testPathPattern=\"src/components\"\n\n# 监视模式下运行覆盖率\nnpx jest --watch --coverage\n\n# 监视模式下的环境变量\nCI=true npx jest --watch  # 在 CI 环境中禁用监视模式"
  },
  "projectStructure": {
    "title": "推荐的项目结构",
    "language": "text",
    "code": "my-project/\n├── src/\n│   ├── components/\n│   │   ├── Button/\n│   │   │   ├── Button.js\n│   │   │   ├── Button.test.js\n│   │   │   └── index.js\n│   │   └── Modal/\n│   │       ├── Modal.js\n│   │       ├── Modal.test.js\n│   │       └── index.js\n│   ├── utils/\n│   │   ├── calculator.js\n│   │   └── calculator.test.js\n│   ├── services/\n│   │   ├── api.js\n│   │   └── api.test.js\n│   └── __tests__/\n│       ├── integration/\n│       │   └── app.test.js\n│       └── setup/\n│           └── setupTests.js\n├── tests/\n│   ├── fixtures/\n│   │   └── mockData.js\n│   ├── helpers/\n│   │   └── testUtils.js\n│   └── __mocks__/\n│       ├── fs.js\n│       └── axios.js\n├── coverage/\n│   ├── lcov-report/\n│   └── coverage-final.json\n├── jest.config.js\n├── package.json\n└── README.md\n\n# 测试文件命名约定\n# 1. 与源文件同目录：component.test.js\n# 2. __tests__ 目录：__tests__/component.js\n# 3. 使用 .spec.js 后缀：component.spec.js\n\n# 推荐的测试文件组织\n# - 单元测试：与源文件同目录\n# - 集成测试：单独的 tests 目录\n# - 端到端测试：e2e 目录\n# - 测试工具：tests/helpers 目录\n# - Mock 文件：__mocks__ 目录"
  }
}
