{
    "basicCoverageConfig": {
        "title": "基础覆盖率配置",
        "language": "javascript",
        "code": "// jest.config.js - 基础覆盖率配置\nmodule.exports = {\n  // 启用覆盖率收集\n  collectCoverage: true,\n  \n  // 指定覆盖率收集的文件\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/index.js',\n    '!src/serviceWorker.js',\n    '!src/setupTests.js'\n  ],\n  \n  // 覆盖率报告格式\n  coverageReporters: [\n    'text',        // 控制台文本报告\n    'text-summary', // 简要文本报告\n    'html',        // HTML报告\n    'lcov',        // LCOV格式（用于CI/CD）\n    'json'         // JSON格式\n  ],\n  \n  // 覆盖率输出目录\n  coverageDirectory: 'coverage',\n  \n  // 覆盖率阈值\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n\n// package.json scripts\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:coverage\": \"jest --coverage\",\n    \"test:coverage:watch\": \"jest --coverage --watch\",\n    \"test:coverage:ci\": \"jest --coverage --ci --watchAll=false\"\n  }\n}\n\n// 运行覆盖率测试\n# 生成覆盖率报告\nnpm run test:coverage\n\n# 监视模式下的覆盖率\nnpm run test:coverage:watch\n\n# CI环境下的覆盖率\nnpm run test:coverage:ci"
    },
    "advancedCoverageConfig": {
        "title": "高级覆盖率配置",
        "language": "javascript",
        "code": "// jest.config.js - 高级覆盖率配置\nmodule.exports = {\n  collectCoverage: true,\n  \n  // 详细的文件包含/排除规则\n  collectCoverageFrom: [\n    // 包含的文件\n    'src/**/*.{js,jsx,ts,tsx}',\n    'lib/**/*.{js,ts}',\n    \n    // 排除的文件\n    '!src/**/*.test.{js,jsx,ts,tsx}',\n    '!src/**/*.spec.{js,jsx,ts,tsx}',\n    '!src/**/*.stories.{js,jsx,ts,tsx}',\n    '!src/**/__tests__/**',\n    '!src/**/__mocks__/**',\n    '!src/**/node_modules/**',\n    '!src/**/*.d.ts',\n    '!src/index.{js,ts}',\n    '!src/serviceWorker.{js,ts}',\n    '!src/setupTests.{js,ts}',\n    '!src/reportWebVitals.{js,ts}',\n    \n    // 排除配置文件\n    '!src/config/**',\n    '!src/constants/**',\n    '!src/types/**',\n    \n    // 排除样式文件\n    '!src/**/*.{css,scss,sass,less}',\n    \n    // 排除静态资源\n    '!src/assets/**'\n  ],\n  \n  // 覆盖率报告配置\n  coverageReporters: [\n    'text',\n    'text-summary',\n    'html',\n    'lcov',\n    'json',\n    'json-summary',\n    'cobertura',  // 用于某些CI系统\n    'clover'      // 用于某些代码质量工具\n  ],\n  \n  // 自定义覆盖率报告目录\n  coverageDirectory: 'coverage',\n  \n  // 覆盖率路径映射\n  coveragePathIgnorePatterns: [\n    '/node_modules/',\n    '/build/',\n    '/dist/',\n    '/coverage/',\n    '\\\\.stories\\\\.',\n    '\\\\.test\\\\.',\n    '\\\\.spec\\\\.'\n  ],\n  \n  // 强制覆盖率收集（即使没有测试文件）\n  forceCoverageMatch: [\n    '**/src/utils/**/*.{js,ts}',\n    '**/src/helpers/**/*.{js,ts}'\n  ],\n  \n  // 覆盖率提供者（v8引擎更快）\n  coverageProvider: 'v8', // 或 'babel'\n  \n  // 自定义覆盖率阈值\n  coverageThreshold: {\n    global: {\n      branches: 85,\n      functions: 85,\n      lines: 85,\n      statements: 85\n    },\n    // 针对特定文件的阈值\n    './src/utils/': {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    },\n    './src/components/': {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n\n// TypeScript 项目的覆盖率配置\nmodule.exports = {\n  preset: 'ts-jest',\n  collectCoverage: true,\n  \n  collectCoverageFrom: [\n    'src/**/*.{ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/**/*.test.{ts,tsx}',\n    '!src/**/*.spec.{ts,tsx}'\n  ],\n  \n  // TypeScript 覆盖率映射\n  coveragePathIgnorePatterns: [\n    '/node_modules/',\n    '/dist/',\n    '\\\\.d\\\\.ts$'\n  ]\n};"
    },
    "coverageThresholds": {
        "title": "覆盖率阈值配置",
        "language": "javascript",
        "code": "// jest.config.js - 详细的阈值配置\nmodule.exports = {\n  coverageThreshold: {\n    // 全局阈值\n    global: {\n      branches: 80,    // 分支覆盖率\n      functions: 85,   // 函数覆盖率\n      lines: 80,       // 行覆盖率\n      statements: 80   // 语句覆盖率\n    },\n    \n    // 核心业务逻辑 - 高标准\n    './src/services/': {\n      branches: 90,\n      functions: 95,\n      lines: 90,\n      statements: 90\n    },\n    \n    // 工具函数 - 高标准\n    './src/utils/': {\n      branches: 95,\n      functions: 100,\n      lines: 95,\n      statements: 95\n    },\n    \n    // 组件 - 中等标准\n    './src/components/': {\n      branches: 75,\n      functions: 80,\n      lines: 75,\n      statements: 75\n    },\n    \n    // 页面组件 - 较低标准\n    './src/pages/': {\n      branches: 60,\n      functions: 70,\n      lines: 60,\n      statements: 60\n    },\n    \n    // 特定文件的阈值\n    './src/utils/calculator.js': {\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100\n    }\n  }\n};\n\n// 渐进式阈值提升策略\n// 第一阶段：建立基线\nconst phase1Thresholds = {\n  global: {\n    branches: 60,\n    functions: 70,\n    lines: 65,\n    statements: 65\n  }\n};\n\n// 第二阶段：提升标准\nconst phase2Thresholds = {\n  global: {\n    branches: 75,\n    functions: 80,\n    lines: 75,\n    statements: 75\n  }\n};\n\n// 第三阶段：高标准\nconst phase3Thresholds = {\n  global: {\n    branches: 85,\n    functions: 90,\n    lines: 85,\n    statements: 85\n  }\n};\n\n// 动态阈值配置\nconst getCoverageThreshold = () => {\n  const phase = process.env.COVERAGE_PHASE || 'phase1';\n  \n  switch (phase) {\n    case 'phase1': return phase1Thresholds;\n    case 'phase2': return phase2Thresholds;\n    case 'phase3': return phase3Thresholds;\n    default: return phase1Thresholds;\n  }\n};\n\nmodule.exports = {\n  coverageThreshold: getCoverageThreshold()\n};\n\n// 使用环境变量控制阈值\n# 设置覆盖率阶段\nCOVERAGE_PHASE=phase2 npm run test:coverage\n\n// 条件阈值配置\nmodule.exports = {\n  coverageThreshold: {\n    global: {\n      // 生产环境更严格\n      branches: process.env.NODE_ENV === 'production' ? 90 : 80,\n      functions: process.env.NODE_ENV === 'production' ? 95 : 85,\n      lines: process.env.NODE_ENV === 'production' ? 90 : 80,\n      statements: process.env.NODE_ENV === 'production' ? 90 : 80\n    }\n  }\n};"
    },
    "directoryThresholds": {
        "title": "分目录阈值配置",
        "language": "javascript",
        "code": "// jest.config.js - 分目录阈值配置\nmodule.exports = {\n  coverageThreshold: {\n    // 全局基线阈值\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    },\n    \n    // API 服务层 - 最高标准\n    './src/api/': {\n      branches: 95,\n      functions: 100,\n      lines: 95,\n      statements: 95\n    },\n    \n    // 数据处理层 - 高标准\n    './src/data/': {\n      branches: 90,\n      functions: 95,\n      lines: 90,\n      statements: 90\n    },\n    \n    // 业务逻辑层 - 高标准\n    './src/business/': {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    },\n    \n    // 工具函数 - 高标准\n    './src/utils/': {\n      branches: 95,\n      functions: 100,\n      lines: 95,\n      statements: 95\n    },\n    \n    // 助手函数 - 高标准\n    './src/helpers/': {\n      branches: 90,\n      functions: 95,\n      lines: 90,\n      statements: 90\n    },\n    \n    // 验证器 - 高标准\n    './src/validators/': {\n      branches: 95,\n      functions: 100,\n      lines: 95,\n      statements: 95\n    },\n    \n    // 组件库 - 中等标准\n    './src/components/': {\n      branches: 75,\n      functions: 80,\n      lines: 75,\n      statements: 75\n    },\n    \n    // UI 组件 - 中等标准\n    './src/ui/': {\n      branches: 70,\n      functions: 75,\n      lines: 70,\n      statements: 70\n    },\n    \n    // 页面组件 - 较低标准\n    './src/pages/': {\n      branches: 60,\n      functions: 70,\n      lines: 60,\n      statements: 60\n    },\n    \n    // 布局组件 - 较低标准\n    './src/layouts/': {\n      branches: 50,\n      functions: 60,\n      lines: 50,\n      statements: 50\n    },\n    \n    // 路由配置 - 较低标准\n    './src/routes/': {\n      branches: 40,\n      functions: 50,\n      lines: 40,\n      statements: 40\n    },\n    \n    // 样式相关 - 最低标准或排除\n    './src/styles/': {\n      branches: 0,\n      functions: 0,\n      lines: 0,\n      statements: 0\n    }\n  }\n};\n\n// 基于文件类型的阈值配置\nconst getThresholdByFileType = (filePath) => {\n  // 核心业务文件\n  if (filePath.includes('/services/') || filePath.includes('/api/')) {\n    return { branches: 95, functions: 100, lines: 95, statements: 95 };\n  }\n  \n  // 工具函数\n  if (filePath.includes('/utils/') || filePath.includes('/helpers/')) {\n    return { branches: 90, functions: 95, lines: 90, statements: 90 };\n  }\n  \n  // 组件文件\n  if (filePath.includes('/components/')) {\n    return { branches: 75, functions: 80, lines: 75, statements: 75 };\n  }\n  \n  // 页面文件\n  if (filePath.includes('/pages/') || filePath.includes('/views/')) {\n    return { branches: 60, functions: 70, lines: 60, statements: 60 };\n  }\n  \n  // 默认阈值\n  return { branches: 80, functions: 80, lines: 80, statements: 80 };\n};\n\n// 动态生成阈值配置\nconst generateCoverageThresholds = () => {\n  const fs = require('fs');\n  const path = require('path');\n  const thresholds = { global: { branches: 80, functions: 80, lines: 80, statements: 80 } };\n  \n  // 扫描源码目录\n  const scanDirectory = (dir) => {\n    const items = fs.readdirSync(dir);\n    \n    items.forEach(item => {\n      const fullPath = path.join(dir, item);\n      const stat = fs.statSync(fullPath);\n      \n      if (stat.isDirectory() && !item.startsWith('.')) {\n        const relativePath = `./${path.relative(process.cwd(), fullPath)}/`;\n        thresholds[relativePath] = getThresholdByFileType(relativePath);\n        scanDirectory(fullPath);\n      }\n    });\n  };\n  \n  scanDirectory('./src');\n  return thresholds;\n};\n\n// 使用动态生成的阈值\nmodule.exports = {\n  coverageThreshold: generateCoverageThresholds()\n};"
    },
    "reportFormats": {
        "title": "覆盖率报告格式",
        "language": "javascript",
        "code": "// jest.config.js - 报告格式配置\nmodule.exports = {\n  coverageReporters: [\n    // 文本格式报告\n    'text',              // 详细的控制台输出\n    'text-summary',      // 简要的控制台摘要\n    'text-lcov',         // LCOV格式的文本输出\n    \n    // HTML 格式报告\n    'html',              // 完整的HTML报告\n    'html-spa',          // 单页应用HTML报告\n    \n    // JSON 格式报告\n    'json',              // 详细的JSON报告\n    'json-summary',      // 简要的JSON摘要\n    \n    // LCOV 格式（用于CI/CD）\n    'lcov',              // LCOV格式文件\n    'lcovonly',          // 仅LCOV文件\n    \n    // 其他格式\n    'cobertura',         // Cobertura XML格式\n    'clover',            // Clover XML格式\n    'teamcity',          // TeamCity格式\n    'none'               // 不生成报告\n  ],\n  \n  // 自定义报告器\n  coverageReporters: [\n    'text',\n    'html',\n    ['lcov', { projectRoot: '../../' }],\n    ['json', { file: 'coverage-final.json' }],\n    ['text-summary', { file: 'coverage-summary.txt' }]\n  ]\n};\n\n// 环境特定的报告配置\nconst getCoverageReporters = () => {\n  const baseReporters = ['text', 'text-summary'];\n  \n  if (process.env.CI) {\n    // CI 环境：生成机器可读的格式\n    return [...baseReporters, 'lcov', 'json', 'cobertura'];\n  } else {\n    // 本地开发：生成人类可读的格式\n    return [...baseReporters, 'html'];\n  }\n};\n\nmodule.exports = {\n  coverageReporters: getCoverageReporters()\n};\n\n// 自定义报告器示例\nclass CustomCoverageReporter {\n  constructor(globalConfig, options) {\n    this._globalConfig = globalConfig;\n    this._options = options;\n  }\n  \n  onRunComplete(contexts, results) {\n    const { coverageMap } = results;\n    \n    if (coverageMap) {\n      const summary = coverageMap.getCoverageSummary();\n      \n      console.log('\\n=== 自定义覆盖率报告 ===');\n      console.log(`总体覆盖率: ${summary.lines.pct}%`);\n      console.log(`分支覆盖率: ${summary.branches.pct}%`);\n      console.log(`函数覆盖率: ${summary.functions.pct}%`);\n      console.log(`语句覆盖率: ${summary.statements.pct}%`);\n      \n      // 生成自定义报告文件\n      const fs = require('fs');\n      const reportData = {\n        timestamp: new Date().toISOString(),\n        summary: {\n          lines: summary.lines.pct,\n          branches: summary.branches.pct,\n          functions: summary.functions.pct,\n          statements: summary.statements.pct\n        }\n      };\n      \n      fs.writeFileSync(\n        'coverage/custom-report.json',\n        JSON.stringify(reportData, null, 2)\n      );\n    }\n  }\n}\n\nmodule.exports = {\n  coverageReporters: [\n    'text',\n    'html',\n    ['<rootDir>/custom-coverage-reporter.js', {}]\n  ]\n};\n\n// 报告输出目录配置\nmodule.exports = {\n  coverageDirectory: 'coverage',\n  \n  // 自定义报告文件名\n  coverageReporters: [\n    ['html', { subdir: 'html-report' }],\n    ['lcov', { file: 'lcov.info' }],\n    ['json', { file: 'coverage.json' }],\n    ['text-summary', { file: 'summary.txt' }]\n  ]\n};"
    },
    "customReports": {
        "title": "自定义覆盖率报告",
        "language": "javascript",
        "code": "// 自定义覆盖率报告器\nclass DetailedCoverageReporter {\n  constructor(globalConfig, options) {\n    this._globalConfig = globalConfig;\n    this._options = options || {};\n  }\n  \n  onRunComplete(contexts, results) {\n    const { coverageMap } = results;\n    \n    if (!coverageMap) {\n      console.log('没有覆盖率数据');\n      return;\n    }\n    \n    this.generateDetailedReport(coverageMap);\n    this.generateTrendReport(coverageMap);\n    this.generateQualityReport(coverageMap);\n  }\n  \n  generateDetailedReport(coverageMap) {\n    const files = coverageMap.files();\n    const report = [];\n    \n    files.forEach(file => {\n      const fileCoverage = coverageMap.fileCoverageFor(file);\n      const summary = fileCoverage.toSummary();\n      \n      report.push({\n        file: file.replace(process.cwd(), ''),\n        lines: {\n          total: summary.lines.total,\n          covered: summary.lines.covered,\n          percentage: summary.lines.pct\n        },\n        branches: {\n          total: summary.branches.total,\n          covered: summary.branches.covered,\n          percentage: summary.branches.pct\n        },\n        functions: {\n          total: summary.functions.total,\n          covered: summary.functions.covered,\n          percentage: summary.functions.pct\n        },\n        statements: {\n          total: summary.statements.total,\n          covered: summary.statements.covered,\n          percentage: summary.statements.pct\n        }\n      });\n    });\n    \n    // 按覆盖率排序\n    report.sort((a, b) => a.lines.percentage - b.lines.percentage);\n    \n    // 输出最低覆盖率的文件\n    console.log('\\n=== 覆盖率最低的文件 ===');\n    report.slice(0, 10).forEach(item => {\n      console.log(`${item.file}: ${item.lines.percentage}%`);\n    });\n    \n    // 保存详细报告\n    const fs = require('fs');\n    fs.writeFileSync(\n      'coverage/detailed-report.json',\n      JSON.stringify(report, null, 2)\n    );\n  }\n  \n  generateTrendReport(coverageMap) {\n    const fs = require('fs');\n    const path = require('path');\n    const trendFile = 'coverage/trend.json';\n    \n    const summary = coverageMap.getCoverageSummary();\n    const currentData = {\n      timestamp: new Date().toISOString(),\n      lines: summary.lines.pct,\n      branches: summary.branches.pct,\n      functions: summary.functions.pct,\n      statements: summary.statements.pct\n    };\n    \n    let trendData = [];\n    if (fs.existsSync(trendFile)) {\n      trendData = JSON.parse(fs.readFileSync(trendFile, 'utf8'));\n    }\n    \n    trendData.push(currentData);\n    \n    // 只保留最近30次的数据\n    if (trendData.length > 30) {\n      trendData = trendData.slice(-30);\n    }\n    \n    fs.writeFileSync(trendFile, JSON.stringify(trendData, null, 2));\n    \n    // 分析趋势\n    if (trendData.length > 1) {\n      const previous = trendData[trendData.length - 2];\n      const current = trendData[trendData.length - 1];\n      \n      console.log('\\n=== 覆盖率趋势 ===');\n      console.log(`行覆盖率: ${previous.lines}% → ${current.lines}% (${current.lines - previous.lines > 0 ? '+' : ''}${(current.lines - previous.lines).toFixed(2)}%)`);\n      console.log(`分支覆盖率: ${previous.branches}% → ${current.branches}% (${current.branches - previous.branches > 0 ? '+' : ''}${(current.branches - previous.branches).toFixed(2)}%)`);\n    }\n  }\n  \n  generateQualityReport(coverageMap) {\n    const files = coverageMap.files();\n    const qualityIssues = [];\n    \n    files.forEach(file => {\n      const fileCoverage = coverageMap.fileCoverageFor(file);\n      const summary = fileCoverage.toSummary();\n      \n      // 检查质量问题\n      if (summary.lines.pct < 70) {\n        qualityIssues.push({\n          file: file.replace(process.cwd(), ''),\n          issue: 'low_line_coverage',\n          value: summary.lines.pct,\n          severity: summary.lines.pct < 50 ? 'high' : 'medium'\n        });\n      }\n      \n      if (summary.branches.pct < 60) {\n        qualityIssues.push({\n          file: file.replace(process.cwd(), ''),\n          issue: 'low_branch_coverage',\n          value: summary.branches.pct,\n          severity: summary.branches.pct < 40 ? 'high' : 'medium'\n        });\n      }\n    });\n    \n    if (qualityIssues.length > 0) {\n      console.log('\\n=== 覆盖率质量问题 ===');\n      qualityIssues.forEach(issue => {\n        const emoji = issue.severity === 'high' ? '🔴' : '🟡';\n        console.log(`${emoji} ${issue.file}: ${issue.issue} (${issue.value}%)`);\n      });\n    }\n    \n    // 保存质量报告\n    const fs = require('fs');\n    fs.writeFileSync(\n      'coverage/quality-report.json',\n      JSON.stringify(qualityIssues, null, 2)\n    );\n  }\n}\n\nmodule.exports = DetailedCoverageReporter;\n\n// 使用自定义报告器\n// jest.config.js\nmodule.exports = {\n  coverageReporters: [\n    'text',\n    'html',\n    ['<rootDir>/detailed-coverage-reporter.js', {\n      outputFile: 'coverage/custom-report.json'\n    }]\n  ]\n};\n\n// Slack 通知报告器\nclass SlackCoverageReporter {\n  constructor(globalConfig, options) {\n    this._options = options || {};\n  }\n  \n  async onRunComplete(contexts, results) {\n    const { coverageMap } = results;\n    \n    if (!coverageMap || !this._options.webhookUrl) {\n      return;\n    }\n    \n    const summary = coverageMap.getCoverageSummary();\n    const message = {\n      text: '测试覆盖率报告',\n      attachments: [\n        {\n          color: summary.lines.pct >= 80 ? 'good' : summary.lines.pct >= 60 ? 'warning' : 'danger',\n          fields: [\n            { title: '行覆盖率', value: `${summary.lines.pct}%`, short: true },\n            { title: '分支覆盖率', value: `${summary.branches.pct}%`, short: true },\n            { title: '函数覆盖率', value: `${summary.functions.pct}%`, short: true },\n            { title: '语句覆盖率', value: `${summary.statements.pct}%`, short: true }\n          ]\n        }\n      ]\n    };\n    \n    try {\n      const fetch = require('node-fetch');\n      await fetch(this._options.webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(message)\n      });\n    } catch (error) {\n      console.error('发送Slack通知失败:', error);\n    }\n  }\n}\n\n// 使用 Slack 报告器\nmodule.exports = {\n  coverageReporters: [\n    'text',\n    ['<rootDir>/slack-coverage-reporter.js', {\n      webhookUrl: process.env.SLACK_WEBHOOK_URL\n    }]\n  ]\n};"
    }
}
