{
  "imageOptimization": {
    "title": "镜像优化策略",
    "language": "dockerfile",
    "code": "# 1. 多阶段构建优化\nFROM node:18-alpine AS dependencies\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# 最终生产镜像\nFROM nginx:alpine AS production\n# 只复制必要的文件\nCOPY --from=build /app/dist /usr/share/nginx/html\nCOPY --from=dependencies /app/node_modules ./node_modules\n\n# 2. 层缓存优化\n# ✅ 好的做法 - 先复制依赖文件\nCOPY package*.json ./\nRUN npm ci --only=production\n# 后复制源代码（变化频繁）\nCOPY . .\n\n# ❌ 避免的做法\n# COPY . .\n# RUN npm ci --only=production\n\n# 3. 减少镜像层数\n# ✅ 合并 RUN 指令\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl \\\n        git \\\n        vim && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# 4. 使用 .dockerignore\n# .dockerignore 文件内容:\n# node_modules\n# npm-debug.log\n# .git\n# .DS_Store\n# *.md\n# tests/\n# coverage/\n# .nyc_output\n\n# 5. 选择合适的基础镜像\n# 使用 Alpine 版本（更小）\nFROM node:18-alpine\n# 或使用 distroless 镜像\nFROM gcr.io/distroless/nodejs18-debian11"
  },
  "resourceLimits": {
    "title": "资源限制和配置",
    "language": "bash",
    "code": "# 1. CPU 限制\n# 限制 CPU 使用\ndocker run -d --cpus=\"1.5\" nginx\ndocker run -d --cpu-shares=512 nginx\ndocker run -d --cpuset-cpus=\"0,1\" nginx\n\n# 2. 内存限制\n# 限制内存使用\ndocker run -d --memory=512m nginx\ndocker run -d --memory=1g --memory-swap=2g nginx\ndocker run -d --oom-kill-disable --memory=512m nginx\n\n# 3. 磁盘 I/O 限制\n# 限制磁盘读写速度\ndocker run -d --device-read-bps /dev/sda:1mb nginx\ndocker run -d --device-write-bps /dev/sda:1mb nginx\ndocker run -d --device-read-iops /dev/sda:1000 nginx\n\n# 4. 网络带宽限制\n# 使用 tc (traffic control) 限制网络\ndocker run -d --name limited-net \\\n  --cap-add NET_ADMIN \\\n  nginx\n# 在容器内执行\n# tc qdisc add dev eth0 root handle 1: htb default 30\n# tc class add dev eth0 parent 1: classid 1:1 htb rate 1mbit\n\n# 5. 进程数限制\ndocker run -d --pids-limit=100 nginx\n\n# 6. 文件描述符限制\ndocker run -d --ulimit nofile=1024:2048 nginx\n\n# 7. 综合资源限制示例\ndocker run -d \\\n  --name optimized-app \\\n  --memory=1g \\\n  --memory-swap=1g \\\n  --cpus=\"1.0\" \\\n  --pids-limit=100 \\\n  --ulimit nofile=1024:2048 \\\n  --restart=unless-stopped \\\n  myapp:latest"
  },
  "containerOptimization": {
    "title": "容器运行时优化",
    "language": "bash",
    "code": "# 1. 启动时间优化\n# 使用 init 系统\ndocker run -d --init nginx\n\n# 预热应用\ndocker run -d \\\n  --name prewarmed-app \\\n  -e WARMUP=true \\\n  myapp:latest\n\n# 2. 并发和连接池优化\n# Node.js 应用优化\ndocker run -d \\\n  -e NODE_ENV=production \\\n  -e UV_THREADPOOL_SIZE=128 \\\n  -e NODE_OPTIONS=\"--max-old-space-size=1024\" \\\n  node-app:latest\n\n# 3. 日志优化\n# 限制日志大小\ndocker run -d \\\n  --log-driver json-file \\\n  --log-opt max-size=10m \\\n  --log-opt max-file=3 \\\n  nginx\n\n# 使用高性能日志驱动\ndocker run -d \\\n  --log-driver=fluentd \\\n  --log-opt fluentd-address=localhost:24224 \\\n  nginx\n\n# 4. 网络优化\n# 使用 host 网络模式（性能最佳）\ndocker run -d --network host nginx\n\n# 自定义网络优化\ndocker network create \\\n  --driver bridge \\\n  --opt com.docker.network.driver.mtu=9000 \\\n  high-perf-network\n\n# 5. 存储优化\n# 使用 tmpfs 挂载临时数据\ndocker run -d \\\n  --tmpfs /tmp:rw,noexec,nosuid,size=100m \\\n  nginx\n\n# 使用高性能存储驱动\ndocker run -d \\\n  --storage-opt size=10G \\\n  nginx\n\n# 6. 容器编排优化\n# 使用 Docker Compose 优化\n# docker-compose.yml\n# version: '3.8'\n# services:\n#   app:\n#     image: myapp:latest\n#     deploy:\n#       resources:\n#         limits:\n#           cpus: '1.0'\n#           memory: 1G\n#         reservations:\n#           cpus: '0.5'\n#           memory: 512M\n#     healthcheck:\n#       test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n#       interval: 30s\n#       timeout: 10s\n#       retries: 3"
  },
  "monitoringAndProfiling": {
    "title": "性能监控和分析",
    "language": "bash",
    "code": "# 1. 容器性能监控\n# 实时监控容器资源使用\ndocker stats\ndocker stats --no-stream\ndocker stats --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}\\t{{.BlockIO}}\"\n\n# 2. 详细性能分析\n# 查看容器进程\ndocker top container-name\n\n# 容器内存详情\ndocker exec container-name cat /proc/meminfo\n\n# 容器 CPU 详情\ndocker exec container-name cat /proc/cpuinfo\n\n# 3. 使用 cAdvisor 监控\ndocker run -d \\\n  --name=cadvisor \\\n  -p 8080:8080 \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:ro \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --volume=/dev/disk/:/dev/disk:ro \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# 4. Prometheus 监控集成\n# prometheus.yml 配置\n# global:\n#   scrape_interval: 15s\n# scrape_configs:\n#   - job_name: 'docker'\n#     static_configs:\n#       - targets: ['localhost:8080']\n\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v prometheus.yml:/etc/prometheus/prometheus.yml \\\n  prom/prometheus\n\n# 5. 性能分析工具\n# 使用 docker system 命令\ndocker system df  # 磁盘使用情况\ndocker system events  # 系统事件\ndocker system info  # 系统信息\ndocker system prune  # 清理未使用资源\n\n# 6. 应用性能分析\n# Node.js 性能分析\ndocker run -d \\\n  --name node-profiling \\\n  -e NODE_ENV=production \\\n  -e NODE_OPTIONS=\"--inspect=0.0.0.0:9229\" \\\n  -p 9229:9229 \\\n  node-app:latest\n\n# 7. 网络性能测试\n# 容器间网络性能测试\ndocker run --rm -it \\\n  --name network-test \\\n  nicolaka/netshoot \\\n  iperf3 -c target-container\n\n# 8. 存储性能测试\n# 磁盘 I/O 性能测试\ndocker run --rm -it \\\n  -v /data:/data \\\n  ubuntu:latest \\\n  dd if=/dev/zero of=/data/testfile bs=1M count=1000"
  },
  "buildOptimization": {
    "title": "构建性能优化",
    "language": "bash",
    "code": "# 1. 启用 BuildKit\nexport DOCKER_BUILDKIT=1\ndocker build --progress=plain -t myapp .\n\n# 2. 并行构建\n# 在 Dockerfile 中使用并行 RUN\nRUN apt-get update && \\\n    apt-get install -y curl & \\\n    apt-get install -y git & \\\n    wait\n\n# 3. 构建缓存优化\n# 使用外部缓存\ndocker build \\\n  --cache-from myregistry/myapp:cache \\\n  --tag myapp:latest .\n\n# 推送缓存层\ndocker tag myapp:latest myregistry/myapp:cache\ndocker push myregistry/myapp:cache\n\n# 4. 多平台构建优化\n# 创建构建器\ndocker buildx create --name multiplatform --use\n\n# 多平台构建\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  --tag myregistry/myapp:latest \\\n  --push .\n\n# 5. 构建上下文优化\n# 使用 .dockerignore 减少构建上下文\necho \"node_modules\" >> .dockerignore\necho \".git\" >> .dockerignore\necho \"*.md\" >> .dockerignore\n\n# 6. 依赖缓存策略\n# package.json 缓存\nFROM node:18-alpine\nWORKDIR /app\n# 先复制依赖文件\nCOPY package*.json ./\nRUN npm ci --only=production\n# 后复制源代码\nCOPY . .\n\n# 7. 构建时间监控\n# 分析构建时间\ntime docker build -t myapp .\n\n# 详细构建日志\ndocker build --progress=plain --no-cache -t myapp .\n\n# 8. 分层构建策略\n# 基础层（很少变化）\nFROM ubuntu:20.04 AS base\nRUN apt-get update && apt-get install -y curl\n\n# 依赖层（偶尔变化）\nFROM base AS dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# 应用层（经常变化）\nFROM dependencies AS application\nCOPY . .\nCMD [\"python\", \"app.py\"]"
  },
  "productionOptimization": {
    "title": "生产环境优化",
    "language": "bash",
    "code": "# 1. 容器编排优化\n# Docker Swarm 优化配置\ndocker service create \\\n  --name web-service \\\n  --replicas 3 \\\n  --limit-cpu 1 \\\n  --limit-memory 1g \\\n  --reserve-cpu 0.5 \\\n  --reserve-memory 512m \\\n  --update-parallelism 1 \\\n  --update-delay 10s \\\n  nginx:latest\n\n# 2. 健康检查优化\n# 高效的健康检查\nHEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# 3. 自动扩缩容\n# 基于 CPU 使用率的自动扩缩容\ndocker service update \\\n  --replicas-max-per-node 2 \\\n  --constraint-add node.role==worker \\\n  web-service\n\n# 4. 负载均衡优化\n# HAProxy 负载均衡\ndocker run -d \\\n  --name haproxy \\\n  -p 80:80 \\\n  -v haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \\\n  haproxy:latest\n\n# 5. 数据库连接池优化\n# PostgreSQL 连接池\ndocker run -d \\\n  --name pgbouncer \\\n  -e DATABASES_HOST=postgres \\\n  -e DATABASES_PORT=5432 \\\n  -e DATABASES_USER=postgres \\\n  -e DATABASES_PASSWORD=password \\\n  -e DATABASES_DBNAME=mydb \\\n  -e POOL_MODE=transaction \\\n  -e MAX_CLIENT_CONN=100 \\\n  -e DEFAULT_POOL_SIZE=25 \\\n  pgbouncer/pgbouncer:latest\n\n# 6. 缓存策略\n# Redis 缓存集群\ndocker run -d \\\n  --name redis-cluster \\\n  -p 7000-7005:7000-7005 \\\n  redis:alpine redis-cli --cluster create \\\n  127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 \\\n  127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \\\n  --cluster-replicas 1\n\n# 7. 日志聚合优化\n# ELK Stack 日志聚合\ndocker run -d \\\n  --name elasticsearch \\\n  -p 9200:9200 \\\n  -e \"discovery.type=single-node\" \\\n  elasticsearch:7.14.0\n\ndocker run -d \\\n  --name logstash \\\n  --link elasticsearch:elasticsearch \\\n  -p 5000:5000 \\\n  logstash:7.14.0\n\n# 8. 安全和性能平衡\n# 安全扫描 + 性能优化\ndocker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $(pwd):/app \\\n  aquasec/trivy image --severity HIGH,CRITICAL myapp:latest\n\n# 性能基准测试\ndocker run --rm \\\n  --name benchmark \\\n  -v $(pwd):/app \\\n  loadimpact/k6 run /app/performance-test.js"
  }
}