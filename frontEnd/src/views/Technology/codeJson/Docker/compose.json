{
  "basicCompose": {
    "title": "基础Docker Compose",
    "language": "yaml",
    "code": "# docker-compose.yml\nversion: '3.8'\n\nservices:\n  # Web应用服务\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:password@db:5432/myapp\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./src:/app/src\n      - /app/node_modules\n    restart: unless-stopped\n\n  # 数据库服务\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n\n  # Redis缓存服务\n  redis:\n    image: redis:6-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\n# 数据卷定义\nvolumes:\n  postgres_data:\n  redis_data:\n\n# 网络定义\nnetworks:\n  default:\n    driver: bridge"
  },
  "multiStageCompose": {
    "title": "多阶段构建配置",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # 前端应用\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile\n      target: production  # 多阶段构建目标\n      args:\n        - NODE_ENV=production\n        - API_URL=http://backend:8080\n    ports:\n      - \"80:80\"\n    depends_on:\n      - backend\n    networks:\n      - frontend-network\n\n  # 后端API\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n      - DATABASE_URL=jdbc:postgresql://db:5432/myapp\n    depends_on:\n      db:\n        condition: service_healthy\n    networks:\n      - frontend-network\n      - backend-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # 数据库\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: ${DB_USER:-user}\n      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - backend-network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${DB_USER:-user}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  frontend-network:\n    driver: bridge\n  backend-network:\n    driver: bridge"
  },
  "developmentCompose": {
    "title": "开发环境配置",
    "language": "yaml",
    "code": "# docker-compose.dev.yml\nversion: '3.8'\n\nservices:\n  # 开发环境Web服务\n  web:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"3000:3000\"\n      - \"9229:9229\"  # Node.js调试端口\n    environment:\n      - NODE_ENV=development\n      - DEBUG=app:*\n    volumes:\n      - .:/app\n      - /app/node_modules\n      - /app/dist\n    command: npm run dev\n    stdin_open: true\n    tty: true\n    depends_on:\n      - db\n      - redis\n\n  # 数据库（开发用）\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp_dev\n      POSTGRES_USER: dev_user\n      POSTGRES_PASSWORD: dev_password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_dev_data:/var/lib/postgresql/data\n      - ./database/seeds:/docker-entrypoint-initdb.d\n\n  # Redis（开发用）\n  redis:\n    image: redis:6-alpine\n    ports:\n      - \"6379:6379\"\n    command: redis-server --appendonly yes\n\n  # 邮件服务（开发用）\n  mailhog:\n    image: mailhog/mailhog\n    ports:\n      - \"1025:1025\"  # SMTP\n      - \"8025:8025\"  # Web UI\n\n  # 数据库管理工具\n  adminer:\n    image: adminer\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n\nvolumes:\n  postgres_dev_data:"
  },
  "productionCompose": {
    "title": "生产环境配置",
    "language": "yaml",
    "code": "# docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  # Nginx反向代理\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n      - static_files:/var/www/static\n    depends_on:\n      - web\n    restart: unless-stopped\n    networks:\n      - frontend\n\n  # Web应用\n  web:\n    build:\n      context: .\n      dockerfile: Dockerfile.prod\n    expose:\n      - \"3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:${DB_PASSWORD}@db:5432/myapp\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n    depends_on:\n      - db\n      - redis\n    restart: unless-stopped\n    networks:\n      - frontend\n      - backend\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n        reservations:\n          cpus: '0.25'\n          memory: 256M\n\n  # 数据库\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./backups:/backups\n    restart: unless-stopped\n    networks:\n      - backend\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 1G\n\n  # Redis\n  redis:\n    image: redis:6-alpine\n    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n    networks:\n      - backend\n\n  # 监控服务\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    restart: unless-stopped\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n    volumes:\n      - grafana_data:/var/lib/grafana\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n  static_files:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge"
  },
  "composeCommands": {
    "title": "Docker Compose命令",
    "language": "bash",
    "code": "# 基础命令\ndocker-compose up                    # 启动所有服务\ndocker-compose up -d                 # 后台启动\ndocker-compose up --build            # 重新构建并启动\ndocker-compose up web db             # 只启动指定服务\n\n# 停止和清理\ndocker-compose down                  # 停止并删除容器\ndocker-compose down -v               # 同时删除数据卷\ndocker-compose stop                  # 停止服务（不删除容器）\ndocker-compose start                 # 启动已停止的服务\ndocker-compose restart               # 重启服务\n\n# 查看状态\ndocker-compose ps                    # 查看服务状态\ndocker-compose logs                  # 查看所有服务日志\ndocker-compose logs -f web           # 跟踪web服务日志\ndocker-compose logs --tail=100 db    # 查看db服务最后100行日志\n\n# 执行命令\ndocker-compose exec web bash        # 进入web容器\ndocker-compose exec db psql -U user myapp  # 连接数据库\ndocker-compose run web npm test     # 在新容器中运行测试\n\n# 构建和推送\ndocker-compose build                 # 构建所有服务\ndocker-compose build --no-cache web # 无缓存构建web服务\ndocker-compose push                  # 推送镜像到仓库\n\n# 配置文件\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up\ndocker-compose --env-file .env.prod up\n\n# 扩展服务\ndocker-compose up --scale web=3      # 启动3个web服务实例\n\n# 验证配置\ndocker-compose config                # 验证并查看最终配置\ndocker-compose config --services     # 列出所有服务名"
  },
  "environmentVariables": {
    "title": "环境变量配置",
    "language": "bash",
    "code": "# .env文件\n# 数据库配置\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=myapp\nDB_USER=user\nDB_PASSWORD=secure_password\n\n# Redis配置\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_PASSWORD=redis_password\n\n# 应用配置\nNODE_ENV=production\nPORT=3000\nJWT_SECRET=your_jwt_secret_key\nAPI_URL=https://api.example.com\n\n# 监控配置\nGRAFANA_PASSWORD=admin_password\nPROMETHEUS_PORT=9090\n\n# SSL证书路径\nSSL_CERT_PATH=./ssl/cert.pem\nSSL_KEY_PATH=./ssl/key.pem\n\n# 在docker-compose.yml中使用\nversion: '3.8'\n\nservices:\n  web:\n    image: myapp:latest\n    environment:\n      - NODE_ENV=${NODE_ENV}\n      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}\n      - REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}\n      - JWT_SECRET=${JWT_SECRET}\n    ports:\n      - \"${PORT}:3000\"\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: ${DB_NAME}\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    ports:\n      - \"${DB_PORT}:5432\"\n\n# 不同环境的env文件\n# .env.development\nNODE_ENV=development\nDB_NAME=myapp_dev\nDEBUG=true\n\n# .env.production\nNODE_ENV=production\nDB_NAME=myapp_prod\nDEBUG=false\n\n# .env.test\nNODE_ENV=test\nDB_NAME=myapp_test\nRUN_MIGRATIONS=true"
  },
  "networking": {
    "title": "网络配置",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # 前端服务\n  frontend:\n    build: ./frontend\n    networks:\n      - frontend-net\n      - monitoring-net\n    ports:\n      - \"3000:3000\"\n\n  # API网关\n  api-gateway:\n    build: ./api-gateway\n    networks:\n      - frontend-net\n      - backend-net\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - user-service\n      - order-service\n\n  # 用户服务\n  user-service:\n    build: ./user-service\n    networks:\n      - backend-net\n      - database-net\n    expose:\n      - \"8081\"\n    depends_on:\n      - user-db\n\n  # 订单服务\n  order-service:\n    build: ./order-service\n    networks:\n      - backend-net\n      - database-net\n    expose:\n      - \"8082\"\n    depends_on:\n      - order-db\n\n  # 用户数据库\n  user-db:\n    image: postgres:13\n    networks:\n      - database-net\n    environment:\n      POSTGRES_DB: users\n      POSTGRES_USER: user_admin\n      POSTGRES_PASSWORD: user_password\n\n  # 订单数据库\n  order-db:\n    image: postgres:13\n    networks:\n      - database-net\n    environment:\n      POSTGRES_DB: orders\n      POSTGRES_USER: order_admin\n      POSTGRES_PASSWORD: order_password\n\n  # 监控服务\n  prometheus:\n    image: prom/prometheus\n    networks:\n      - monitoring-net\n    ports:\n      - \"9090:9090\"\n\n# 网络定义\nnetworks:\n  # 前端网络\n  frontend-net:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\n  # 后端网络\n  backend-net:\n    driver: bridge\n    internal: true  # 内部网络，不能访问外网\n\n  # 数据库网络\n  database-net:\n    driver: bridge\n    internal: true\n\n  # 监控网络\n  monitoring-net:\n    driver: bridge\n\n  # 外部网络\n  external-net:\n    external: true\n    name: my-external-network"
  },
  "volumes": {
    "title": "数据卷管理",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # Web应用\n  web:\n    build: .\n    volumes:\n      # 绑定挂载（开发时代码同步）\n      - ./src:/app/src:ro  # 只读挂载\n      - ./public:/app/public\n      \n      # 命名数据卷\n      - app_logs:/app/logs\n      - uploads:/app/uploads\n      \n      # 匿名数据卷\n      - /app/node_modules\n      \n      # 临时文件系统\n      - type: tmpfs\n        target: /app/temp\n        tmpfs:\n          size: 100M\n\n  # 数据库\n  database:\n    image: postgres:13\n    volumes:\n      # 数据持久化\n      - postgres_data:/var/lib/postgresql/data\n      \n      # 初始化脚本\n      - ./database/init:/docker-entrypoint-initdb.d:ro\n      \n      # 配置文件\n      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro\n      \n      # 备份目录\n      - backup_data:/backups\n\n  # 文件服务\n  file-server:\n    image: nginx:alpine\n    volumes:\n      # 静态文件服务\n      - static_files:/usr/share/nginx/html:ro\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      \n      # 日志文件\n      - nginx_logs:/var/log/nginx\n\n  # 备份服务\n  backup:\n    image: postgres:13\n    volumes:\n      - postgres_data:/source:ro  # 源数据（只读）\n      - backup_data:/backup       # 备份目标\n    command: |\n      sh -c '\n        while true; do\n          pg_dump -h database -U $$POSTGRES_USER $$POSTGRES_DB > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql\n          sleep 86400  # 每24小时备份一次\n        done\n      '\n    depends_on:\n      - database\n\n# 数据卷定义\nvolumes:\n  # 应用数据\n  app_logs:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: ./logs\n  \n  uploads:\n    driver: local\n  \n  # 数据库数据\n  postgres_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /var/lib/docker/volumes/postgres_data\n  \n  backup_data:\n    external: true  # 使用外部创建的数据卷\n  \n  # 静态文件\n  static_files:\n    driver: local\n  \n  # 日志文件\n  nginx_logs:\n    driver: local"
  },
  "healthChecks": {
    "title": "健康检查配置",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # Web应用健康检查\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n\n  # 数据库健康检查\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U user -d myapp\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n      start_period: 30s\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  # Redis健康检查\n  redis:\n    image: redis:6-alpine\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 3\n      start_period: 10s\n    volumes:\n      - redis_data:/data\n\n  # Nginx健康检查\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    depends_on:\n      web:\n        condition: service_healthy\n\nvolumes:\n  postgres_data:\n  redis_data:"
  },
  "resourceLimits": {
    "title": "资源限制与安全配置",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # Web应用资源限制\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'        # CPU限制\n          memory: 512M       # 内存限制\n        reservations:\n          cpus: '0.25'       # CPU预留\n          memory: 256M       # 内存预留\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n    # 安全配置\n    user: \"1000:1000\"        # 非root用户\n    read_only: true          # 只读文件系统\n    tmpfs:\n      - /tmp\n      - /var/tmp\n    cap_drop:\n      - ALL\n    cap_add:\n      - NET_BIND_SERVICE\n    security_opt:\n      - no-new-privileges:true\n\n  # 数据库资源限制\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD_FILE: /run/secrets/db_password\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n    # 安全配置\n    user: \"999:999\"          # postgres用户\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - /etc/passwd:/etc/passwd:ro\n    secrets:\n      - db_password\n    sysctls:\n      - net.core.somaxconn=1024\n\nvolumes:\n  postgres_data:\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt"
  },
  "microservicesExample": {
    "title": "微服务架构示例",
    "language": "yaml",
    "code": "version: '3.8'\n\nservices:\n  # API网关\n  api-gateway:\n    build: ./api-gateway\n    ports:\n      - \"8080:8080\"\n    environment:\n      - USER_SERVICE_URL=http://user-service:8081\n      - ORDER_SERVICE_URL=http://order-service:8082\n      - PRODUCT_SERVICE_URL=http://product-service:8083\n    depends_on:\n      - user-service\n      - order-service\n      - product-service\n    networks:\n      - frontend\n      - backend\n\n  # 用户服务\n  user-service:\n    build: ./user-service\n    expose:\n      - \"8081\"\n    environment:\n      - DATABASE_URL=postgresql://user_admin:password@user-db:5432/users\n      - REDIS_URL=redis://redis:6379/0\n    depends_on:\n      - user-db\n      - redis\n    networks:\n      - backend\n      - user-db-net\n    deploy:\n      replicas: 2\n\n  # 订单服务\n  order-service:\n    build: ./order-service\n    expose:\n      - \"8082\"\n    environment:\n      - DATABASE_URL=postgresql://order_admin:password@order-db:5432/orders\n      - MESSAGE_QUEUE_URL=amqp://rabbitmq:5672\n    depends_on:\n      - order-db\n      - rabbitmq\n    networks:\n      - backend\n      - order-db-net\n      - message-net\n    deploy:\n      replicas: 2\n\n  # 用户数据库\n  user-db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: users\n      POSTGRES_USER: user_admin\n      POSTGRES_PASSWORD: password\n    volumes:\n      - user_db_data:/var/lib/postgresql/data\n    networks:\n      - user-db-net\n\n  # 订单数据库\n  order-db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: orders\n      POSTGRES_USER: order_admin\n      POSTGRES_PASSWORD: password\n    volumes:\n      - order_db_data:/var/lib/postgresql/data\n    networks:\n      - order-db-net\n\n  # Redis缓存\n  redis:\n    image: redis:6-alpine\n    volumes:\n      - redis_data:/data\n    networks:\n      - backend\n\n  # 消息队列\n  rabbitmq:\n    image: rabbitmq:3-management\n    ports:\n      - \"15672:15672\"  # 管理界面\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: password\n    volumes:\n      - rabbitmq_data:/var/lib/rabbitmq\n    networks:\n      - message-net\n\n  # 负载均衡器\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - api-gateway\n    networks:\n      - frontend\n\nvolumes:\n  user_db_data:\n  order_db_data:\n  redis_data:\n  rabbitmq_data:\n\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n  user-db-net:\n    driver: bridge\n    internal: true\n  order-db-net:\n    driver: bridge\n    internal: true\n  message-net:\n    driver: bridge"
  }
}
