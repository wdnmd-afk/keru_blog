{
  "containerOrchestration": {
    "title": "容器编排基础",
    "language": "yaml",
    "code": "# 1. Pod 定义 - Kubernetes 中最小的部署单元\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\n  labels:\n    app: nginx\n    environment: production\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.21\n    ports:\n    - containerPort: 80\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n    env:\n    - name: NGINX_PORT\n      value: \"80\"\n    volumeMounts:\n    - name: nginx-config\n      mountPath: /etc/nginx/conf.d\n  volumes:\n  - name: nginx-config\n    configMap:\n      name: nginx-config\n  restartPolicy: Always\n  nodeSelector:\n    disktype: ssd\n\n---\n# 2. Deployment - 管理 Pod 的副本\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.21\n        ports:\n        - containerPort: 80\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n\n---\n# 3. Service - 服务发现和负载均衡\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer"
  },
  "dockerIntegration": {
    "title": "Docker 与 Kubernetes 集成",
    "language": "bash",
    "code": "# 1. 构建和推送 Docker 镜像到 Kubernetes\n# 构建应用镜像\ndocker build -t myapp:v1.0 .\n\n# 标记镜像用于私有仓库\ndocker tag myapp:v1.0 registry.example.com/myapp:v1.0\n\n# 推送到私有仓库\ndocker push registry.example.com/myapp:v1.0\n\n# 2. 在 Kubernetes 中使用私有镜像\n# 创建 Docker 仓库密钥\nkubectl create secret docker-registry regcred \\\n  --docker-server=registry.example.com \\\n  --docker-username=myuser \\\n  --docker-password=mypassword \\\n  --docker-email=myemail@example.com\n\n# 3. 使用 Docker Compose 转换为 Kubernetes\n# 安装 Kompose\ncurl -L https://github.com/kubernetes/kompose/releases/download/v1.26.0/kompose-linux-amd64 -o kompose\nchmod +x kompose\nsudo mv ./kompose /usr/local/bin/kompose\n\n# 转换 Docker Compose 文件\nkompose convert -f docker-compose.yml\n\n# 4. 多阶段构建优化 Kubernetes 部署\n# Dockerfile 示例\n# FROM node:16-alpine AS builder\n# WORKDIR /app\n# COPY package*.json ./\n# RUN npm ci --only=production\n# COPY . .\n# RUN npm run build\n# \n# FROM nginx:alpine\n# COPY --from=builder /app/dist /usr/share/nginx/html\n# EXPOSE 80\n# CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n# 5. 容器镜像安全扫描\n# 使用 Trivy 扫描镜像\ndocker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $HOME/Library/Caches:/root/.cache/ \\\n  aquasec/trivy image myapp:v1.0\n\n# 6. 镜像版本管理策略\n# 语义化版本标记\ndocker tag myapp:latest myapp:1.2.3\ndocker tag myapp:latest myapp:1.2\ndocker tag myapp:latest myapp:1\n\n# Git 提交哈希标记\nGIT_COMMIT=$(git rev-parse --short HEAD)\ndocker tag myapp:latest myapp:$GIT_COMMIT\n\n# 7. 容器运行时优化\n# 使用 distroless 基础镜像\n# FROM gcr.io/distroless/java:11\n# COPY app.jar /app.jar\n# ENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]\n\n# 8. 本地开发环境集成\n# 使用 Skaffold 进行本地开发\n# skaffold.yaml\n# apiVersion: skaffold/v2beta21\n# kind: Config\n# build:\n#   artifacts:\n#   - image: myapp\n# deploy:\n#   kubectl:\n#     manifests:\n#     - k8s/*.yaml\n\n# 启动开发模式\n# skaffold dev"
  },
  "deploymentStrategies": {
    "title": "部署策略和管理",
    "language": "yaml",
    "code": "# 1. 滚动更新部署\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rolling-update-app\nspec:\n  replicas: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2        # 最多可以超出期望副本数\n      maxUnavailable: 1  # 最多可以不可用的副本数\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n---\n# 2. 蓝绿部署\napiVersion: v1\nkind: Service\nmetadata:\n  name: bluegreen-service\nspec:\n  selector:\n    app: myapp\n    version: blue  # 切换到 green 进行部署\n  ports:\n  - port: 80\n    targetPort: 8080\n\n---\n# 蓝色版本\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-blue\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n      version: blue\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: blue\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v1.0\n\n---\n# 绿色版本\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-green\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n      version: green\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: green\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n\n---\n# 3. 金丝雀部署\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: canary-rollout\nspec:\n  replicas: 10\n  strategy:\n    canary:\n      steps:\n      - setWeight: 10    # 10% 流量到新版本\n      - pause: {duration: 1m}\n      - setWeight: 20    # 20% 流量到新版本\n      - pause: {duration: 1m}\n      - setWeight: 50    # 50% 流量到新版本\n      - pause: {duration: 1m}\n      - setWeight: 100   # 100% 流量到新版本\n      trafficRouting:\n        istio:\n          virtualService:\n            name: canary-vs\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:v2.0\n\n---\n# 4. StatefulSet 有状态应用部署\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: database-statefulset\nspec:\n  serviceName: database-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: database\n  template:\n    metadata:\n      labels:\n        app: database\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13\n        env:\n        - name: POSTGRES_DB\n          value: mydb\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: username\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: password\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi"
  },
  "serviceDiscovery": {
    "title": "服务发现和网络",
    "language": "yaml",
    "code": "# 1. ClusterIP 服务 - 集群内部通信\napiVersion: v1\nkind: Service\nmetadata:\n  name: internal-service\nspec:\n  type: ClusterIP\n  selector:\n    app: backend\n  ports:\n  - port: 8080\n    targetPort: 8080\n    protocol: TCP\n\n---\n# 2. NodePort 服务 - 外部访问\napiVersion: v1\nkind: Service\nmetadata:\n  name: nodeport-service\nspec:\n  type: NodePort\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 8080\n    nodePort: 30080\n    protocol: TCP\n\n---\n# 3. LoadBalancer 服务 - 云负载均衡\napiVersion: v1\nkind: Service\nmetadata:\n  name: loadbalancer-service\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: nlb\nspec:\n  type: LoadBalancer\n  selector:\n    app: web\n  ports:\n  - port: 80\n    targetPort: 8080\n\n---\n# 4. Ingress - HTTP/HTTPS 路由\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    cert-manager.io/cluster-issuer: letsencrypt-prod\nspec:\n  tls:\n  - hosts:\n    - myapp.example.com\n    secretName: myapp-tls\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: backend-service\n            port:\n              number: 8080\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service\n            port:\n              number: 80\n\n---\n# 5. NetworkPolicy - 网络安全策略\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: allowed-namespace\n    - podSelector:\n        matchLabels:\n          role: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: database-namespace\n    ports:\n    - protocol: TCP\n      port: 5432\n\n---\n# 6. EndpointSlice - 服务端点管理\napiVersion: discovery.k8s.io/v1\nkind: EndpointSlice\nmetadata:\n  name: external-service-endpoints\n  labels:\n    kubernetes.io/service-name: external-service\naddressType: IPv4\nports:\n- name: http\n  port: 80\n  protocol: TCP\nendpoints:\n- addresses:\n  - \"192.168.1.100\"\n  conditions:\n    ready: true\n- addresses:\n  - \"192.168.1.101\"\n  conditions:\n    ready: true\n\n---\n# 7. Service Monitor - Prometheus 监控\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: app-metrics\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  endpoints:\n  - port: metrics\n    interval: 30s\n    path: /metrics"
  },
  "configurationManagement": {
    "title": "配置和密钥管理",
    "language": "yaml",
    "code": "# 1. ConfigMap - 配置数据管理\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  # 简单键值对\n  database_url: \"postgresql://localhost:5432/mydb\"\n  log_level: \"info\"\n  max_connections: \"100\"\n  \n  # 配置文件\n  nginx.conf: |\n    server {\n        listen 80;\n        server_name localhost;\n        location / {\n            proxy_pass http://backend:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n    }\n  \n  # JSON 配置\n  app-settings.json: |\n    {\n      \"database\": {\n        \"host\": \"postgres\",\n        \"port\": 5432,\n        \"name\": \"myapp\"\n      },\n      \"cache\": {\n        \"redis_url\": \"redis://redis:6379\"\n      }\n    }\n\n---\n# 2. Secret - 敏感信息管理\napiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\ndata:\n  # Base64 编码的敏感数据\n  database-password: cGFzc3dvcmQxMjM=  # password123\n  api-key: YWJjZGVmZ2hpams=              # abcdefghijk\n  jwt-secret: bXlzZWNyZXRrZXk=           # mysecretkey\n\n---\n# 3. 在 Pod 中使用 ConfigMap 和 Secret\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n  - name: app\n    image: myapp:latest\n    \n    # 环境变量方式\n    env:\n    - name: DATABASE_URL\n      valueFrom:\n        configMapKeyRef:\n          name: app-config\n          key: database_url\n    - name: DATABASE_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: app-secrets\n          key: database-password\n    \n    # 环境变量批量导入\n    envFrom:\n    - configMapRef:\n        name: app-config\n    - secretRef:\n        name: app-secrets\n    \n    # 文件挂载方式\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/config\n    - name: secret-volume\n      mountPath: /etc/secrets\n      readOnly: true\n    - name: nginx-config\n      mountPath: /etc/nginx/conf.d\n      subPath: nginx.conf\n  \n  volumes:\n  - name: config-volume\n    configMap:\n      name: app-config\n  - name: secret-volume\n    secret:\n      secretName: app-secrets\n      defaultMode: 0400  # 只读权限\n  - name: nginx-config\n    configMap:\n      name: app-config\n      items:\n      - key: nginx.conf\n        path: default.conf\n\n---\n# 4. 外部密钥管理集成\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: vault-backend\nspec:\n  provider:\n    vault:\n      server: \"https://vault.example.com\"\n      path: \"secret\"\n      version: \"v2\"\n      auth:\n        kubernetes:\n          mountPath: \"kubernetes\"\n          role: \"myapp-role\"\n\n---\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: vault-secret\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: vault-backend\n    kind: SecretStore\n  target:\n    name: myapp-secret\n    creationPolicy: Owner\n  data:\n  - secretKey: database-password\n    remoteRef:\n      key: myapp/database\n      property: password\n\n---\n# 5. 配置热更新\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hot-reload-config\n  annotations:\n    reloader.stakater.com/match: \"true\"\ndata:\n  app.properties: |\n    server.port=8080\n    logging.level.root=INFO\n    feature.enabled=true\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hot-reload-app\n  annotations:\n    configmap.reloader.stakater.com/reload: \"hot-reload-config\"\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hot-reload-app\n  template:\n    metadata:\n      labels:\n        app: hot-reload-app\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n        volumeMounts:\n        - name: config\n          mountPath: /app/config\n      volumes:\n      - name: config\n        configMap:\n          name: hot-reload-config"
  },
  "monitoring": {
    "title": "监控和日志",
    "language": "yaml",
    "code": "# 1. Prometheus 监控配置\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n    \n    rule_files:\n      - \"/etc/prometheus/rules/*.yml\"\n    \n    scrape_configs:\n      - job_name: 'kubernetes-apiservers'\n        kubernetes_sd_configs:\n        - role: endpoints\n        scheme: https\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n          action: keep\n          regex: default;kubernetes;https\n      \n      - job_name: 'kubernetes-nodes'\n        kubernetes_sd_configs:\n        - role: node\n        scheme: https\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      \n      - job_name: 'kubernetes-pods'\n        kubernetes_sd_configs:\n        - role: pod\n        relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n\n---\n# 2. Grafana 仪表板配置\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-dashboards\n  labels:\n    grafana_dashboard: \"1\"\ndata:\n  kubernetes-cluster.json: |\n    {\n      \"dashboard\": {\n        \"id\": null,\n        \"title\": \"Kubernetes Cluster Monitoring\",\n        \"tags\": [\"kubernetes\"],\n        \"timezone\": \"browser\",\n        \"panels\": [\n          {\n            \"title\": \"CPU Usage\",\n            \"type\": \"graph\",\n            \"targets\": [\n              {\n                \"expr\": \"sum(rate(container_cpu_usage_seconds_total[5m])) by (pod)\",\n                \"legendFormat\": \"{{pod}}\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n\n---\n# 3. 应用监控注解\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: monitored-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: monitored-app\n  template:\n    metadata:\n      labels:\n        app: monitored-app\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"8080\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n        ports:\n        - containerPort: 8080\n          name: http\n        - containerPort: 9090\n          name: metrics\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\n# 4. 日志收集配置\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluentd-config\ndata:\n  fluent.conf: |\n    <source>\n      @type tail\n      path /var/log/containers/*.log\n      pos_file /var/log/fluentd-containers.log.pos\n      tag kubernetes.*\n      read_from_head true\n      <parse>\n        @type json\n        time_format %Y-%m-%dT%H:%M:%S.%NZ\n      </parse>\n    </source>\n    \n    <filter kubernetes.**>\n      @type kubernetes_metadata\n    </filter>\n    \n    <match kubernetes.**>\n      @type elasticsearch\n      host elasticsearch.logging.svc.cluster.local\n      port 9200\n      index_name kubernetes\n      type_name _doc\n    </match>\n\n---\n# 5. 告警规则配置\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-rules\ndata:\n  kubernetes.yml: |\n    groups:\n    - name: kubernetes\n      rules:\n      - alert: PodCrashLooping\n        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Pod {{ $labels.pod }} is crash looping\"\n          description: \"Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently\"\n      \n      - alert: HighMemoryUsage\n        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.9\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"High memory usage detected\"\n          description: \"Container {{ $labels.container }} in pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of memory\"\n      \n      - alert: HighCPUUsage\n        expr: (rate(container_cpu_usage_seconds_total[5m])) > 0.8\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High CPU usage detected\"\n          description: \"Container {{ $labels.container }} in pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of CPU\"\n\n---\n# 6. Jaeger 分布式追踪\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jaeger-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jaeger\n  template:\n    metadata:\n      labels:\n        app: jaeger\n    spec:\n      containers:\n      - name: jaeger\n        image: jaegertracing/all-in-one:latest\n        ports:\n        - containerPort: 16686\n        - containerPort: 14268\n        env:\n        - name: COLLECTOR_ZIPKIN_HTTP_PORT\n          value: \"9411\""
  }
}