{
  "basicExportImport": {
    "title": "基本导出与导入",
    "language": "typescript",
    "code": "// math.ts - 导出模块\nexport const PI = 3.14159\n\nexport function add(a: number, b: number): number {\n    return a + b\n}\n\nexport class Calculator {\n    multiply(a: number, b: number): number {\n        return a * b\n    }\n}\n\n// 默认导出\nexport default function subtract(a: number, b: number): number {\n    return a - b\n}\n\n// main.ts - 导入模块\nimport subtract, { PI, add, Calculator } from './math'\nimport * as MathUtils from './math'\n\nconsole.log(PI) // 3.14159\nconsole.log(add(2, 3)) // 5\nconsole.log(subtract(5, 2)) // 3\n\nconst calc = new Calculator()\nconsole.log(calc.multiply(4, 5)) // 20\n\n// 使用命名空间导入\nconsole.log(MathUtils.PI)\nconsole.log(MathUtils.add(1, 2))"
  },
  "advancedExportPatterns": {
    "title": "高级导出模式",
    "language": "typescript",
    "code": "// utils.ts\nconst API_URL = 'https://api.example.com'\nconst VERSION = '1.0.0'\n\nfunction formatDate(date: Date): string {\n    return date.toISOString().split('T')[0]\n}\n\nfunction validateEmail(email: string): boolean {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n}\n\n// 批量导出\nexport {\n    API_URL,\n    VERSION,\n    formatDate,\n    validateEmail\n}\n\n// 重新导出\nexport { default as Logger } from './logger'\nexport * from './constants'\n\n// 条件导出\nexport const config = process.env.NODE_ENV === 'production' \n    ? require('./config.prod') \n    : require('./config.dev')\n\n// 类型导出\nexport type User = {\n    id: number\n    name: string\n    email: string\n}\n\nexport interface ApiResponse<T> {\n    data: T\n    status: number\n    message: string\n}"
  },
  "dynamicImports": {
    "title": "动态导入",
    "language": "typescript",
    "code": "// 动态导入模块\nasync function loadMathModule() {\n    const mathModule = await import('./math')\n    return mathModule\n}\n\n// 条件导入\nasync function loadChart(type: 'bar' | 'line' | 'pie') {\n    switch (type) {\n        case 'bar':\n            const { BarChart } = await import('./charts/BarChart')\n            return BarChart\n        case 'line':\n            const { LineChart } = await import('./charts/LineChart')\n            return LineChart\n        case 'pie':\n            const { PieChart } = await import('./charts/PieChart')\n            return PieChart\n    }\n}\n\n// 懒加载组件\nconst LazyComponent = React.lazy(() => import('./LazyComponent'))\n\n// 使用动态导入\nloadMathModule().then(math => {\n    console.log(math.add(1, 2))\n})\n\n// 错误处理\ntry {\n    const module = await import('./optional-module')\n    module.doSomething()\n} catch (error) {\n    console.log('模块加载失败:', error)\n}"
  },
  "moduleResolution": {
    "title": "TypeScript模块解析",
    "language": "json",
    "code": "// tsconfig.json 模块解析配置\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",  // 或 \"classic\"\n    \"baseUrl\": \"./src\",\n    \"paths\": {\n      \"@/*\": [\"*\"],\n      \"@components/*\": [\"components/*\"],\n      \"@utils/*\": [\"utils/*\"],\n      \"@types/*\": [\"types/*\"]\n    },\n    \"typeRoots\": [\"./node_modules/@types\", \"./src/types\"],\n    \"types\": [\"node\", \"jest\", \"react\"],\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"resolveJsonModule\": true\n  }\n}\n\n// 路径映射示例\nimport Button from '@components/Button'  // -> src/components/Button\nimport { formatDate } from '@utils/date'  // -> src/utils/date\nimport type { User } from '@types/user'   // -> src/types/user\n\n// 模块解析顺序\n// 1. 相对路径: ./module, ../module\n// 2. 绝对路径: /root/module\n// 3. 模块名称: lodash, react\n// 4. 路径映射: @/module"
  },
  "declarationFiles": {
    "title": "声明文件",
    "language": "typescript",
    "code": "// types/global.d.ts - 全局类型声明\ndeclare global {\n    interface Window {\n        gtag: (command: string, ...args: any[]) => void\n    }\n    \n    namespace NodeJS {\n        interface ProcessEnv {\n            NODE_ENV: 'development' | 'production' | 'test'\n            API_URL: string\n            DATABASE_URL: string\n        }\n    }\n}\n\n// types/modules.d.ts - 模块声明\ndeclare module '*.svg' {\n    const content: string\n    export default content\n}\n\ndeclare module '*.css' {\n    const classes: { [key: string]: string }\n    export default classes\n}\n\ndeclare module 'custom-library' {\n    export function customFunction(param: string): number\n    export interface CustomInterface {\n        prop: string\n    }\n}\n\n// 扩展现有模块\ndeclare module 'express' {\n    interface Request {\n        user?: {\n            id: string\n            email: string\n        }\n    }\n}"
  },
  "namespaceBasics": {
    "title": "命名空间基础",
    "language": "typescript",
    "code": "// 命名空间定义\nnamespace Geometry {\n    export interface Point {\n        x: number\n        y: number\n    }\n    \n    export class Circle {\n        constructor(\n            public center: Point,\n            public radius: number\n        ) {}\n        \n        area(): number {\n            return Math.PI * this.radius ** 2\n        }\n    }\n    \n    export namespace Utils {\n        export function distance(p1: Point, p2: Point): number {\n            return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)\n        }\n    }\n}\n\n// 使用命名空间\nconst center: Geometry.Point = { x: 0, y: 0 }\nconst circle = new Geometry.Circle(center, 5)\nconsole.log(circle.area())\n\nconst p1: Geometry.Point = { x: 0, y: 0 }\nconst p2: Geometry.Point = { x: 3, y: 4 }\nconsole.log(Geometry.Utils.distance(p1, p2)) // 5"
  },
  "moduleVsNamespace": {
    "title": "模块 vs 命名空间",
    "language": "typescript",
    "code": "// ❌ 不推荐：使用命名空间\nnamespace MyLibrary {\n    export class Helper {\n        static format(value: string): string {\n            return value.toUpperCase()\n        }\n    }\n}\n\n// ✅ 推荐：使用模块\n// helper.ts\nexport class Helper {\n    static format(value: string): string {\n        return value.toUpperCase()\n    }\n}\n\n// main.ts\nimport { Helper } from './helper'\n\n// 何时使用命名空间：\n// 1. 全局库的类型定义\n// 2. 扩展现有的全局对象\n// 3. 内部API组织（不对外暴露）\n\n// 全局库类型定义示例\ndeclare namespace jQuery {\n    interface JQuery {\n        customPlugin(options?: any): JQuery\n    }\n}\n\n// 扩展全局对象\ndeclare global {\n    namespace Express {\n        interface Request {\n            user?: User\n        }\n    }\n}"
  }
}