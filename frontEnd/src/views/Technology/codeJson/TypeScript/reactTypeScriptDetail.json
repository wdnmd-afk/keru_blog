{
    "projectSetup": {
        "title": "项目配置",
        "language": "json",
        "code": "// 创建React + TypeScript项目\nnpx create-react-app my-app --template typescript\n\n// 或使用Vite\nnpm create vite@latest my-app -- --template react-ts\n\n// tsconfig.json 配置\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"es6\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\"\n  },\n  \"include\": [\"src\"]\n}"
    },
    "functionComponents": {
        "title": "函数组件类型",
        "language": "typescript",
        "code": "// 基本函数组件\ninterface ButtonProps {\n    children: React.ReactNode\n    onClick: () => void\n    variant?: 'primary' | 'secondary'\n    disabled?: boolean\n}\n\nconst Button: React.FC<ButtonProps> = ({ \n    children, \n    onClick, \n    variant = 'primary',\n    disabled = false \n}) => {\n    return (\n        <button \n            onClick={onClick}\n            disabled={disabled}\n            className={`btn btn-${variant}`}\n        >\n            {children}\n        </button>\n    )\n}\n\n// 或者使用函数声明\nfunction Button(props: ButtonProps): JSX.Element {\n    // 实现...\n}\n\n// 泛型组件\ninterface ListProps<T> {\n    items: T[]\n    renderItem: (item: T, index: number) => React.ReactNode\n    keyExtractor: (item: T) => string | number\n}\n\nfunction List<T>({ items, renderItem, keyExtractor }: ListProps<T>) {\n    return (\n        <ul>\n            {items.map((item, index) => (\n                <li key={keyExtractor(item)}>\n                    {renderItem(item, index)}\n                </li>\n            ))}\n        </ul>\n    )\n}\n\n// 使用泛型组件\nconst users = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]\n\n<List\n    items={users}\n    renderItem={(user) => <span>{user.name}</span>}\n    keyExtractor={(user) => user.id}\n/>"
    },
    "advancedProps": {
        "title": "Props类型进阶",
        "language": "typescript",
        "code": "// 继承HTML属性\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n    label: string\n    error?: string\n}\n\nconst Input: React.FC<InputProps> = ({ label, error, ...inputProps }) => {\n    return (\n        <div>\n            <label>{label}</label>\n            <input {...inputProps} />\n            {error && <span className=\"error\">{error}</span>}\n        </div>\n    )\n}\n\n// 使用\n<Input \n    label=\"用户名\"\n    placeholder=\"请输入用户名\"\n    onChange={(e) => console.log(e.target.value)}\n    error=\"用户名不能为空\"\n/>\n\n// 条件Props\ntype ConditionalProps = \n    | { variant: 'icon'; icon: string; text?: never }\n    | { variant: 'text'; text: string; icon?: never }\n\nconst FlexibleButton: React.FC<ConditionalProps> = (props) => {\n    if (props.variant === 'icon') {\n        return <button><i className={props.icon} /></button>\n    }\n    return <button>{props.text}</button>\n}\n\n// 多态组件\ninterface PolymorphicProps<T extends React.ElementType> {\n    as?: T\n    children: React.ReactNode\n}\n\ntype Props<T extends React.ElementType> = PolymorphicProps<T> & \n    Omit<React.ComponentPropsWithoutRef<T>, keyof PolymorphicProps<T>>\n\nfunction Polymorphic<T extends React.ElementType = 'div'>({\n    as,\n    children,\n    ...props\n}: Props<T>) {\n    const Component = as || 'div'\n    return <Component {...props}>{children}</Component>\n}\n\n// 使用\n<Polymorphic as=\"button\" onClick={() => {}}>按钮</Polymorphic>\n<Polymorphic as=\"a\" href=\"/link\">链接</Polymorphic>"
    },
    "classComponents": {
        "title": "类组件类型",
        "language": "typescript",
        "code": "// 类组件Props和State类型\ninterface CounterProps {\n    initialValue?: number\n    onCountChange?: (count: number) => void\n}\n\ninterface CounterState {\n    count: number\n    isLoading: boolean\n}\n\nclass Counter extends React.Component<CounterProps, CounterState> {\n    constructor(props: CounterProps) {\n        super(props)\n        this.state = {\n            count: props.initialValue || 0,\n            isLoading: false\n        }\n    }\n    \n    handleIncrement = (): void => {\n        this.setState(\n            (prevState) => ({ count: prevState.count + 1 }),\n            () => {\n                this.props.onCountChange?.(this.state.count)\n            }\n        )\n    }\n    \n    render(): React.ReactNode {\n        const { count, isLoading } = this.state\n        \n        return (\n            <div>\n                <span>Count: {count}</span>\n                <button \n                    onClick={this.handleIncrement}\n                    disabled={isLoading}\n                >\n                    +1\n                </button>\n            </div>\n        )\n    }\n}\n\n// 高阶组件类型\ninterface WithLoadingProps {\n    isLoading: boolean\n}\n\nfunction withLoading<P extends object>(\n    Component: React.ComponentType<P>\n): React.FC<P & WithLoadingProps> {\n    return ({ isLoading, ...props }) => {\n        if (isLoading) {\n            return <div>Loading...</div>\n        }\n        return <Component {...(props as P)} />\n    }\n}\n\nconst ButtonWithLoading = withLoading(Button)"
    },
    "basicHooks": {
        "title": "基础Hooks类型",
        "language": "typescript",
        "code": "// useState类型推断\nconst [count, setCount] = useState(0) // 推断为number\nconst [name, setName] = useState('') // 推断为string\nconst [user, setUser] = useState<User | null>(null) // 显式类型\n\n// useEffect类型\nuseEffect(() => {\n    // 副作用逻辑\n    return () => {\n        // 清理函数\n    }\n}, []) // 依赖数组\n\n// useRef类型\nconst inputRef = useRef<HTMLInputElement>(null)\nconst countRef = useRef<number>(0)\n\n// 使用ref\nconst focusInput = () => {\n    inputRef.current?.focus()\n}\n\n// useCallback类型\nconst handleClick = useCallback(\n    (id: number) => {\n        console.log('Clicked:', id)\n    },\n    []\n)\n\n// useMemo类型\nconst expensiveValue = useMemo(() => {\n    return computeExpensiveValue(data)\n}, [data])\n\n// useReducer类型\ninterface State {\n    count: number\n    error: string | null\n}\n\ntype Action = \n    | { type: 'increment' }\n    | { type: 'decrement' }\n    | { type: 'reset'; payload: number }\n    | { type: 'error'; payload: string }\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'increment':\n            return { ...state, count: state.count + 1 }\n        case 'decrement':\n            return { ...state, count: state.count - 1 }\n        case 'reset':\n            return { ...state, count: action.payload }\n        case 'error':\n            return { ...state, error: action.payload }\n        default:\n            return state\n    }\n}\n\nconst [state, dispatch] = useReducer(reducer, { count: 0, error: null })"
    },
    "customHooks": {
        "title": "自定义Hooks类型",
        "language": "typescript",
        "code": "// 自定义Hook类型定义\ninterface UseApiResult<T> {\n    data: T | null\n    loading: boolean\n    error: string | null\n    refetch: () => void\n}\n\nfunction useApi<T>(url: string): UseApiResult<T> {\n    const [data, setData] = useState<T | null>(null)\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState<string | null>(null)\n    \n    const fetchData = useCallback(async () => {\n        try {\n            setLoading(true)\n            setError(null)\n            const response = await fetch(url)\n            const result = await response.json()\n            setData(result)\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Unknown error')\n        } finally {\n            setLoading(false)\n        }\n    }, [url])\n    \n    useEffect(() => {\n        fetchData()\n    }, [fetchData])\n    \n    return { data, loading, error, refetch: fetchData }\n}\n\n// 使用自定义Hook\ninterface User {\n    id: number\n    name: string\n    email: string\n}\n\nconst UserProfile: React.FC<{ userId: number }> = ({ userId }) => {\n    const { data: user, loading, error } = useApi<User>(`/api/users/${userId}`)\n    \n    if (loading) return <div>Loading...</div>\n    if (error) return <div>Error: {error}</div>\n    if (!user) return <div>User not found</div>\n    \n    return (\n        <div>\n            <h1>{user.name}</h1>\n            <p>{user.email}</p>\n        </div>\n    )\n}\n\n// 复杂自定义Hook\ninterface UseFormOptions<T> {\n    initialValues: T\n    validate?: (values: T) => Partial<Record<keyof T, string>>\n    onSubmit: (values: T) => void | Promise<void>\n}\n\ninterface UseFormReturn<T> {\n    values: T\n    errors: Partial<Record<keyof T, string>>\n    isSubmitting: boolean\n    handleChange: (field: keyof T) => (value: T[keyof T]) => void\n    handleSubmit: (e: React.FormEvent) => void\n    reset: () => void\n}\n\nfunction useForm<T extends Record<string, any>>(\n    options: UseFormOptions<T>\n): UseFormReturn<T> {\n    // 实现...\n    return {} as UseFormReturn<T>\n}"
    },
    "eventTypes": {
        "title": "常用事件类型",
        "language": "typescript",
        "code": "// 鼠标事件\nconst handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault()\n    console.log('Button clicked')\n}\n\nconst handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n    console.log('Mouse entered')\n}\n\n// 键盘事件\nconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n        console.log('Enter pressed')\n    }\n}\n\n// 表单事件\nconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const formData = new FormData(e.currentTarget)\n    console.log(formData)\n}\n\nconst handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value)\n}\n\nconst handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    console.log(e.target.value)\n}\n\n// 焦点事件\nconst handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    console.log('Input focused')\n}\n\nconst handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    console.log('Input blurred')\n}\n\n// 通用事件处理器类型\ntype EventHandler<T = HTMLElement> = (e: React.SyntheticEvent<T>) => void\n\n// 组件中使用\ninterface FormProps {\n    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Form: React.FC<FormProps> = ({ onSubmit, onChange }) => {\n    return (\n        <form onSubmit={onSubmit}>\n            <input onChange={onChange} />\n            <button type=\"submit\">Submit</button>\n        </form>\n    )\n}"
    },
    "customEvents": {
        "title": "自定义事件类型",
        "language": "typescript",
        "code": "// 自定义事件接口\ninterface CustomSelectEvent {\n    value: string\n    label: string\n    index: number\n}\n\ninterface SelectProps {\n    options: Array<{ value: string; label: string }>\n    onSelect: (event: CustomSelectEvent) => void\n}\n\nconst Select: React.FC<SelectProps> = ({ options, onSelect }) => {\n    const handleOptionClick = (option: typeof options[0], index: number) => {\n        onSelect({\n            value: option.value,\n            label: option.label,\n            index\n        })\n    }\n    \n    return (\n        <div>\n            {options.map((option, index) => (\n                <div \n                    key={option.value}\n                    onClick={() => handleOptionClick(option, index)}\n                >\n                    {option.label}\n                </div>\n            ))}\n        </div>\n    )\n}\n\n// 事件处理器工厂\nfunction createEventHandler<T>(\n    handler: (data: T) => void\n): (e: React.SyntheticEvent) => void {\n    return (e) => {\n        e.preventDefault()\n        // 从事件中提取数据\n        const data = extractDataFromEvent<T>(e)\n        handler(data)\n    }\n}\n\nfunction extractDataFromEvent<T>(e: React.SyntheticEvent): T {\n    // 实现数据提取逻辑\n    return {} as T\n}"
    }
}
