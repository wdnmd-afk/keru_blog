// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @unique
  email      String       @unique
  name       String?
  admin      Boolean
  password   String       @default(dbgenerated("123456"))
  random     Int          @default(dbgenerated("10"))
  UserDetail UserDetail[]
  files      File[]
  todos      Todo[]
  userRoles  UserRole[]   // 用户角色关联
}

model UserDetail {
  id          String  @id @unique
  name        String?
  address     String?
  phoneNumber String?
  bio         String?
  // 其他详细信息字段...
  sex         String?
  age         Int?
  avatar      String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
}

model File {
  id           String      @id @unique
  filename     String
  mimeType     String
  size         Int
  path         String
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploader     User     @relation(fields: [uploaderId], references: [id])
  uploaderId   String
}


model Technology {
  id          String   @id @unique
  name        String
  description String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topic {
  id           String   @id @unique
  title        String
  content      String   @db.Text
  technologyId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}



model CodeSnippet {
  id           String   @id @unique
  title        String
  code         String   @db.Text
  language     String
  description  String?
  technologyId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Todo {
  id        String   @id @unique
  content   String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      TodoType @default(RECENT)
}

enum TodoType {
  RECENT
  LONG_TERM
  STUDY_PLAN
}

// ================= Feedback 模块 =================
model Feedback {
  id         String           @id @unique
  title      String?
  content    String           @db.Text
  userName   String?
  userEmail  String?
  category   FeedbackCategory
  status     FeedbackStatus   @default(PENDING)
  advice     String?          @db.Text
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum FeedbackCategory {
  SUGGESTION
  BUG
  OTHER
}

enum FeedbackStatus {
  PENDING
  VIEWED
  RESOLVED
}


// ================= AI 对话记录 =================
model AiConversation {
  id         String   @id @unique
  userId     String
  message    String   @db.Text
  response   String   @db.Text
  createdAt  DateTime @default(now())

  @@index([userId, createdAt])
  @@map("ai_conversations")
}

// RBAC 权限管理相关模型

// 权限表
model Permission {
  id          String           @id @unique
  name        String           // 权限名称
  code        String           @unique // 权限代码，如 'user:create', 'dashboard:view'
  type        PermissionType   // 权限类型：页面权限或按钮权限
  description String?          // 权限描述
  parentId    String?          // 父权限ID，用于构建权限树
  parent      Permission?      @relation("PermissionHierarchy", fields: [parentId], references: [id])
  children    Permission[]     @relation("PermissionHierarchy")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  rolePermissions RolePermission[] // 角色权限关联
}

// 角色表
model Role {
  id          String           @id @unique
  name        String           @unique // 角色名称
  description String?          // 角色描述
  status      RoleStatus       @default(ACTIVE) // 角色状态
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userRoles   UserRole[]       // 用户角色关联
  rolePermissions RolePermission[] // 角色权限关联
}

// 用户角色关联表
model UserRole {
  id        String   @id @unique
  userId    String   // 用户ID
  roleId    String   // 角色ID
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId]) // 确保用户-角色组合唯一
}

// 角色权限关联表
model RolePermission {
  id           String     @id @unique
  roleId       String     // 角色ID
  permissionId String     // 权限ID
  createdAt    DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // 确保角色-权限组合唯一
}

// 权限类型枚举
enum PermissionType {
  PAGE    // 页面权限
  BUTTON  // 按钮权限
}

// 角色状态枚举
enum RoleStatus {
  ACTIVE    // 激活
  INACTIVE  // 停用
}

