{"version":3,"file":"utils.js","sources":["../src/utils/memoComparator.ts"],"sourcesContent":["/**\n * React.memo比较函数工具\n * 提供通用的props比较策略，优化组件重新渲染控制\n */\n\nexport type CompareMode = 'include' | 'exclude'\n\nexport interface MemoComparatorOptions {\n    /** 比较模式 */\n    mode: CompareMode\n    /** 是否启用深度比较 */\n    deepCompare?: boolean\n    /** 自定义比较函数 */\n    customCompare?: Record<string, (prev: any, next: any) => boolean>\n}\n\n/**\n * 深度比较两个值是否相等\n */\nfunction deepEqual(a: any, b: any): boolean {\n    if (a === b) return true\n\n    if (a == null || b == null) return a === b\n\n    if (typeof a !== typeof b) return false\n\n    if (typeof a !== 'object') return a === b\n\n    if (Array.isArray(a) !== Array.isArray(b)) return false\n\n    if (Array.isArray(a)) {\n        if (a.length !== b.length) return false\n        return a.every((item, index) => deepEqual(item, b[index]))\n    }\n\n    const keysA = Object.keys(a)\n    const keysB = Object.keys(b)\n\n    if (keysA.length !== keysB.length) return false\n\n    return keysA.every((key) => deepEqual(a[key], b[key]))\n}\n\n/**\n * 浅比较两个值是否相等\n */\nfunction shallowEqual(a: any, b: any): boolean {\n    return a === b\n}\n\n/**\n * 创建React.memo比较函数\n * @param keys 要比较或忽略的属性键列表\n * @param options 比较选项\n * @returns React.memo比较函数\n */\nexport function createMemoComparator<T extends Record<string, any>>(\n    keys: (keyof T)[],\n    options: MemoComparatorOptions\n): (prevProps: T, nextProps: T) => boolean {\n    const { mode, deepCompare = false, customCompare = {} } = options\n\n    return (prevProps: T, nextProps: T): boolean => {\n        // 获取要比较的属性列表\n        const propsToCompare =\n            mode === 'include'\n                ? keys\n                : (Object.keys(prevProps).filter(\n                      (key) => !keys.includes(key as keyof T)\n                  ) as (keyof T)[])\n\n        // 选择比较函数\n        const compareFunc = deepCompare ? deepEqual : shallowEqual\n\n        // 逐个比较属性\n        for (const key of propsToCompare) {\n            const prevValue = prevProps[key]\n            const nextValue = nextProps[key]\n\n            // 使用自定义比较函数（如果存在）\n            if (customCompare[key as string]) {\n                if (!customCompare[key as string](prevValue, nextValue)) {\n                    return false // props不同，需要重新渲染\n                }\n                continue\n            }\n\n            // 使用默认比较函数\n            if (!compareFunc(prevValue, nextValue)) {\n                return false // props不同，需要重新渲染\n            }\n        }\n\n        return true // 所有比较的props都相同，不需要重新渲染\n    }\n}\n\n/**\n * 便捷函数：创建include模式的比较器\n */\nexport function createIncludeComparator<T extends Record<string, any>>(\n    keys: (keyof T)[],\n    deepCompare = false,\n    customCompare?: Record<string, (prev: any, next: any) => boolean>\n): (prevProps: T, nextProps: T) => boolean {\n    return createMemoComparator(keys, {\n        mode: 'include',\n        deepCompare,\n        customCompare,\n    })\n}\n\n/**\n * 便捷函数：创建exclude模式的比较器\n */\nexport function createExcludeComparator<T extends Record<string, any>>(\n    keys: (keyof T)[],\n    deepCompare = false,\n    customCompare?: Record<string, (prev: any, next: any) => boolean>\n): (prevProps: T, nextProps: T) => boolean {\n    return createMemoComparator(keys, {\n        mode: 'exclude',\n        deepCompare,\n        customCompare,\n    })\n}\n\n/**\n * 预定义的常用比较器\n */\nexport const commonComparators = {\n    /**\n     * 忽略函数类型的props（如回调函数）\n     */\n    ignoreFunctions: <T extends Record<string, any>>(prevProps: T, nextProps: T): boolean => {\n        const keys = Object.keys(prevProps).filter(\n            (key) => typeof prevProps[key] !== 'function'\n        ) as (keyof T)[]\n        return createIncludeComparator(keys)(prevProps, nextProps)\n    },\n\n    /**\n     * 只比较基础类型的props\n     */\n    primitiveOnly: <T extends Record<string, any>>(prevProps: T, nextProps: T): boolean => {\n        const keys = Object.keys(prevProps).filter((key) => {\n            const value = prevProps[key]\n            return (\n                typeof value === 'string' ||\n                typeof value === 'number' ||\n                typeof value === 'boolean' ||\n                value == null\n            )\n        }) as (keyof T)[]\n        return createIncludeComparator(keys)(prevProps, nextProps)\n    },\n}\n\n/**\n * 调试工具：记录props变化\n */\nexport function createDebugComparator<T extends Record<string, any>>(\n    comparator: (prevProps: T, nextProps: T) => boolean,\n    componentName?: string\n): (prevProps: T, nextProps: T) => boolean {\n    return (prevProps: T, nextProps: T): boolean => {\n        const result = comparator(prevProps, nextProps)\n\n        if (process.env.NODE_ENV === 'development' && !result) {\n            const changedKeys = Object.keys(prevProps).filter(\n                (key) => prevProps[key] !== nextProps[key]\n            )\n\n            console.log(`[${componentName || 'Component'}] Props changed:`, changedKeys)\n            console.log('Previous props:', prevProps)\n            console.log('Next props:', nextProps)\n        }\n\n        return result\n    }\n}\n\n/**\n * 性能监控装饰器\n */\nexport function withPerformanceMonitoring<T extends Record<string, any>>(\n    comparator: (prevProps: T, nextProps: T) => boolean,\n    componentName?: string\n): (prevProps: T, nextProps: T) => boolean {\n    return (prevProps: T, nextProps: T): boolean => {\n        const startTime = performance.now()\n        const result = comparator(prevProps, nextProps)\n        const endTime = performance.now()\n\n        if (process.env.NODE_ENV === 'development') {\n            const duration = endTime - startTime\n            if (duration > 1) {\n                // 只记录超过1ms的比较\n                console.warn(\n                    `[${componentName || 'Component'}] Slow memo comparison: ${duration.toFixed(2)}ms`\n                )\n            }\n        }\n\n        return result\n    }\n}\n"],"names":[],"mappings":"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"}